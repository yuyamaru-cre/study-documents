{"internalDocumentIDStore":{"internalIdToId":["00f7a17a58ce641031276f183b3a5f2f","e0da47551e90934057bad285d1ba8181","69a44dc01c5ffd62a5b69fd0397f869f","e656845f32042b038bd5cdfd675b4c06","6fd9eb7813fbe3b992f1acb925e8c8e6","f54a470b21c322a6e380d7e3753c5706","1db65c2d42406ac6cb5c1b9c63dc269d"]},"index":{"indexes":{"id":{"type":"Radix","node":{"w":"","s":"","c":{"0":{"w":"00f7a17a58ce641031276f183b3a5f2f","s":"00f7a17a58ce641031276f183b3a5f2f","c":{},"d":[1],"e":true},"1":{"w":"1db65c2d42406ac6cb5c1b9c63dc269d","s":"1db65c2d42406ac6cb5c1b9c63dc269d","c":{},"d":[7],"e":true},"6":{"w":"6","s":"6","c":{"9":{"w":"69a44dc01c5ffd62a5b69fd0397f869f","s":"9a44dc01c5ffd62a5b69fd0397f869f","c":{},"d":[3],"e":true},"f":{"w":"6fd9eb7813fbe3b992f1acb925e8c8e6","s":"fd9eb7813fbe3b992f1acb925e8c8e6","c":{},"d":[5],"e":true}},"d":[],"e":false},"e":{"w":"e","s":"e","c":{"0":{"w":"e0da47551e90934057bad285d1ba8181","s":"0da47551e90934057bad285d1ba8181","c":{},"d":[2],"e":true},"6":{"w":"e656845f32042b038bd5cdfd675b4c06","s":"656845f32042b038bd5cdfd675b4c06","c":{},"d":[4],"e":true}},"d":[],"e":false},"f":{"w":"f54a470b21c322a6e380d7e3753c5706","s":"f54a470b21c322a6e380d7e3753c5706","c":{},"d":[6],"e":true}},"d":[],"e":false},"isArray":false},"title":{"type":"Radix","node":{"w":"","s":"","c":{"m":{"w":"main","s":"main","c":{},"d":[1,2,3,4,5,6],"e":true},"r":{"w":"requirements","s":"requirements","c":{},"d":[7],"e":true}},"d":[],"e":false},"isArray":false},"path":{"type":"Radix","node":{"w":"","s":"","c":{"s":{"w":"source","s":"source","c":{},"d":[1,2,3,4,5,6,7],"e":true},"i":{"w":"image-editor","s":"image-editor","c":{},"d":[1,2,3,4,5,6,7],"e":true},"m":{"w":"m","s":"m","c":{"a":{"w":"main","s":"ain","c":{},"d":[1,2,3,4,5,6],"e":true},"d":{"w":"md","s":"d","c":{},"d":[1,2,3,4,5,6,7],"e":true}},"d":[],"e":false},"r":{"w":"requirements","s":"requirements","c":{},"d":[7],"e":true}},"d":[],"e":false},"isArray":false},"content":{"type":"Radix","node":{"w":"","s":"","c":{"0":{"w":"0","s":"0","c":{"1":{"w":"01","s":"1","c":{},"d":[1,2,3,4,5,6,7],"e":true},"7":{"w":"07","s":"7","c":{},"d":[1,2,3,4,5,6,7],"e":true},"8":{"w":"08","s":"8","c":{},"d":[1,2,3,4,5,6,7],"e":true},"9":{"w":"09","s":"9","c":{},"d":[7],"e":true}},"d":[1,2,3,4,5,6,7],"e":true},"1":{"w":"1","s":"1","c":{"0":{"w":"10","s":"0","c":{"2":{"w":"1024","s":"24","c":{},"d":[4,5],"e":true},"4":{"w":"104","s":"4","c":{},"d":[7],"e":true}},"d":[7],"e":true},"3":{"w":"13","s":"3","c":{},"d":[7],"e":true},"f":{"w":"1f","s":"f","c":{"i":{"w":"1fill","s":"ill","c":{},"d":[5],"e":true}},"d":[4,5],"e":true},"s":{"w":"1style","s":"style","c":{},"d":[5],"e":true}},"d":[1,2,3,4,5,7],"e":true},"2":{"w":"2","s":"2","c":{"0":{"w":"2025","s":"025","c":{},"d":[1,2,3,4,5,6,7],"e":true},"1":{"w":"21","s":"1","c":{},"d":[7],"e":true},"3":{"w":"23","s":"3","c":{},"d":[7],"e":true},"4":{"w":"24","s":"4","c":{},"d":[4,7],"e":true},"5":{"w":"255","s":"55","c":{},"d":[2,3],"e":true},"6":{"w":"26","s":"6","c":{},"d":[7],"e":true},"7":{"w":"27","s":"7","c":{},"d":[1,2,3,4,5,6,7],"e":true},"f":{"w":"2fill","s":"fill","c":{},"d":[5],"e":true}},"d":[5,7],"e":true},"3":{"w":"3","s":"3","c":{"0":{"w":"30","s":"0","c":{},"d":[2],"e":true},"1":{"w":"31","s":"1","c":{},"d":[7],"e":true},"6":{"w":"3600","s":"600","c":{},"d":[4],"e":true}},"d":[2,5,7],"e":true},"4":{"w":"4","s":"4","c":{"0":{"w":"40","s":"0","c":{"0":{"w":"400","s":"0","c":{},"d":[1,4,6],"e":true},"4":{"w":"404","s":"4","c":{},"d":[4,5,6],"e":true}},"d":[],"e":false},"6":{"w":"46","s":"6","c":{},"d":[1,2,3,4,5,6],"e":true}},"d":[7],"e":true},"5":{"w":"5","s":"5","c":{"0":{"w":"500","s":"00","c":{},"d":[4,5,6],"e":true}},"d":[7],"e":true},"6":{"w":"6","s":"6","c":{"0":{"w":"600","s":"00","c":{},"d":[2],"e":true}},"d":[2,7],"e":true},"7":{"w":"7","s":"7","c":{"2":{"w":"72","s":"2","c":{},"d":[2,3],"e":true}},"d":[7],"e":true},"8":{"w":"8","s":"8","c":{"0":{"w":"800","s":"00","c":{"0":{"w":"8000","s":"0","c":{},"d":[6],"e":true}},"d":[2],"e":true}},"d":[2,5,6],"e":true},"9":{"w":"95","s":"95","c":{},"d":[2,3],"e":true},"n":{"w":"n","s":"n","c":{"o":{"w":"no","s":"o","c":{"t":{"w":"not","s":"t","c":{"e":{"w":"note","s":"e","c":{},"d":[1,2,3,4,5,6,7],"e":true}},"d":[1,2,3,4,5,6],"e":true},"n":{"w":"none","s":"ne","c":{},"d":[1,2,3,4,6],"e":true},"w":{"w":"now","s":"w","c":{},"d":[4],"e":true}},"d":[4,5,6],"e":true},"a":{"w":"name","s":"ame","c":{},"d":[1,6],"e":true},"e":{"w":"new","s":"ew","c":{},"d":[2,3,5],"e":true},"u":{"w":"numpy","s":"umpy","c":{},"d":[7],"e":true}},"d":[],"e":false},"t":{"w":"t","s":"t","c":{"i":{"w":"ti","s":"i","c":{"t":{"w":"title","s":"tle","c":{},"d":[1,2,3,4,5,6,7],"e":true},"m":{"w":"time","s":"me","c":{"s":{"w":"timestamp","s":"stamp","c":{},"d":[4],"e":true}},"d":[4],"e":true}},"d":[],"e":false},"y":{"w":"typ","s":"yp","c":{"i":{"w":"typing","s":"ing","c":{},"d":[1],"e":true},"e":{"w":"type","s":"e","c":{},"d":[1],"e":true}},"d":[],"e":false},"e":{"w":"te","s":"e","c":{"x":{"w":"text","s":"xt","c":{"_":{"w":"text_","s":"_","c":{"i":{"w":"text_image_replacer","s":"image_replacer","c":{},"d":[1],"e":true},"r":{"w":"text_replace","s":"replace","c":{"m":{"w":"text_replacements","s":"ments","c":{},"d":[6],"e":true},"d":{"w":"text_replaced_","s":"d_","c":{},"d":[6],"e":true}},"d":[],"e":false}},"d":[],"e":false},"i":{"w":"textimagereplacer","s":"imagereplacer","c":{},"d":[1,6],"e":true},"r":{"w":"textreplacerequest","s":"replacerequest","c":{},"d":[6],"e":true}},"d":[6],"e":true},"m":{"w":"template","s":"mplate","c":{"-":{"w":"template-","s":"-","c":{"b":{"w":"template-based","s":"based","c":{},"d":[6],"e":true},"c":{"w":"template-config","s":"config","c":{},"d":[6],"e":true}},"d":[],"e":false}},"d":[5],"e":true}},"d":[],"e":false},"r":{"w":"tr","s":"r","c":{"u":{"w":"true","s":"ue","c":{},"d":[1,2,3,6],"e":true},"y":{"w":"try","s":"y","c":{},"d":[1,2,3,4,5,6],"e":true}},"d":[],"e":false},"o":{"w":"to","s":"o","c":{"t":{"w":"total","s":"tal","c":{"_":{"w":"total_","s":"_","c":{"d":{"w":"total_deleted","s":"deleted","c":{},"d":[4],"e":true},"s":{"w":"total_size","s":"size","c":{},"d":[4],"e":true},"c":{"w":"total_count","s":"count","c":{},"d":[5,6],"e":true}},"d":[],"e":false}},"d":[4],"e":true},"u":{"w":"tourism","s":"urism","c":{"_":{"w":"tourism_layout_","s":"_layout_","c":{},"d":[6],"e":true}},"d":[6],"e":true}},"d":[4,6],"e":true},"h":{"w":"than","s":"han","c":{},"d":[4],"e":true}},"d":[],"e":false},"m":{"w":"m","s":"m","c":{"a":{"w":"ma","s":"a","c":{"i":{"w":"main","s":"in","c":{},"d":[1,2,3,4,5,6],"e":true},"p":{"w":"map","s":"p","c":{},"d":[5],"e":true},"t":{"w":"matched","s":"tched","c":{},"d":[5],"e":true}},"d":[],"e":false},"e":{"w":"me","s":"e","c":{"t":{"w":"metadata","s":"tadata","c":{},"d":[1,2,3,4,5,6,7],"e":true},"s":{"w":"message","s":"ssage","c":{},"d":[1,4,6],"e":true},"d":{"w":"media_type","s":"dia_type","c":{},"d":[4,5],"e":true}},"d":[],"e":false},"o":{"w":"mo","s":"o","c":{"d":{"w":"mod","s":"d","c":{"i":{"w":"modified","s":"ified","c":{},"d":[1,2,3,4,5,6,7],"e":true},"e":{"w":"mode","s":"e","c":{},"d":[3],"e":true}},"d":[],"e":false},"u":{"w":"mount","s":"unt","c":{},"d":[1],"e":true}},"d":[],"e":false},"i":{"w":"mi","s":"i","c":{"d":{"w":"middleware","s":"ddleware","c":{},"d":[1],"e":true},"n":{"w":"min","s":"n","c":{},"d":[2],"e":true}},"d":[],"e":false},"k":{"w":"mkdir","s":"kdir","c":{},"d":[1],"e":true},"b":{"w":"mb","s":"b","c":{},"d":[4,5],"e":true},"-":{"w":"m-","s":"-","c":{},"d":[6],"e":true}},"d":[6],"e":true},"c":{"w":"c","s":"c","c":{"r":{"w":"cr","s":"r","c":{"e":{"w":"creat","s":"eat","c":{"e":{"w":"create","s":"e","c":{"d":{"w":"created","s":"d","c":{"_":{"w":"created_at","s":"_at","c":{},"d":[5,6],"e":true}},"d":[1,2,3,4,5,6,7],"e":true},"_":{"w":"create_","s":"_","c":{"t":{"w":"create_t","s":"t","c":{"e":{"w":"create_template_config","s":"emplate_config","c":{},"d":[1,6],"e":true},"o":{"w":"create_tourism_layout","s":"ourism_layout","c":{},"d":[6],"e":true}},"d":[],"e":false},"c":{"w":"create_composite_image","s":"composite_image","c":{},"d":[6],"e":true}},"d":[],"e":false},"-":{"w":"create-tourism-layout","s":"-tourism-layout","c":{},"d":[6],"e":true}},"d":[],"e":false},"i":{"w":"creation","s":"ion","c":{},"d":[6],"e":true}},"d":[],"e":false},"o":{"w":"crop","s":"op","c":{},"d":[2],"e":true},"y":{"w":"cryptography","s":"yptography","c":{},"d":[7],"e":true}},"d":[],"e":false},"o":{"w":"co","s":"o","c":{"n":{"w":"con","s":"n","c":{"t":{"w":"cont","s":"t","c":{"e":{"w":"content","s":"ent","c":{"_":{"w":"content_type","s":"_type","c":{},"d":[1],"e":true},"-":{"w":"content-disposition","s":"-disposition","c":{},"d":[4],"e":true}},"d":[1,2,3,4,5,6,7],"e":true},"i":{"w":"continue","s":"inue","c":{},"d":[1,5],"e":true},"'":{"w":"cont'd","s":"'d","c":{},"d":[2,3,4,5,6],"e":true}},"d":[],"e":false},"v":{"w":"convert","s":"vert","c":{},"d":[2,3],"e":true},"f":{"w":"config","s":"fig","c":{},"d":[6],"e":true}},"d":[],"e":false},"r":{"w":"cors","s":"rs","c":{"m":{"w":"corsmiddleware","s":"middleware","c":{},"d":[1],"e":true}},"d":[1],"e":true},"p":{"w":"copy","s":"py","c":{},"d":[2,3,6],"e":true},"u":{"w":"could","s":"uld","c":{},"d":[2,3],"e":true},"m":{"w":"compress_level","s":"mpress_level","c":{},"d":[3],"e":true},"l":{"w":"color","s":"lor","c":{},"d":[4,5],"e":true}},"d":[],"e":false},"l":{"w":"cl","s":"l","c":{"a":{"w":"class","s":"ass","c":{},"d":[1,4,5,6],"e":true},"e":{"w":"clear","s":"ear","c":{"-":{"w":"clear-","s":"-","c":{"f":{"w":"clear-files","s":"files","c":{},"d":[4],"e":true},"o":{"w":"clear-old-files","s":"old-files","c":{},"d":[4],"e":true}},"d":[],"e":false},"_":{"w":"clear_","s":"_","c":{"f":{"w":"clear_files","s":"files","c":{},"d":[4],"e":true},"o":{"w":"clear_old_files","s":"old_files","c":{},"d":[4],"e":true}},"d":[],"e":false},"e":{"w":"cleared","s":"ed","c":{},"d":[4],"e":true}},"d":[4],"e":true}},"d":[],"e":false},"p":{"w":"cpu","s":"pu","c":{},"d":[2,3,4],"e":true},"u":{"w":"cu","s":"u","c":{"r":{"w":"current_time","s":"rrent_time","c":{},"d":[4],"e":true},"t":{"w":"cutoff_time","s":"toff_time","c":{},"d":[4],"e":true}},"d":[],"e":false}},"d":[],"e":false},"b":{"w":"b","s":"b","c":{"l":{"w":"bl","s":"l","c":{"o":{"w":"block","s":"ock","c":{},"d":[1,2,3,4,5,6,7],"e":true},"u":{"w":"blur","s":"ur","c":{},"d":[2],"e":true}},"d":[],"e":false},"a":{"w":"basemodel","s":"asemodel","c":{},"d":[1,4,5,6],"e":true},"o":{"w":"bool","s":"ool","c":{},"d":[1],"e":true},"i":{"w":"bicubic","s":"icubic","c":{},"d":[2],"e":true},"y":{"w":"bytesio","s":"ytesio","c":{},"d":[4],"e":true},"c":{"w":"bcrypt","s":"crypt","c":{},"d":[7],"e":true}},"d":[2,4,5],"e":true},"f":{"w":"f","s":"f","c":{"r":{"w":"from","s":"rom","c":{"t":{"w":"fromtimestamp","s":"timestamp","c":{},"d":[6],"e":true}},"d":[1,4,5],"e":true},"a":{"w":"fa","s":"a","c":{"s":{"w":"fastapi","s":"stapi","c":{},"d":[1,7],"e":true},"i":{"w":"failed","s":"iled","c":{},"d":[4,5,6],"e":true},"l":{"w":"false","s":"lse","c":{},"d":[6],"e":true}},"d":[],"e":false},"i":{"w":"fi","s":"i","c":{"l":{"w":"fil","s":"l","c":{"e":{"w":"file","s":"e","c":{"r":{"w":"fileresponse","s":"response","c":{},"d":[1,4,5],"e":true},"n":{"w":"filename","s":"name","c":{"s":{"w":"filenames","s":"s","c":{},"d":[4],"e":true}},"d":[1,2,4,5,6],"e":true},"_":{"w":"file_","s":"_","c":{"e":{"w":"file_extension","s":"extension","c":{},"d":[1],"e":true},"p":{"w":"file_path","s":"path","c":{},"d":[1,4,5,6],"e":true},"c":{"w":"file_count","s":"count","c":{},"d":[4],"e":true},"t":{"w":"file_type","s":"type","c":{},"d":[5,6],"e":true}},"d":[],"e":false},"s":{"w":"files","s":"s","c":{},"d":[1,4,5,6],"e":true},"i":{"w":"fileinfo","s":"info","c":{},"d":[5,6],"e":true},"l":{"w":"filelistresponse","s":"listresponse","c":{},"d":[5,6],"e":true}},"d":[1,5,6],"e":true},"t":{"w":"filter","s":"ter","c":{},"d":[2],"e":true},"l":{"w":"fill","s":"l","c":{},"d":[5],"e":true}},"d":[],"e":false},"t":{"w":"fit","s":"t","c":{},"d":[2],"e":true}},"d":[],"e":false},"l":{"w":"float","s":"loat","c":{},"d":[1,2,3],"e":true},"o":{"w":"fo","s":"o","c":{"r":{"w":"for","s":"r","c":{"m":{"w":"format","s":"mat","c":{"_":{"w":"format_size","s":"_size","c":{},"d":[4,5,6],"e":true}},"d":[3],"e":true}},"d":[1,2,4,5,6],"e":true},"u":{"w":"found","s":"und","c":{},"d":[1,4,5,6],"e":true}},"d":[],"e":false},"f":{"w":"ff","s":"f","c":{"6":{"w":"ff6277","s":"6277","c":{},"d":[4,5],"e":true},"f":{"w":"fff","s":"f","c":{},"d":[5],"e":true}},"d":[],"e":false},"'":{"w":"f'id","s":"'id","c":{},"d":[5],"e":true}},"d":[1,2,3,4,5,6],"e":true},"i":{"w":"i","s":"i","c":{"m":{"w":"im","s":"m","c":{"p":{"w":"import","s":"port","c":{},"d":[1,4,5,6],"e":true},"a":{"w":"image","s":"age","c":{"f":{"w":"imagefilter","s":"filter","c":{},"d":[1,2],"e":true},"e":{"w":"imageenhance","s":"enhance","c":{},"d":[1],"e":true},"o":{"w":"imageops","s":"ops","c":{},"d":[1,2],"e":true},"r":{"w":"imageresponse","s":"response","c":{},"d":[1],"e":true},"b":{"w":"imagebatchresponse","s":"batchresponse","c":{},"d":[1,2],"e":true},"_":{"w":"image_","s":"_","c":{"u":{"w":"image_url","s":"url","c":{"s":{"w":"image_urls","s":"s","c":{},"d":[1,6],"e":true}},"d":[1,2,6],"e":true},"r":{"w":"image_r","s":"r","c":{"g":{"w":"image_rgba","s":"gba","c":{},"d":[3],"e":true},"e":{"w":"image_replacements","s":"eplacements","c":{},"d":[6],"e":true}},"d":[],"e":false},"i":{"w":"image_id","s":"id","c":{},"d":[6],"e":true},"f":{"w":"image_filename","s":"filename","c":{},"d":[6],"e":true},"p":{"w":"image_path","s":"path","c":{},"d":[6],"e":true}},"d":[],"e":false},"s":{"w":"images","s":"s","c":{},"d":[1,4,6],"e":true}},"d":[1,2,3,4,5,6],"e":true},"g":{"w":"img","s":"g","c":{},"d":[6],"e":true}},"d":[],"e":false},"o":{"w":"io","s":"o","c":{},"d":[1,4],"e":true},"d":{"w":"id","s":"d","c":{},"d":[1,5],"e":true},"f":{"w":"if","s":"f","c":{},"d":[1,2,3,4,5,6],"e":true},"n":{"w":"in","s":"n","c":{"v":{"w":"invalid","s":"valid","c":{},"d":[1],"e":true},"p":{"w":"input_path","s":"put_path","c":{},"d":[1,2,3],"e":true},"t":{"w":"int","s":"t","c":{},"d":[2,3,4,5],"e":true},"f":{"w":"info","s":"fo","c":{},"d":[2,3,4],"e":true}},"d":[1,2,3,4,5,6],"e":true},"s":{"w":"is","s":"s","c":{"_":{"w":"is_file","s":"_file","c":{},"d":[4,6],"e":true},"o":{"w":"isoformat","s":"oformat","c":{},"d":[4],"e":true}},"d":[2],"e":true},"c":{"w":"icc","s":"cc","c":{"_":{"w":"icc_profile","s":"_profile","c":{},"d":[2,3],"e":true}},"d":[2,3],"e":true},"t":{"w":"items","s":"tems","c":{},"d":[6],"e":true}},"d":[4,5],"e":true},"u":{"w":"u","s":"u","c":{"p":{"w":"up","s":"p","c":{"l":{"w":"upload","s":"load","c":{"f":{"w":"uploadfile","s":"file","c":{},"d":[1],"e":true},"_":{"w":"upload_","s":"_","c":{"d":{"w":"upload_dir","s":"dir","c":{},"d":[1,4,6],"e":true},"i":{"w":"upload_image","s":"image","c":{},"d":[1],"e":true},"b":{"w":"upload_batch_images","s":"batch_images","c":{},"d":[1],"e":true},"f":{"w":"upload_files","s":"files","c":{},"d":[4],"e":true},"s":{"w":"upload_size","s":"size","c":{},"d":[4],"e":true},"c":{"w":"upload_count","s":"count","c":{},"d":[4],"e":true},"p":{"w":"upload_path","s":"path","c":{},"d":[6],"e":true}},"d":[],"e":false},"s":{"w":"uploads","s":"s","c":{},"d":[1,4,5,6],"e":true},"-":{"w":"upload-batch","s":"-batch","c":{},"d":[1],"e":true},"e":{"w":"uploaded_","s":"ed_","c":{"f":{"w":"uploaded_files","s":"files","c":{},"d":[1],"e":true},"i":{"w":"uploaded_image_url","s":"image_url","c":{},"d":[6],"e":true}},"d":[],"e":false}},"d":[1,6],"e":true},"d":{"w":"updated","s":"dated","c":{},"d":[5],"e":true}},"d":[],"e":false},"u":{"w":"uuid","s":"uid","c":{"4":{"w":"uuid4","s":"4","c":{},"d":[1,5,6],"e":true}},"d":[1,5,6],"e":true},"r":{"w":"url","s":"rl","c":{},"d":[1],"e":true},"n":{"w":"un","s":"n","c":{"i":{"w":"unique_filename","s":"ique_filename","c":{},"d":[1],"e":true},"l":{"w":"unlink","s":"link","c":{},"d":[4,6],"e":true}},"d":[],"e":false},"t":{"w":"utf-8","s":"tf-8","c":{},"d":[5],"e":true},"s":{"w":"using","s":"sing","c":{},"d":[6],"e":true},"v":{"w":"uvicorn","s":"vicorn","c":{},"d":[6,7],"e":true}},"d":[],"e":false},"h":{"w":"h","s":"h","c":{"t":{"w":"httpexception","s":"ttpexception","c":{},"d":[1,4,5,6],"e":true},"e":{"w":"he","s":"e","c":{"i":{"w":"height","s":"ight","c":{},"d":[2],"e":true},"a":{"w":"hea","s":"a","c":{"d":{"w":"headers","s":"ders","c":{},"d":[4],"e":true},"l":{"w":"health","s":"lth","c":{"_":{"w":"health_check","s":"_check","c":{},"d":[4],"e":true},"y":{"w":"healthy","s":"y","c":{},"d":[4],"e":true}},"d":[4],"e":true}},"d":[],"e":false},"x":{"w":"hex","s":"x","c":{},"d":[5,6],"e":true}},"d":[],"e":false},"o":{"w":"ho","s":"o","c":{"u":{"w":"hours","s":"urs","c":{},"d":[4],"e":true},"s":{"w":"host","s":"st","c":{},"d":[6],"e":true}},"d":[],"e":false}},"d":[6],"e":true},"r":{"w":"r","s":"r","c":{"e":{"w":"re","s":"e","c":{"s":{"w":"res","s":"s","c":{"p":{"w":"response","s":"ponse","c":{"s":{"w":"responses","s":"s","c":{},"d":[1],"e":true},"_":{"w":"response_model","s":"_model","c":{},"d":[1,5],"e":true}},"d":[],"e":false},"u":{"w":"result","s":"ult","c":{"s":{"w":"results","s":"s","c":{},"d":[1,2],"e":true},"_":{"w":"result_image","s":"_image","c":{},"d":[6],"e":true}},"d":[],"e":false},"i":{"w":"resize","s":"ize","c":{},"d":[2],"e":true},"a":{"w":"resampl","s":"ampl","c":{"i":{"w":"resampling","s":"ing","c":{},"d":[2],"e":true},"e":{"w":"resample","s":"e","c":{},"d":[2],"e":true}},"d":[],"e":false},"e":{"w":"reset_ids","s":"et_ids","c":{},"d":[5],"e":true}},"d":[],"e":false},"t":{"w":"return","s":"turn","c":{},"d":[1,2,3,4,5,6],"e":true},"a":{"w":"read","s":"ad","c":{},"d":[1,4,5],"e":true},"q":{"w":"requ","s":"qu","c":{"e":{"w":"request","s":"est","c":{"s":{"w":"requests","s":"s","c":{},"d":[7],"e":true}},"d":[1,2,5,6],"e":true},"i":{"w":"requirements","s":"irements","c":{},"d":[7],"e":true}},"d":[],"e":false},"p":{"w":"replace","s":"place","c":{"m":{"w":"replacement","s":"ment","c":{"1":{"w":"replacement1","s":"1","c":{},"d":[5],"e":true},"2":{"w":"replacement2","s":"2","c":{},"d":[5],"e":true},"3":{"w":"replacement3","s":"3","c":{},"d":[5],"e":true},"_":{"w":"replacement_image","s":"_image","c":{},"d":[6],"e":true}},"d":[6],"e":true},"-":{"w":"replace-text-images","s":"-text-images","c":{},"d":[6],"e":true},"_":{"w":"replace_text_images","s":"_text_images","c":{},"d":[6],"e":true},"r":{"w":"replacer","s":"r","c":{},"d":[6],"e":true},"d":{"w":"replaced","s":"d","c":{},"d":[6],"e":true}},"d":[],"e":false},"v":{"w":"reverse","s":"verse","c":{},"d":[6],"e":true},"l":{"w":"reload","s":"load","c":{},"d":[6],"e":true}},"d":[1,5],"e":true},"o":{"w":"ro","s":"o","c":{"o":{"w":"root","s":"ot","c":{},"d":[1],"e":true},"t":{"w":"rotate","s":"tate","c":{},"d":[2],"e":true}},"d":[],"e":false},"a":{"w":"ra","s":"a","c":{"i":{"w":"raise","s":"ise","c":{},"d":[1,2,4,5,6],"e":true},"d":{"w":"radius","s":"dius","c":{},"d":[2],"e":true}},"d":[],"e":false},"u":{"w":"run","s":"un","c":{"_":{"w":"run_in_executor","s":"_in_executor","c":{},"d":[2,3,4],"e":true}},"d":[6],"e":true},"g":{"w":"rgb","s":"gb","c":{"a":{"w":"rgba","s":"a","c":{},"d":[3],"e":true}},"d":[2,3],"e":true}},"d":[2,5],"e":true},"s":{"w":"s","s":"s","c":{"t":{"w":"st","s":"t","c":{"r":{"w":"str","s":"r","c":{"e":{"w":"streamingresponse","s":"eamingresponse","c":{},"d":[1,4],"e":true},"f":{"w":"strftime","s":"ftime","c":{},"d":[6],"e":true}},"d":[1,2,3,4,5,6],"e":true},"a":{"w":"sta","s":"a","c":{"t":{"w":"stat","s":"t","c":{"i":{"w":"staticfiles","s":"icfiles","c":{},"d":[1],"e":true},"u":{"w":"status","s":"us","c":{"_":{"w":"status_code","s":"_code","c":{},"d":[1,4,5,6],"e":true}},"d":[1,2,4],"e":true}},"d":[4,6],"e":true},"r":{"w":"startswith","s":"rtswith","c":{},"d":[1],"e":true},"n":{"w":"standard","s":"ndard","c":{},"d":[7],"e":true}},"d":[],"e":false},"_":{"w":"st_","s":"_","c":{"m":{"w":"st_mtime","s":"mtime","c":{},"d":[4,6],"e":true},"s":{"w":"st_size","s":"size","c":{},"d":[4,6],"e":true}},"d":[],"e":false},"o":{"w":"storage","s":"orage","c":{"-":{"w":"storage-info","s":"-info","c":{},"d":[4],"e":true}},"d":[4],"e":true},"y":{"w":"style","s":"yle","c":{},"d":[5],"e":true}},"d":[],"e":false},"p":{"w":"sp","s":"p","c":{"l":{"w":"split","s":"lit","c":{},"d":[1,6],"e":true},"e":{"w":"specified","s":"ecified","c":{},"d":[4],"e":true}},"d":[],"e":false},"u":{"w":"su","s":"u","c":{"c":{"w":"success","s":"ccess","c":{"f":{"w":"successfully","s":"fully","c":{},"d":[3,4,5,6],"e":true}},"d":[2],"e":true},"b":{"w":"sub","s":"b","c":{},"d":[5],"e":true}},"d":[],"e":false},"a":{"w":"save","s":"ave","c":{"_":{"w":"save_","s":"_","c":{"f":{"w":"save_format","s":"format","c":{},"d":[2,3],"e":true},"k":{"w":"save_kwargs","s":"kwargs","c":{},"d":[2,3],"e":true},"a":{"w":"save_as_jpg","s":"as_jpg","c":{},"d":[6],"e":true}},"d":[],"e":false},"d":{"w":"saved","s":"d","c":{},"d":[3],"e":true}},"d":[2,3],"e":true},"i":{"w":"si","s":"i","c":{"g":{"w":"sigma","s":"gma","c":{},"d":[2],"e":true},"z":{"w":"size","s":"ze","c":{"_":{"w":"size_","s":"_","c":{"b":{"w":"size_bytes","s":"bytes","c":{},"d":[4,5],"e":true},"n":{"w":"size_names","s":"names","c":{},"d":[4,5],"e":true},"f":{"w":"size_formatted","s":"formatted","c":{},"d":[4,5,6],"e":true}},"d":[],"e":false}},"d":[2,3,4,5,6],"e":true}},"d":[],"e":false},"e":{"w":"se","s":"e","c":{"p":{"w":"sepia","s":"pia","c":{"_":{"w":"sepia_pixels","s":"_pixels","c":{},"d":[2],"e":true}},"d":[2],"e":true},"e":{"w":"seek","s":"ek","c":{},"d":[4],"e":true},"a":{"w":"search","s":"arch","c":{},"d":[5],"e":true}},"d":[],"e":false},"v":{"w":"svg","s":"vg","c":{"g":{"w":"svggeneraterequest","s":"generaterequest","c":{},"d":[4,5],"e":true},"r":{"w":"svgresponse","s":"response","c":{},"d":[4,5],"e":true},"_":{"w":"svg_","s":"_","c":{"c":{"w":"svg_content","s":"content","c":{},"d":[4,5],"e":true},"p":{"w":"svg_path","s":"path","c":{},"d":[5],"e":true}},"d":[],"e":false}},"d":[4,5],"e":true},"o":{"w":"sort","s":"ort","c":{},"d":[6],"e":true},"c":{"w":"sci","s":"ci","c":{"k":{"w":"scikit-image","s":"kit-image","c":{},"d":[7],"e":true},"p":{"w":"scipy","s":"py","c":{},"d":[7],"e":true}},"d":[],"e":false}},"d":[6],"e":true},"p":{"w":"p","s":"p","c":{"y":{"w":"py","s":"y","c":{"d":{"w":"pydantic","s":"dantic","c":{},"d":[1,7],"e":true},"t":{"w":"python-","s":"thon-","c":{"m":{"w":"python-multipart","s":"multipart","c":{},"d":[7],"e":true},"j":{"w":"python-jose","s":"jose","c":{},"d":[7],"e":true}},"d":[],"e":false}},"d":[],"e":false},"i":{"w":"pi","s":"i","c":{"l":{"w":"pil","s":"l","c":{"l":{"w":"pillow","s":"low","c":{},"d":[7],"e":true}},"d":[1,2,3],"e":true},"x":{"w":"pixel","s":"xel","c":{},"d":[2],"e":true}},"d":[],"e":false},"a":{"w":"pa","s":"a","c":{"t":{"w":"pat","s":"t","c":{"h":{"w":"path","s":"h","c":{"l":{"w":"pathlib","s":"lib","c":{},"d":[1],"e":true}},"d":[1,2,3,4,5],"e":true},"t":{"w":"pattern","s":"tern","c":{"1":{"w":"pattern1","s":"1","c":{},"d":[5],"e":true},"2":{"w":"pattern2","s":"2","c":{},"d":[5],"e":true},"3":{"w":"pattern3","s":"3","c":{},"d":[5],"e":true}},"d":[5],"e":true}},"d":[],"e":false},"r":{"w":"parameters","s":"rameters","c":{},"d":[1,2,3],"e":true},"s":{"w":"pass","s":"ss","c":{"l":{"w":"passlib","s":"lib","c":{},"d":[7],"e":true}},"d":[3],"e":true}},"d":[],"e":false},"r":{"w":"pr","s":"r","c":{"o":{"w":"pro","s":"o","c":{"c":{"w":"process","s":"cess","c":{"e":{"w":"processed","s":"ed","c":{"_":{"w":"processed_","s":"_","c":{"d":{"w":"processed_dir","s":"dir","c":{},"d":[1,4,5,6],"e":true},"u":{"w":"processed_url","s":"url","c":{},"d":[1,2,6],"e":true},"f":{"w":"processed_file","s":"file","c":{"n":{"w":"processed_filename","s":"name","c":{},"d":[1,2],"e":true},"s":{"w":"processed_files","s":"s","c":{},"d":[4],"e":true}},"d":[],"e":false},"i":{"w":"processed_image","s":"image","c":{"s":{"w":"processed_images","s":"s","c":{},"d":[4],"e":true}},"d":[3],"e":true},"s":{"w":"processed_size","s":"size","c":{},"d":[4],"e":true},"c":{"w":"processed_count","s":"count","c":{},"d":[4],"e":true},"p":{"w":"processed_path","s":"path","c":{},"d":[6],"e":true}},"d":[1],"e":true}},"d":[1,2,3,4,5,6],"e":true},"b":{"w":"processbatchrequest","s":"batchrequest","c":{},"d":[1],"e":true},"-":{"w":"process-batch","s":"-batch","c":{},"d":[1],"e":true},"_":{"w":"process_","s":"_","c":{"b":{"w":"process_batch_images","s":"batch_images","c":{},"d":[1],"e":true},"m":{"w":"process_multiple_operations_async","s":"multiple_operations_async","c":{},"d":[1,2],"e":true},"s":{"w":"process_sync","s":"sync","c":{},"d":[2,3,4],"e":true},"i":{"w":"process_image_async","s":"image_async","c":{},"d":[3],"e":true}},"d":[],"e":false}},"d":[],"e":false},"f":{"w":"profile","s":"file","c":{},"d":[3],"e":true}},"d":[],"e":false},"i":{"w":"print","s":"int","c":{},"d":[2,3,5],"e":true},"e":{"w":"pre","s":"e","c":{"s":{"w":"preserv","s":"serv","c":{"e":{"w":"preserve","s":"e","c":{"_":{"w":"preserve_image_metadata_and_save","s":"_image_metadata_and_save","c":{},"d":[2,3],"e":true}},"d":[3],"e":true},"a":{"w":"preservation","s":"ation","c":{},"d":[3],"e":true}},"d":[],"e":false},"f":{"w":"prefecture","s":"fecture","c":{"s":{"w":"prefectures","s":"s","c":{},"d":[5],"e":true},"_":{"w":"prefecture_id","s":"_id","c":{"s":{"w":"prefecture_ids","s":"s","c":{},"d":[5],"e":true}},"d":[5],"e":true}},"d":[4,5],"e":true}},"d":[],"e":false}},"d":[],"e":false},"o":{"w":"po","s":"o","c":{"s":{"w":"post","s":"st","c":{},"d":[1,4,5,6],"e":true},"r":{"w":"port","s":"rt","c":{},"d":[6],"e":true}},"d":[],"e":false},"l":{"w":"please","s":"lease","c":{},"d":[1],"e":true},"n":{"w":"png","s":"ng","c":{"'":{"w":"png'","s":"'","c":{},"d":[2,3],"e":true}},"d":[1,4],"e":true},"u":{"w":"putdata","s":"utdata","c":{},"d":[2],"e":true}},"d":[],"e":false},"d":{"w":"d","s":"d","c":{"i":{"w":"di","s":"i","c":{"c":{"w":"dict","s":"ct","c":{},"d":[1,2,3,6],"e":true},"r":{"w":"directory","s":"rectory","c":{},"d":[1],"e":true}},"d":[],"e":false},"e":{"w":"de","s":"e","c":{"f":{"w":"def","s":"f","c":{},"d":[1,2,3,4,5,6],"e":true},"t":{"w":"detail","s":"tail","c":{},"d":[1,4,5,6],"e":true},"l":{"w":"delete","s":"lete","c":{"d":{"w":"deleted","s":"d","c":{"_":{"w":"deleted_","s":"_","c":{"u":{"w":"deleted_uploads","s":"uploads","c":{},"d":[4],"e":true},"p":{"w":"deleted_processed","s":"processed","c":{},"d":[4],"e":true}},"d":[],"e":false}},"d":[6],"e":true},"_":{"w":"delete_file","s":"_file","c":{},"d":[6],"e":true}},"d":[4,6],"e":true}},"d":[],"e":false},"p":{"w":"dpi","s":"pi","c":{"_":{"w":"dpi_value","s":"_value","c":{},"d":[2],"e":true}},"d":[2,3],"e":true},"o":{"w":"download","s":"ownload","c":{"-":{"w":"download-batch","s":"-batch","c":{},"d":[4],"e":true},"_":{"w":"download_batch_images","s":"_batch_images","c":{},"d":[4],"e":true}},"d":[],"e":false},"a":{"w":"datetime","s":"atetime","c":{},"d":[4,5,6],"e":true}},"d":[6],"e":true},"a":{"w":"a","s":"a","c":{"n":{"w":"an","s":"n","c":{"y":{"w":"any","s":"y","c":{},"d":[1],"e":true},"d":{"w":"and","s":"d","c":{},"d":[2,3,4,5,6],"e":true},"g":{"w":"angle","s":"gle","c":{},"d":[2],"e":true}},"d":[1],"e":true},"s":{"w":"as","s":"s","c":{"y":{"w":"async","s":"ync","c":{"i":{"w":"asyncio","s":"io","c":{},"d":[1,2,3,4],"e":true}},"d":[1,2,3,4,5,6],"e":true},"s":{"w":"assets","s":"sets","c":{},"d":[5],"e":true}},"d":[1,2,3,4,5,6],"e":true},"i":{"w":"aiofiles","s":"iofiles","c":{},"d":[1,7],"e":true},"p":{"w":"ap","s":"p","c":{"p":{"w":"app","s":"p","c":{"e":{"w":"append","s":"end","c":{},"d":[1,2,6],"e":true},"l":{"w":"appl","s":"l","c":{"y":{"w":"apply_pil_operation","s":"y_pil_operation","c":{},"d":[2,3],"e":true},"i":{"w":"application","s":"ication","c":{},"d":[4],"e":true}},"d":[],"e":false},"r":{"w":"approach","s":"roach","c":{},"d":[6],"e":true}},"d":[1,4,5,6],"e":true},"i":{"w":"api","s":"i","c":{"_":{"w":"api_name","s":"_name","c":{},"d":[4],"e":true}},"d":[1,4,5,6],"e":true}},"d":[],"e":false},"d":{"w":"add","s":"dd","c":{"_":{"w":"add_middleware","s":"_middleware","c":{},"d":[1],"e":true},"e":{"w":"added","s":"ed","c":{},"d":[5],"e":true}},"d":[],"e":false},"l":{"w":"al","s":"l","c":{"l":{"w":"allow_","s":"low_","c":{"o":{"w":"allow_origins","s":"origins","c":{},"d":[1],"e":true},"c":{"w":"allow_credentials","s":"credentials","c":{},"d":[1],"e":true},"m":{"w":"allow_methods","s":"methods","c":{},"d":[1],"e":true},"h":{"w":"allow_headers","s":"headers","c":{},"d":[1],"e":true}},"d":[],"e":false},"p":{"w":"alpha","s":"pha","c":{"_":{"w":"alpha_composite","s":"_composite","c":{},"d":[3],"e":true}},"d":[2,3],"e":true}},"d":[],"e":false},"w":{"w":"await","s":"wait","c":{},"d":[1,2,3,4],"e":true},"t":{"w":"att","s":"tt","c":{"a":{"w":"attachment","s":"achment","c":{},"d":[4],"e":true},"r":{"w":"attribute","s":"ribute","c":{},"d":[5],"e":true}},"d":[],"e":false}},"d":[],"e":false},"o":{"w":"o","s":"o","c":{"p":{"w":"op","s":"p","c":{"t":{"w":"opti","s":"ti","c":{"o":{"w":"optional","s":"onal","c":{},"d":[1,6],"e":true},"m":{"w":"optimize","s":"mize","c":{},"d":[3],"e":true}},"d":[],"e":false},"e":{"w":"ope","s":"e","c":{"r":{"w":"operation","s":"ration","c":{"r":{"w":"operationrequest","s":"request","c":{},"d":[1,2],"e":true},"s":{"w":"operations","s":"s","c":{},"d":[1,2],"e":true},"_":{"w":"operation_params","s":"_params","c":{},"d":[2],"e":true}},"d":[1,2,3],"e":true},"n":{"w":"open","s":"n","c":{},"d":[1,2,3,5,6],"e":true}},"d":[],"e":false},"a":{"w":"opacity","s":"acity","c":{},"d":[2,3],"e":true}},"d":[],"e":false},"s":{"w":"os","s":"s","c":{},"d":[1,4,5],"e":true},"r":{"w":"or","s":"r","c":{"i":{"w":"original","s":"iginal","c":{"_":{"w":"original_","s":"_","c":{"u":{"w":"original_url","s":"url","c":{},"d":[1,2],"e":true},"f":{"w":"original_filename","s":"filename","c":{},"d":[1,2],"e":true},"e":{"w":"original_extension","s":"extension","c":{},"d":[1],"e":true},"i":{"w":"original_image","s":"image","c":{},"d":[2,3],"e":true},"p":{"w":"original_path","s":"path","c":{},"d":[3],"e":true}},"d":[],"e":false}},"d":[1,3],"e":true}},"d":[1],"e":true},"u":{"w":"output_","s":"utput_","c":{"f":{"w":"output_f","s":"f","c":{"o":{"w":"output_format","s":"ormat","c":{},"d":[1],"e":true},"i":{"w":"output_filename","s":"ilename","c":{},"d":[1,2,6],"e":true}},"d":[],"e":false},"e":{"w":"output_extension","s":"extension","c":{},"d":[1,2,3],"e":true},"p":{"w":"output_path","s":"path","c":{},"d":[1,2,3,5,6],"e":true}},"d":[],"e":false},"n":{"w":"only","s":"nly","c":{},"d":[1],"e":true},"v":{"w":"overlay","s":"verlay","c":{"_":{"w":"overlay_with_alpha","s":"_with_alpha","c":{},"d":[2,3],"e":true}},"d":[2],"e":true},"l":{"w":"old","s":"ld","c":{"e":{"w":"older","s":"er","c":{},"d":[4],"e":true}},"d":[4],"e":true}},"d":[],"e":false},"l":{"w":"l","s":"l","c":{"i":{"w":"list","s":"ist","c":{},"d":[1,2,4,5,6],"e":true},"o":{"w":"lo","s":"o","c":{"w":{"w":"lower","s":"wer","c":{},"d":[1,2,3],"e":true},"o":{"w":"loop","s":"op","c":{},"d":[2,3,4],"e":true},"c":{"w":"locations","s":"cations","c":{},"d":[6],"e":true}},"d":[],"e":false},"a":{"w":"la","s":"a","c":{"n":{"w":"lanczos","s":"nczos","c":{},"d":[2],"e":true},"m":{"w":"lambda","s":"mbda","c":{},"d":[6],"e":true},"y":{"w":"layout","s":"yout","c":{"_":{"w":"layout_image","s":"_image","c":{},"d":[6],"e":true}},"d":[6],"e":true}},"d":[],"e":false},"e":{"w":"len","s":"en","c":{},"d":[4,5,6],"e":true}},"d":[2],"e":true},"z":{"w":"zip","s":"zip","c":{"f":{"w":"zipfile","s":"file","c":{},"d":[1,4],"e":true},"_":{"w":"zip_","s":"_","c":{"b":{"w":"zip_buffer","s":"buffer","c":{},"d":[4],"e":true},"d":{"w":"zip_deflated","s":"deflated","c":{},"d":[4],"e":true},"f":{"w":"zip_file","s":"file","c":{},"d":[4],"e":true}},"d":[],"e":false}},"d":[4],"e":true},"x":{"w":"x","s":"x","c":{"m":{"w":"xml","s":"ml","c":{},"d":[1,5],"e":true}},"d":[6],"e":true},"e":{"w":"e","s":"e","c":{"t":{"w":"et","s":"t","c":{"r":{"w":"etree","s":"ree","c":{},"d":[1],"e":true}},"d":[1],"e":true},"l":{"w":"el","s":"l","c":{"e":{"w":"elementtree","s":"ementtree","c":{},"d":[1],"e":true},"s":{"w":"else","s":"se","c":{},"d":[1,2,3,5],"e":true},"i":{"w":"elif","s":"if","c":{},"d":[1,2,3,5,6],"e":true}},"d":[],"e":false},"d":{"w":"editor","s":"ditor","c":{},"d":[1,4],"e":true},"x":{"w":"ex","s":"x","c":{"i":{"w":"exi","s":"i","c":{"s":{"w":"exist","s":"st","c":{"_":{"w":"exist_ok","s":"_ok","c":{},"d":[1],"e":true},"s":{"w":"exists","s":"s","c":{},"d":[1,4,5,6],"e":true},"i":{"w":"existing","s":"ing","c":{},"d":[5],"e":true}},"d":[],"e":false},"f":{"w":"exif","s":"f","c":{},"d":[2,3],"e":true}},"d":[],"e":false},"c":{"w":"except","s":"cept","c":{"i":{"w":"exception","s":"ion","c":{},"d":[2,3,4,5,6],"e":true}},"d":[2,3,4,5,6],"e":true},"p":{"w":"expand","s":"pand","c":{},"d":[2],"e":true}},"d":[],"e":false},"r":{"w":"error","s":"rror","c":{"_":{"w":"error_message","s":"_message","c":{},"d":[1,2],"e":true}},"d":[1,2,5],"e":true},"n":{"w":"en","s":"n","c":{"a":{"w":"enablecrop","s":"ablecrop","c":{},"d":[1,2],"e":true},"d":{"w":"endswith","s":"dswith","c":{},"d":[2,3],"e":true},"c":{"w":"encoding","s":"coding","c":{},"d":[5],"e":true}},"d":[],"e":false}},"d":[2,3,4,5,6],"e":true},"v":{"w":"v","s":"v","c":{"e":{"w":"version","s":"ersion","c":{},"d":[1,4],"e":true},"a":{"w":"val","s":"al","c":{"u":{"w":"valueerror","s":"ueerror","c":{},"d":[2],"e":true},"i":{"w":"valid","s":"id","c":{},"d":[6],"e":true}},"d":[],"e":false}},"d":[],"e":false},"g":{"w":"g","s":"g","c":{"e":{"w":"ge","s":"e","c":{"t":{"w":"get","s":"t","c":{"e":{"w":"getexif","s":"exif","c":{},"d":[2,3],"e":true},"_":{"w":"get_","s":"_","c":{"e":{"w":"get_event_loop","s":"event_loop","c":{},"d":[2,3,4],"e":true},"i":{"w":"get_image","s":"image","c":{},"d":[4],"e":true},"u":{"w":"get_uploaded_image","s":"uploaded_image","c":{},"d":[4],"e":true},"s":{"w":"get_s","s":"s","c":{"t":{"w":"get_storage_info","s":"torage_info","c":{},"d":[4],"e":true},"v":{"w":"get_svg","s":"vg","c":{},"d":[5],"e":true}},"d":[],"e":false},"d":{"w":"get_directory_size","s":"directory_size","c":{},"d":[4],"e":true},"p":{"w":"get_prefectures","s":"prefectures","c":{},"d":[5],"e":true},"f":{"w":"get_file_","s":"file_","c":{"l":{"w":"get_file_list","s":"list","c":{},"d":[5],"e":true},"i":{"w":"get_file_info","s":"info","c":{},"d":[6],"e":true}},"d":[],"e":false},"t":{"w":"get_template_config","s":"template_config","c":{},"d":[6],"e":true}},"d":[],"e":false},"d":{"w":"getdata","s":"data","c":{},"d":[2],"e":true}},"d":[1,2,3,4,5,6],"e":true},"n":{"w":"generat","s":"nerat","c":{"e":{"w":"generate","s":"e","c":{"-":{"w":"generate-svg","s":"-svg","c":{},"d":[5],"e":true},"_":{"w":"generate_svg","s":"_svg","c":{},"d":[5],"e":true},"d":{"w":"generated","s":"d","c":{},"d":[5],"e":true}},"d":[],"e":false},"i":{"w":"generation","s":"ion","c":{},"d":[5],"e":true}},"d":[],"e":false}},"d":[],"e":false},"a":{"w":"gaussianblur","s":"aussianblur","c":{},"d":[2],"e":true},"r":{"w":"grayscale","s":"rayscale","c":{},"d":[2],"e":true},"l":{"w":"glob","s":"lob","c":{},"d":[4,6],"e":true},"b":{"w":"gb","s":"b","c":{},"d":[4,5],"e":true}},"d":[2],"e":true},"-":{"w":"-","s":"-","c":{"1":{"w":"-1","s":"1","c":{},"d":[1,6],"e":true},"2":{"w":"-2","s":"2","c":{},"d":[5],"e":true}},"d":[2,4,5,6],"e":true},"j":{"w":"j","s":"j","c":{"p":{"w":"jp","s":"p","c":{"g":{"w":"jpg","s":"g","c":{"'":{"w":"jpg'","s":"'","c":{},"d":[2,3],"e":true}},"d":[1,6],"e":true},"e":{"w":"jpeg'","s":"eg'","c":{},"d":[2,3],"e":true}},"d":[],"e":false},"a":{"w":"japan_map_","s":"apan_map_","c":{},"d":[5],"e":true}},"d":[],"e":false},"w":{"w":"w","s":"w","c":{"i":{"w":"wi","s":"i","c":{"t":{"w":"with","s":"th","c":{},"d":[1,2,3,4,5,6],"e":true},"d":{"w":"width","s":"dth","c":{},"d":[2],"e":true}},"d":[],"e":false},"b":{"w":"wb","s":"b","c":{},"d":[1],"e":true},"r":{"w":"write","s":"rite","c":{},"d":[1,4,5],"e":true},"e":{"w":"webp","s":"ebp","c":{"'":{"w":"webp'","s":"'","c":{},"d":[2,3],"e":true}},"d":[1],"e":true},"a":{"w":"warning","s":"arning","c":{},"d":[2,3,5],"e":true},"h":{"w":"while","s":"hile","c":{},"d":[4,5],"e":true}},"d":[4,5],"e":true},"'":{"w":"'","s":"'","c":{"i":{"w":"'icc_profile'","s":"icc_profile'","c":{},"d":[2,3],"e":true},"p":{"w":"'png'","s":"png'","c":{},"d":[2,3],"e":true},"j":{"w":"'jpeg'","s":"jpeg'","c":{},"d":[2,3],"e":true},"w":{"w":"'webp'","s":"webp'","c":{},"d":[2,3],"e":true},"f":{"w":"'format'","s":"format'","c":{},"d":[2,3],"e":true},"d":{"w":"'dpi'","s":"dpi'","c":{},"d":[2,3],"e":true},"o":{"w":"'optimize'","s":"optimize'","c":{},"d":[2,3],"e":true},"q":{"w":"'quality'","s":"quality'","c":{},"d":[2,3],"e":true},"c":{"w":"'compress_level'","s":"compress_level'","c":{},"d":[2,3],"e":true},"e":{"w":"'exif'","s":"exif'","c":{},"d":[2,3],"e":true},"l":{"w":"'l'","s":"l'","c":{},"d":[2],"e":true},"r":{"w":"'rgb","s":"rgb","c":{"'":{"w":"'rgb'","s":"'","c":{},"d":[2,3],"e":true},"a":{"w":"'rgba'","s":"a'","c":{},"d":[2,3],"e":true}},"d":[],"e":false}},"d":[2,3,5],"e":true},"q":{"w":"quality","s":"quality","c":{},"d":[3],"e":true},"k":{"w":"k","s":"k","c":{"b":{"w":"kb","s":"b","c":{},"d":[4,5],"e":true},"e":{"w":"key","s":"ey","c":{},"d":[6],"e":true}},"d":[],"e":false},"_":{"w":"_","s":"_","c":{"_":{"w":"__","s":"_","c":{"n":{"w":"__name__","s":"name__","c":{},"d":[6],"e":true},"m":{"w":"__main__","s":"main__","c":{},"d":[6],"e":true}},"d":[],"e":false}},"d":[5],"e":true},"y":{"w":"y-","s":"y-","c":{},"d":[6],"e":true}},"d":[],"e":false},"isArray":false},"embeddingModel":{"type":"Radix","node":{"w":"","s":"","c":{"c":{"w":"copilot-plus-small","s":"copilot-plus-small","c":{},"d":[1,2,3,4,5,6,7],"e":true}},"d":[],"e":false},"isArray":false},"created_at":{"type":"AVL","node":{"root":{"k":1753978175875,"v":[3],"l":{"k":1753978175868,"v":[1],"l":{"k":0,"v":[],"l":null,"r":null,"h":0},"r":{"k":1753978175873,"v":[2],"l":null,"r":null,"h":0},"h":1},"r":{"k":1753978175878,"v":[5],"l":{"k":1753978175877,"v":[4],"l":null,"r":null,"h":0},"r":{"k":1753978175880,"v":[6],"l":null,"r":{"k":1753978175881,"v":[7],"l":null,"r":null,"h":0},"h":1},"h":2},"h":3}},"isArray":false},"ctime":{"type":"AVL","node":{"root":{"k":1753978047914,"v":[7],"l":{"k":0,"v":[],"l":null,"r":null,"h":0},"r":{"k":1753978047916,"v":[1,2,3,4,5,6],"l":null,"r":null,"h":0},"h":1}},"isArray":false},"mtime":{"type":"AVL","node":{"root":{"k":1753978126206,"v":[1,2,3,4,5,6],"l":{"k":0,"v":[],"l":null,"r":null,"h":0},"r":{"k":1753978161082,"v":[7],"l":null,"r":null,"h":0},"h":1}},"isArray":false},"tags":{"type":"Radix","node":{"w":"","s":"","c":{},"d":[],"e":false},"isArray":true},"extension":{"type":"Radix","node":{"w":"","s":"","c":{"m":{"w":"md","s":"md","c":{},"d":[1,2,3,4,5,6,7],"e":true}},"d":[],"e":false},"isArray":false}},"vectorIndexes":{"embedding":{"size":256,"vectors":{"00f7a17a58ce641031276f183b3a5f2f":[1.0000000156959907,[-0.04144112020730972,0.02164742536842823,-0.0900232195854187,0.02536611817777157,0.03147858753800392,-0.020028743892908096,-0.05263997241854668,-0.03802356868982315,0.04828254133462906,0.1269012689590454,0.062347687780857086,0.07878003269433975,0.04667603597044945,-0.1514611542224884,0.03442863002419472,0.056906457990407944,0.06570126861333847,-0.054087188094854355,0.03750431537628174,0.05220719426870346,0.006970169022679329,-0.07682934403419495,-0.07124363631010056,-0.018201831728219986,0.08897025883197784,-0.008832167834043503,-0.033613353967666626,-0.1042126715183258,0.04572509974241257,0.08014608919620514,-0.08263377100229263,-0.10969675332307816,-0.06022018566727638,0.027548840269446373,-0.01901984214782715,0.09691793471574783,0.11351055651903152,0.07948806136846542,0.11998167634010315,-0.08882418274879456,-0.1262664496898651,0.08186095207929611,-0.020711064338684082,-0.039680108428001404,0.0884576067328453,-0.020655622705817223,-0.042637426406145096,0.0426170788705349,-0.0004193460044916719,-0.030670803040266037,-0.08693245053291321,0.04910967871546745,-0.07144708931446075,0.0954165905714035,0.02731776423752308,0.021065589040517807,0.02658814750611782,0.04023356735706329,0.09406668692827225,0.05011175572872162,-0.07478179037570953,0.016748275607824326,-0.017917949706315994,0.0762457400560379,0.0017429320141673088,0.06000823527574539,-0.00015242600056808442,0.04365120083093643,0.04912528023123741,0.00661057885736227,-0.03701072558760643,0.01246784720569849,0.04934259504079819,0.012311922386288643,-0.003995859995484352,0.11034993827342987,0.07682796567678452,-0.014031912200152874,-0.03602991998195648,-0.10056902468204498,-0.11795675754547119,0.0042208521626889706,0.02628415822982788,-0.06041244789958,-0.01136929914355278,-0.022136200219392776,0.02399817295372486,-0.025845225900411606,0.055941686034202576,-0.05755231902003288,0.01777135394513607,0.053938329219818115,-0.017342286184430122,-0.12846414744853973,0.020109839737415314,0.043871600180864334,0.010649249888956547,0.002348576905205846,0.019793730229139328,-0.010694737546145916,0.0627189427614212,0.05725334584712982,-0.06504729390144348,0.02214530110359192,0.017539428547024727,-0.05794032663106918,0.05139540135860443,0.03111329860985279,0.09752126038074493,0.024020029231905937,0.15830926597118378,0.032648082822561264,-0.15311299264431,-0.03698132559657097,0.002022786997258663,0.016926534473896027,-0.000008156000149028841,0.020739153027534485,-0.004917795769870281,-0.04864911362528801,-0.020436106249690056,-0.034554917365312576,-0.06520400196313858,0.053315553814172745,-0.17100486159324646,-0.0045981151051819324,-0.12693199515342712,0.11132848262786865,0.008244338445365429,0.028567424044013023,0.010808774270117283,0.001765741966664791,0.011893435381352901,0.033018480986356735,0.00480716722086072,0.05534394830465317,0.028370734304189682,0.005971734877675772,0.01411344576627016,-0.052804265171289444,-0.03961573541164398,0.05780603364109993,0.03590363636612892,0.0015575570287182927,0.13475880026817322,0.0775328278541565,0.07461748272180557,-0.028529712930321693,0.07577584683895111,-0.08793295174837112,0.015525843016803265,0.09146099537611008,0.030039753764867783,-0.04550883173942566,-0.07680555433034897,0.03909654915332794,0.013308189809322357,-0.09813906997442245,-0.10693459212779999,0.04903986304998398,0.029852967709302902,0.040505461394786835,0.012510979548096657,-0.06903501600027084,0.028902852907776833,-0.015302930027246475,-0.05622333660721779,-0.04326681047677994,-0.02635282836854458,0.05258671194314957,-0.02751093916594982,-0.0609736293554306,-0.0370258130133152,0.07298678159713745,-0.13385072350502014,-0.033699389547109604,0.12029942870140076,0.059151843190193176,-0.04031806066632271,-0.0670124813914299,0.03436153009533882,-0.10492502897977829,0.08932669460773468,0.09039727598428726,0.059362828731536865,0.05819316580891609,-0.050351981073617935,-0.04059356078505516,-0.03231961280107498,0.19529321789741516,0.00860485527664423,0.024027204141020775,-0.040775638073682785,0.03067890554666519,0.03842568397521973,-0.06338038295507431,0.16225479543209076,0.016049163416028023,-0.07858698070049286,-0.008414918556809425,0.17528371512889862,-0.08420708030462265,0.048711147159338,-0.020450135692954063,0.05557899922132492,0.03947635367512703,0.06426379829645157,-0.08047293871641159,-0.009044651873409748,-0.07087398320436478,0.04656633362174034,-0.01715688779950142,0.0927116647362709,-0.042642973363399506,0.06064673885703087,-0.0826805979013443,0.014880063943564892,-0.00923012476414442,-0.03581088408827782,0.053196996450424194,-0.0014115229714661837,-0.0008474990027025342,-0.028132475912570953,0.021685920655727386,-0.01807500794529915,0.016673721373081207,-0.014221756719052792,0.015205420553684235,0.020080585032701492,-0.014670968055725098,-0.02820165827870369,-0.05836509168148041,-0.023107051849365234,-0.017585022374987602,-0.025498446077108383,0.05276874080300331,-0.08522861450910568,-0.0030205040238797665,-0.02448302134871483,0.006742504891008139,-0.0906553864479065,-0.013292068615555763,-0.01801559142768383,-0.07392971217632294,0.031441979110240936,0.18125027418136597,0.045809321105480194,-0.016288241371512413,0.08612500131130219,-0.06959518790245056,-0.005070230923593044,-0.006995243951678276,0.06272917240858078,-0.00630074180662632,-0.039578307420015335,-0.006826847791671753]],"e0da47551e90934057bad285d1ba8181":[1.0000000199404477,[-0.045819446444511414,0.04237530753016472,-0.04516153782606125,0.029083607718348503,0.03403988853096962,-0.03880354017019272,-0.055486053228378296,-0.02243163250386715,0.027734745293855667,0.10073046386241913,0.12073835730552673,0.031718697398900986,0.05373171716928482,-0.11689472198486328,-0.012277905829250813,0.04699809104204178,0.11914543062448502,-0.0602785162627697,0.006369993090629578,0.04265245050191879,0.028593843802809715,-0.019875597208738327,-0.05529845133423805,-0.007060634903609753,0.03367152437567711,-0.04257163777947426,-0.007202437147498131,-0.11166194826364517,0.0869351327419281,0.04238584637641907,-0.12058471143245697,-0.08046432584524155,-0.07599952816963196,-0.02342689037322998,-0.021575165912508965,0.16382230818271637,0.09921079128980637,0.13526523113250732,0.09092462807893753,-0.0835745632648468,-0.08123969286680222,0.10172314941883087,0.007528569083660841,-0.02185991406440735,0.0759408250451088,-0.0770416110754013,-0.003496723948046565,0.003228340996429324,0.015849148854613304,-0.07811309397220612,-0.019530314952135086,0.03571000695228577,-0.042936526238918304,0.03823656216263771,-0.021016526967287064,0.0166834257543087,0.0011439210502430797,0.017559466883540154,0.102745421230793,0.025606008246541023,-0.05253366008400917,-0.01626337133347988,0.00034854799741879106,0.08743754029273987,0.005207487847656012,0.054063983261585236,0.013806427828967571,0.0018142350018024445,-0.030469469726085663,-0.010154400020837784,-0.019913706928491592,0.08207426965236664,0.06531824171543121,0.0651642233133316,0.030614541843533516,0.11156948655843735,0.07590056955814362,-0.02465919591486454,0.01896839588880539,-0.0887487530708313,-0.1254737228155136,0.0021500030998140574,-0.019765129312872887,-0.015122504904866219,-0.05309784784913063,0.020258259028196335,-0.04478219151496887,-0.0808708444237709,0.06268615275621414,-0.0770341157913208,0.04466169700026512,0.03912051394581795,-0.049392253160476685,-0.09518738836050034,0.04941893741488457,0.025529995560646057,0.05267208814620972,-0.004965999163687229,0.022929366677999496,-0.033645108342170715,0.02278638817369938,0.017856216058135033,-0.03771795704960823,-0.011339271441102028,0.014878855086863041,-0.07709074020385742,0.0874287560582161,-0.01633063331246376,0.10896304249763489,-0.003101675072684884,0.09623297303915024,0.0759686604142189,-0.11802645027637482,-0.002414667047560215,-0.042113855481147766,-0.011591079644858837,0.007374342065304518,-0.008627614937722683,-0.01436251774430275,-0.0824432447552681,-0.02056034654378891,-0.06262439489364624,-0.07396677136421204,0.12071866542100906,-0.17966914176940918,-0.006465054117143154,-0.07197143137454987,0.040435221046209335,0.011458913795650005,0.0025402288883924484,-0.0349237285554409,0.008210965432226658,-0.038414087146520615,0.0766926184296608,-0.012567455880343914,0.03636756166815758,-0.0012002460425719619,0.014919696375727654,-0.06788555532693863,-0.018797382712364197,-0.04532678425312042,-0.017986783757805824,0.058845166116952896,-0.010232546366751194,0.15031613409519196,0.1127554401755333,0.0623326301574707,-0.041108932346105576,0.09121400862932205,-0.06671280413866043,-0.0008493930217809975,0.05246744304895401,0.029012532904744148,0.003927093930542469,-0.1103677824139595,0.06522884219884872,-0.03852573409676552,-0.07271350920200348,-0.07177646458148956,0.03143066167831421,-0.00409325398504734,-0.033078089356422424,0.02167895808815956,-0.047802094370126724,0.03196314722299576,0.03235222399234772,-0.06221994757652283,-0.03054669313132763,0.019976362586021423,0.014994902536273003,-0.09772742539644241,-0.03273540362715721,-0.10952583700418472,0.032575663179159164,-0.12562377750873566,-0.00601548608392477,0.06844256818294525,0.12217126786708832,-0.1074238196015358,-0.03756282851099968,0.027932241559028625,-0.07696869224309921,0.08754988759756088,0.0984402447938919,0.018881728872656822,0.05577849969267845,-0.011804916895925999,-0.04284738376736641,0.010189307853579521,0.1949871927499771,-0.05778160318732262,-0.0027507490012794733,-0.0017948290333151817,0.05662868544459343,0.008078357204794884,-0.054117992520332336,0.18082813918590546,0.0055376398377120495,-0.013478902168571949,0.03198099508881569,0.11825685948133469,-0.0670187771320343,0.05833665654063225,-0.014820794574916363,0.030808331444859505,0.07299725711345673,0.08622284978628159,-0.06407858431339264,-0.006164245773106813,-0.04806623235344887,0.053338292986154556,-0.027813175693154335,0.1137658879160881,-0.01031515933573246,0.02954273112118244,-0.05027705058455467,0.12469441443681717,0.012612340040504932,-0.040589116513729095,0.08985334634780884,-0.01752851903438568,-0.06359430402517319,-0.04478989169001579,0.013541446067392826,0.017174331471323967,0.010537153109908104,-0.027654314413666725,0.0367542989552021,0.020893331617116928,-0.07084999233484268,-0.01865336298942566,-0.03777635097503662,-0.0003874239919241518,0.03370054438710213,0.022399703040719032,0.021223988384008408,-0.05464749038219452,-0.057144876569509506,0.005821985192596912,-0.01146808359771967,-0.06722261011600494,-0.06571612507104874,-0.04125580936670303,-0.09572796523571014,0.0366753451526165,0.15794329345226288,0.03712876886129379,-0.03900647163391113,0.06415368616580963,-0.1294948011636734,-0.02112254686653614,-0.03444952517747879,0.05334563925862312,-0.05119556188583374,-0.03095909394323826,0.007199928164482117]],"69a44dc01c5ffd62a5b69fd0397f869f":[1.0000000266300333,[-0.06322678178548813,0.06849992275238037,-0.021274318918585777,0.004282081034034491,0.04385395348072052,-0.03813712298870087,-0.038257256150245667,-0.018580181524157524,0.013812854886054993,0.09262992441654205,0.11126124858856201,0.05738192796707153,0.06821612268686295,-0.13255387544631958,0.005285921040922403,0.05182486027479172,0.10674573481082916,-0.035992104560136795,0.0125892860814929,0.04008498415350914,0.02899574488401413,-0.03872164711356163,-0.08120235055685043,-0.026276148855686188,-0.0011146949836984277,-0.03867499157786369,-0.01502093207091093,-0.09625930339097977,0.07717908918857574,0.0785866528749466,-0.15480655431747437,-0.08813787996768951,-0.0462297722697258,-0.056302499026060104,0.010321507230401039,0.13820475339889526,0.10823214799165726,0.12656408548355103,0.05192925035953522,-0.07702698558568954,-0.0749889686703682,0.058689698576927185,0.015590126626193523,-0.026419006288051605,0.06355886906385422,-0.07596990466117859,0.005310697015374899,0.030375590547919273,-0.02020561881363392,-0.11085405945777893,-0.0004134580085519701,0.043569084256887436,-0.026582414284348488,0.0462433397769928,-0.020284896716475487,-0.0016383089823648334,0.004357986152172089,0.0001906529942061752,0.09561040997505188,0.05446276441216469,-0.03740319982171059,-0.023825552314519882,-0.0029881650116294622,0.08547893911600113,-0.023049121722579002,0.045167747884988785,0.0020480589009821415,-0.02590775489807129,-0.029324308037757874,-0.02017955482006073,-0.019599448889493942,0.07791367173194885,0.0848919004201889,0.038254059851169586,-0.012826241552829742,0.09030599892139435,0.05653006583452225,-0.020018938928842545,0.020336603745818138,-0.0646662712097168,-0.1063828244805336,0.022168675437569618,-0.05546153709292412,-0.0025196680799126625,-0.045540597289800644,0.030785363167524338,-0.013493440113961697,-0.08010152727365494,0.04240255802869797,-0.06305044144392014,0.03207046911120415,0.032857250422239304,-0.07810162752866745,-0.10668859630823135,0.06353512406349182,0.025578822940587997,0.05406232923269272,-0.030398601666092873,0.03241753578186035,-0.04144905507564545,-0.027168789878487587,-0.0016686460003256798,-0.041147734969854355,-0.030590597540140152,-0.0231330469250679,-0.0744699016213417,0.10305596888065338,0.002730506006628275,0.11136225610971451,-0.04463212564587593,0.0959845706820488,0.06434507668018341,-0.1313643902540207,-0.018639106303453445,-0.044010620564222336,0.01747949793934822,0.02964872308075428,-0.03183302655816078,-0.0030977590940892696,-0.02537289634346962,-0.039470259100198746,-0.05919806659221649,-0.10136110335588455,0.14748114347457886,-0.17431019246578217,-0.010690856724977493,-0.08328955620527267,0.04348459094762802,-0.012719695456326008,0.0022447730880230665,-0.0217293631285429,0.002614503027871251,0.0020293239504098892,0.07406965643167496,0.008677426725625992,0.029127418994903564,-0.0035151189658790827,0.0026936910580843687,-0.07168354839086533,-0.030091647058725357,-0.046143416315317154,-0.012202875688672066,0.05486293137073517,0.012951403856277466,0.13740167021751404,0.13821111619472504,0.08249668776988983,-0.0772213265299797,0.09639464318752289,-0.06418849527835846,0.012764639221131802,0.038921698927879333,0.02767304703593254,-0.0026697260327637196,-0.12275556474924088,0.04594755172729492,-0.03376796841621399,-0.1004556342959404,-0.06924575567245483,0.03782081976532936,0.036750324070453644,-0.05456086993217468,-0.004611726850271225,-0.03233180195093155,0.037480831146240234,0.03482605889439583,-0.04968491941690445,-0.05300542712211609,0.02843211404979229,0.020827805623412132,-0.0907418429851532,0.005946062039583921,-0.13291214406490326,0.04649273306131363,-0.08515192568302155,-0.033461444079875946,0.08476894348859787,0.10784862190485,-0.11968721449375153,-0.03409766033291817,0.0034571480937302113,-0.0539964884519577,0.09145668894052505,0.07796449214220047,0.013817258179187775,0.0334719717502594,-0.013985270634293556,-0.06618648022413254,0.020050009712576866,0.21033507585525513,-0.005972309969365597,-0.00642564008012414,0.009843524545431137,0.04744422435760498,0.015033652074635029,-0.0887477695941925,0.16491065919399261,0.015193510800600052,0.013845072127878666,0.0423368401825428,0.08496873080730438,-0.09224807471036911,0.06923749297857285,-0.014445744454860687,0.017195073887705803,0.08042169362306595,0.03341903164982796,-0.09156515449285507,-0.05562189221382141,-0.060135602951049805,0.04260745644569397,-0.017395297065377235,0.08644567430019379,-0.014550473541021347,0.0037551571149379015,-0.04075782001018524,0.11966797709465027,-0.010467741638422012,-0.07048919051885605,0.07621005177497864,-0.021111415699124336,-0.06499655544757843,-0.020553000271320343,-0.0026116189546883106,0.0036204559728503227,-0.008807571604847908,-0.021477671340107918,0.018625058233737946,-0.023476388305425644,-0.07267846167087555,-0.003080629976466298,-0.02917744591832161,-0.008792081847786903,0.031534068286418915,0.03237494081258774,0.038522955030202866,-0.05375928804278374,-0.025646552443504333,-0.023516003042459488,0.0006916960119269788,-0.041386768221855164,-0.04343108832836151,-0.0017731849802657962,-0.13074891269207,0.02582632564008236,0.1680130511522293,0.01183568499982357,-0.021176034584641457,0.06781413406133652,-0.1423630267381668,0.002129971981048584,-0.024205060675740242,0.03452131897211075,-0.028228024020791054,-0.02620617300271988,-0.019764035940170288]],"e656845f32042b038bd5cdfd675b4c06":[0.99999999035608,[-0.01062348298728466,0.025874214246869087,-0.027837732806801796,0.025572452694177628,0.0038725959602743387,-0.08797695487737656,-0.024112483486533165,-0.02672925777733326,0.05757693201303482,0.11516102403402328,0.08977476507425308,0.08706040680408478,0.07049589604139328,-0.1801184117794037,0.008597058244049549,0.04292180761694908,0.016763726249337196,-0.02157469652593136,0.008530613966286182,0.026712121441960335,0.020523246377706528,-0.1074812039732933,-0.08604492247104645,-0.06714831292629242,0.06722945719957352,-0.03153873234987259,-0.041110243648290634,-0.10975225269794464,-0.020181743428111076,0.05577433109283447,-0.12168413400650024,-0.10843640565872192,-0.05198176950216293,-0.04480580613017082,0.003158927895128727,0.12112697213888168,0.1275559514760971,0.06064556539058685,0.07175230234861374,-0.12112805992364883,-0.08565753698348999,0.039766132831573486,0.010830005630850792,0.0015182859497144818,0.050343163311481476,-0.019513482227921486,-0.0581786222755909,-0.035308100283145905,-0.04166083782911301,-0.07030224055051804,-0.06614825874567032,0.00989354494959116,-0.02938048727810383,0.07990529388189316,-0.05833937227725983,0.07977938652038574,-0.012179195880889893,0.0383356511592865,0.07658132910728455,0.05100109428167343,-0.022385932505130768,0.012381264008581638,-0.046960167586803436,0.07194638252258301,-0.019573966041207314,0.039890170097351074,-0.019178085029125214,0.01760753057897091,0.036946333944797516,-0.02420062944293022,-0.05143606662750244,-0.047544240951538086,0.0428859107196331,0.011302011087536812,0.0088930893689394,0.07261785864830017,0.038216229528188705,0.00501983892172575,-0.008779862895607948,-0.09382583200931549,-0.08973590284585953,0.027435651049017906,0.008420207537710667,-0.043554939329624176,-0.056701358407735825,-0.07305357605218887,0.07026955485343933,-0.017358651384711266,0.06330103427171707,-0.08160865306854248,0.013426166959106922,0.039682503789663315,-0.013662072829902172,-0.11753086745738983,0.0011130470084026456,0.024724271148443222,0.051635026931762695,-0.03894539549946785,0.06589821726083755,-0.029007000848650932,0.04081748053431511,0.08628857880830765,-0.12335751205682755,0.015892988070845604,-0.0046432469971477985,-0.08375877887010574,0.07328513264656067,0.018302641808986664,0.11653818190097809,0.02741413563489914,0.1314198523759842,0.06021532788872719,-0.1179872676730156,-0.06225002557039261,0.00815991498529911,0.04312664642930031,0.04747084155678749,-0.0029837770853191614,0.010409990325570107,-0.03414171189069748,-0.048223670572042465,0.03636344522237778,-0.07109341770410538,0.11052705347537994,-0.13755464553833008,-0.00836398545652628,-0.0590665303170681,0.05711005628108978,0.06016376242041588,0.005656342953443527,0.009770034812390804,-0.030324285849928856,0.015956193208694458,0.07872350513935089,-0.012733018957078457,0.04627898335456848,0.07825082540512085,-0.00001842399979068432,0.04678868502378464,-0.08587351441383362,0.01669825054705143,0.06957791745662689,0.039002642035484314,0.009194406680762768,0.11459719389677048,0.058216601610183716,0.0702037513256073,-0.0100177563726902,0.06833852827548981,-0.03852355480194092,-0.029218457639217377,0.007735996972769499,-0.004561511799693108,-0.04119850695133209,-0.09700127691030502,0.0009137580054812133,-0.02340792864561081,-0.10857554525136948,-0.0594794936478138,0.050819166004657745,-0.0009536709985695779,0.02410964109003544,0.01895672082901001,-0.08646898716688156,0.01626131869852543,0.004072711803019047,-0.055214837193489075,-0.04673420637845993,0.0016131970332935452,0.020251216366887093,-0.051870185881853104,-0.0682632252573967,-0.07493657618761063,0.03617756813764572,-0.09655201435089111,-0.0535367988049984,0.1409626454114914,0.08805596828460693,-0.04376135766506195,-0.014867296442389488,0.011744176037609577,-0.06371854245662689,0.10513090342283249,0.16561156511306763,0.0587221123278141,0.033517926931381226,-0.09357170015573502,-0.0650724396109581,-0.05149806663393974,0.21928398311138153,0.011374462395906448,0.009865925647318363,-0.05376271903514862,0.026283958926796913,0.03845047205686569,-0.06675375998020172,0.12978866696357727,-0.006499236915260553,-0.08547277748584747,-0.0009923729812726378,0.1061256006360054,-0.10011261701583862,0.048116523772478104,0.02210257202386856,0.06358803808689117,0.037818823009729385,0.08059053122997284,-0.045580800622701645,0.009985523298382759,-0.05446168780326843,0.049671564251184464,0.001986762974411249,0.11704500764608383,-0.03320566564798355,0.02274572104215622,-0.09885229915380478,0.017940983176231384,-0.032819103449583054,-0.03720111772418022,0.08662190288305283,-0.013029062189161777,-0.08168801665306091,-0.028703439980745316,0.04331543296575546,-0.050327081233263016,-0.02965829148888588,0.004764223005622625,-0.01826281100511551,0.005943777039647102,-0.03523164615035057,0.012495678849518299,-0.05706923082470894,-0.00003104599818470888,0.03326013311743736,-0.03066454455256462,0.02085067518055439,-0.022715510800480843,-0.025511501356959343,-0.07195571064949036,0.06691905111074448,-0.07383889704942703,0.028593160212039948,-0.03648759424686432,-0.09007493406534195,0.0017812879523262382,0.17664626240730286,0.0552956685423851,-0.013038847595453262,0.10673345625400543,-0.056564945727586746,0.02465558610856533,0.000013116999980411492,0.03710830211639404,-0.03615114837884903,-0.03600690886378288,0.02389468066394329]],"6fd9eb7813fbe3b992f1acb925e8c8e6":[1.0000000019364215,[0.018456878140568733,0.04843834042549133,-0.04528219997882843,0.008859249763190746,0.08075126260519028,-0.04687020182609558,0.024338949471712112,-0.010794571600854397,0.048958152532577515,0.09428461641073227,0.09663186222314835,0.13484197854995728,0.02147873118519783,-0.17173518240451813,0.03534535691142082,0.0004083740059286356,0.011487549170851707,-0.002567602088674903,-0.008404944092035294,0.02276773750782013,0.03374053165316582,-0.1179937943816185,-0.05744112655520439,-0.03632694482803345,0.019631436094641685,-0.0253071840852499,-0.024648981168866158,-0.04120107367634773,-0.013182480819523335,0.09412476420402527,-0.14171692728996277,-0.1409333497285843,-0.05409076437354088,-0.04980034753680229,0.01336862612515688,0.0820031464099884,0.12340852618217468,0.06445495784282684,0.07260575145483017,-0.05623641610145569,-0.10870454460382462,0.07093966007232666,0.025660013779997826,0.06055141240358353,0.027319123968482018,-0.05575334280729294,-0.007279380224645138,0.04231308028101921,-0.019245024770498276,-0.06984321027994156,-0.010374349541962147,0.010907619260251522,-0.003936574794352055,0.06823857128620148,0.01688285917043686,0.058247826993465424,-0.01877305656671524,0.04518339782953262,0.06434640288352966,0.06737049669027328,-0.06519004702568054,-0.006556292995810509,-0.0006097049918025732,0.1362735778093338,-0.0369766466319561,0.039757780730724335,-0.07539015263319016,0.04298055171966553,0.04847726598381996,-0.04614395275712013,-0.07140003144741058,0.030451906844973564,0.055430587381124496,0.007422637194395065,0.016874318942427635,0.10205059498548508,0.09373639523983002,-0.016792114824056625,-0.05694325640797615,-0.08745203912258148,-0.11750060319900513,0.028889985755085945,-0.027522219344973564,-0.06556666642427444,-0.028267988935112953,-0.029362251982092857,0.0948122963309288,-0.022927887737751007,0.05467897653579712,-0.03048695996403694,-0.003626680001616478,0.021318363025784492,-0.009334864094853401,-0.1424928605556488,-0.024146880954504013,0.025652995333075523,0.008006230928003788,-0.020584452897310257,-0.019165975973010063,-0.01569037325680256,0.05533761903643608,0.020212266594171524,-0.08807650953531265,0.04320170357823372,-0.006951973773539066,-0.06631540507078171,0.04271974042057991,0.06696481257677078,0.11855649948120117,0.016941888257861137,0.09833700954914093,0.012548460625112057,-0.11421273648738861,-0.06241259723901749,-0.04514521732926369,0.04452895745635033,0.034717727452516556,-0.0038371249102056026,-0.07105571031570435,0.0003429249918553978,-0.02951349876821041,0.01777542009949684,-0.07936978340148926,0.07060384750366211,-0.13625937700271606,-0.023138346150517464,-0.0826183408498764,0.0816609188914299,0.008798746392130852,0.11132090538740158,-0.0417599231004715,-0.01351118367165327,0.0447377972304821,0.060792043805122375,-0.003982917871326208,0.03646378219127655,0.06951245665550232,-0.05053335800766945,0.0605328232049942,-0.027689658105373383,-0.030391797423362732,0.060320690274238586,0.11742471903562546,0.03415694832801819,0.17837074398994446,0.09624689072370529,0.07544472068548203,0.002296474063768983,0.05882691591978073,-0.05362144857645035,-0.050841331481933594,-0.034238554537296295,0.030528752133250237,-0.0374256931245327,-0.06586015224456787,-0.01204831525683403,0.053408604115247726,-0.10929358005523682,-0.0032180200796574354,0.06385227292776108,0.059141822159290314,0.006541362032294273,0.005415597930550575,-0.05545554682612419,-0.014927702955901623,-0.02790139429271221,0.018384268507361412,-0.06821564584970474,0.005564277060329914,0.018189575523138046,-0.0096536073833704,-0.03565037623047829,-0.07191775739192963,0.0851258859038353,-0.08439702540636063,-0.05483999848365784,0.14766205847263336,0.052146948873996735,-0.0914737731218338,-0.01878681220114231,-0.010136976838111877,-0.09071581065654755,0.1115797609090805,0.13209651410579681,-0.003477540099993348,-0.013917515054345131,-0.06389962881803513,-0.02913016639649868,-0.0003524970088619739,0.1924424022436142,0.07716453820466995,0.02173778973519802,0.013963020406663418,0.01760132983326912,-0.0007094659958966076,-0.015514343976974487,0.15473836660385132,0.04668677598237991,-0.10980288684368134,-0.03663425147533417,0.13340313732624054,-0.0977868065237999,0.03911389783024788,-0.02361350506544113,0.03976660966873169,0.03708617761731148,0.05540221557021141,-0.05603973567485809,-0.04102305695414543,-0.018206164240837097,-0.020149828866124153,-0.01634010300040245,0.10297400504350662,-0.012409747578203678,-0.008622013963758945,-0.09222901612520218,0.07254595309495926,0.02585047110915184,-0.05849943310022354,0.08029239624738693,0.001139687024988234,-0.01520522404462099,-0.08825530856847763,-0.006680693943053484,-0.09115175902843475,-0.0190493855625391,0.03518703952431679,-0.0011252800468355417,0.025569770485162735,-0.025822456926107407,0.0012984729837626219,-0.05382862314581871,-0.03366154059767723,-0.007368885912001133,-0.008665218017995358,0.018491458147764206,-0.06709883362054825,0.02066406048834324,-0.041623856872320175,-0.026164669543504715,0.027506358921527863,0.0005286629893817008,-0.026345757767558098,-0.09498294442892075,-0.03691388666629791,0.1527550369501114,0.05194110795855522,-0.04041285812854767,0.08025098592042923,-0.06894834339618683,0.037891827523708344,-0.04367724433541298,-0.013007290661334991,0.005033945199102163,-0.023810241371393204,0.014241146855056286]],"f54a470b21c322a6e380d7e3753c5706":[1.0000000756649667,[-0.01047674473375082,0.023034367710351944,-0.04860597476363182,-0.006179548799991608,0.04347139596939087,-0.06770536303520203,-0.030446607619524002,-0.025318320840597153,0.05240583419799805,0.12006459385156631,0.06777015328407288,0.058267343789339066,-0.015761811286211014,-0.13621672987937927,0.04319073632359505,0.03819778189063072,0.005330896005034447,-0.04680389165878296,-0.033384770154953,0.013376952148973942,0.03354240953922272,-0.0485367625951767,-0.10231409221887589,-0.03515467420220375,0.021383989602327347,0.01958562061190605,-0.08818972855806351,-0.0953620970249176,0.02139895409345627,0.05160602182149887,-0.09521418064832687,-0.09702969342470169,-0.06790857762098312,-0.015433525666594505,-0.0068085091188549995,0.06970974802970886,0.09342260658740997,0.057339608669281006,0.10452452301979065,-0.1372942477464676,-0.07549187541007996,0.08622539788484573,-0.0009880829602479935,0.004004878923296928,0.04811331257224083,-0.03491167724132538,-0.0524800606071949,-0.007836882025003433,-0.011066583916544914,-0.08488961309194565,-0.10721111297607422,0.044213782995939255,-0.04611169546842575,0.08981743454933167,-0.01878475397825241,0.012379881925880909,0.0031980848871171474,0.050586290657520294,0.0640830248594284,0.023965036496520042,-0.041183583438396454,0.009257800877094269,-0.023461228236556053,0.08400677889585495,-0.03715503588318825,0.049317460507154465,-0.024632899090647697,0.019116362556815147,0.04706527665257454,-0.023795025423169136,-0.04759716987609863,-0.060808781534433365,0.017289869487285614,-0.0370539091527462,0.0037717910017818213,0.05410685017704964,0.05867946147918701,-0.012167729437351227,-0.029354523867368698,-0.08365627378225327,-0.06927813589572906,0.008639694191515446,0.0007461460190825164,-0.05041438341140747,-0.02093503810465336,-0.04421782121062279,0.0631500780582428,-0.015335910953581333,0.054211925715208054,-0.04180886968970299,0.017005514353513718,0.04931307211518288,-0.03427361696958542,-0.06924290210008621,-0.009369638748466969,0.07676230370998383,0.005685615818947554,-0.027395380660891533,0.004209937062114477,-0.04789193719625473,0.05102051794528961,0.11081822216510773,-0.08561117202043533,0.01824563555419445,-0.009195311926305294,-0.05302601680159569,0.06606853008270264,0.029445761814713478,0.08674094080924988,0.05120200663805008,0.10016302764415741,0.08861393481492996,-0.17643648386001587,-0.08337873220443726,-0.02711557224392891,0.01615811698138714,0.05836230143904686,-0.00446526100859046,0.01371421292424202,-0.010774039663374424,-0.04989824816584587,0.023246735334396362,-0.037117280066013336,0.06959596276283264,-0.22061970829963684,0.011157456785440445,-0.0763344094157219,0.07991090416908264,0.053923822939395905,0.04805226996541023,0.0040999059565365314,-0.052941013127565384,0.03709908574819565,0.09852442145347595,0.04544243589043617,0.042281996458768845,0.012028921395540237,0.013211328536272049,0.033814556896686554,-0.07292348146438599,-0.023745441809296608,0.08361419290304184,0.04305705428123474,-0.0019148079445585608,0.1438867747783661,0.0609496533870697,0.11080632358789444,-0.0008806419791653752,0.08127765357494354,-0.025346148759126663,-0.059326183050870895,0.015325291082262993,0.05346781015396118,-0.038442280143499374,-0.08440247923135757,0.03707265481352806,-0.022760430350899696,-0.09315931797027588,-0.062307972460985184,0.08674158900976181,0.030590124428272247,-0.01899302937090397,-0.015451574698090553,-0.058218300342559814,0.012621558271348476,-0.011823264881968498,-0.01296225842088461,-0.08180941641330719,-0.05325381085276604,0.01106949057430029,-0.019108599051833153,-0.06631217151880264,-0.025725634768605232,0.13233362138271332,-0.10111293941736221,-0.08241064846515656,0.13484656810760498,0.08632754534482956,-0.02977377362549305,-0.04921961948275566,0.04355742409825325,-0.054419901221990585,0.11505446583032608,0.16485759615898132,0.049768563359975815,0.048632413148880005,-0.05060570687055588,-0.016030404716730118,-0.009459080174565315,0.23147699236869812,0.03756807744503021,0.024677801877260208,-0.060665667057037354,0.026467133313417435,0.01058334019035101,-0.026794223114848137,0.132476344704628,0.005116913001984358,-0.08301274478435516,-0.039895109832286835,0.15363967418670654,-0.11748060584068298,0.059829361736774445,0.0017706559738144279,0.07381051033735275,0.015573931857943535,0.059421390295028687,-0.05586093291640282,0.009312180802226067,-0.028855443000793457,0.0678890123963356,0.005148507189005613,0.08528928458690643,-0.005131536163389683,0.07906261831521988,-0.07152196019887924,0.07960852980613708,-0.010153252631425858,-0.0623498409986496,0.022816887125372887,-0.00415382394567132,-0.03797969967126846,-0.057740602642297745,-0.011898726224899292,-0.04423179849982262,-0.0024748980067670345,0.0483977347612381,-0.03155107423663139,-0.0005172829842194915,-0.07972221821546555,-0.030186370015144348,-0.07225680351257324,0.01861531473696232,0.03558976948261261,-0.02473479136824608,0.056260209530591965,-0.07800255715847015,0.011599547229707241,-0.07970725744962692,0.03835113346576691,-0.02667270600795746,-0.0043531558476388454,-0.008553452789783478,-0.08739423751831055,-0.005949791986495256,0.13798753917217255,0.07621078938245773,-0.025088340044021606,0.10978230088949203,-0.0025350619107484818,0.036221638321876526,-0.008144021965563297,0.039656657725572586,-0.0006274919724091887,-0.04680861532688141,0.027517130598425865]],"1db65c2d42406ac6cb5c1b9c63dc269d":[1.000000039001471,[0.00935352686792612,-0.00022432800324168056,-0.07430846244096756,-0.017293129116296768,0.04620756581425667,-0.009936613030731678,0.03991522267460823,-0.021144334226846695,0.0230253916233778,0.04680348187685013,0.07608567923307419,0.012222222983837128,0.06291507184505463,-0.0921345204114914,0.03867644444108009,0.026354454457759857,0.013715618290007114,-0.081861212849617,0.09785503149032593,0.11014710366725922,0.024815279990434647,-0.05764761567115784,-0.06761159002780914,-0.07268219441175461,0.08182472735643387,-0.003052216023206711,-0.015973638743162155,0.03603004664182663,0.07088601589202881,0.04114009439945221,-0.048567675054073334,-0.08508908748626709,-0.04355788975954056,0.08986301720142365,-0.07686753571033478,0.09359925240278244,0.13587459921836853,0.05705879628658295,0.11680398881435394,-0.09789520502090454,-0.11969194561243057,-0.010208272375166416,-0.07310789078474045,-0.04014945402741432,0.09277252852916718,-0.050146400928497314,-0.009676399640738964,0.06973881274461746,0.008143125101923943,-0.06656067073345184,-0.10761408507823944,0.02028789557516575,-0.07585349678993225,0.05530199408531189,-0.000785417971201241,0.03310804069042206,-0.02727748267352581,-0.015472554601728916,0.061893709003925323,0.08462577313184738,-0.03045615181326866,-0.016568871214985847,-0.052787624299526215,0.07628723978996277,0.05910973995923996,0.059808894991874695,0.04876335710287094,-0.009083525277674198,0.03358848765492439,0.01893666572868824,-0.028569255024194717,0.013946696184575558,0.045292340219020844,0.012654546648263931,-0.03325573354959488,0.11853057146072388,0.05000241845846176,0.10520454496145248,-0.04242651164531708,-0.06059377267956734,-0.024145333096385002,0.032770395278930664,0.04400430619716644,-0.045951176434755325,0.00028585101244971156,-0.024577565491199493,0.025545191019773483,-0.08259205520153046,0.016585012897849083,-0.052733298391103745,0.08539203554391861,0.039924800395965576,-0.04962209239602089,-0.18579190969467163,0.03133224695920944,0.08409976214170456,0.04984419420361519,-0.016090884804725647,-0.0006682730163447559,-0.04362941160798073,-0.00007463499787263572,0.07470990717411041,0.004509367980062962,-0.05124601349234581,-0.03014054335653782,-0.022748051211237907,0.08154184371232986,0.031272951513528824,0.10049431771039963,0.004344568122178316,0.10614063590765,-0.02445415034890175,-0.224916473031044,0.0005941980052739382,-0.022612612694501877,-0.0021142479963600636,0.07070212066173553,0.0428338460624218,-0.052273042500019073,0.03691483661532402,0.029040155932307243,0.014519771561026573,-0.05458224192261696,0.008843282237648964,-0.16522009670734406,-0.027623265981674194,-0.13754978775978088,0.11480972915887833,-0.05247137323021889,-0.05098613351583481,-0.04921628534793854,0.002701248973608017,0.05315146595239639,0.02026655152440071,0.021463334560394287,0.12718454003334045,0.04407145455479622,0.0177860576659441,0.051558706909418106,-0.07000981271266937,-0.07842661440372467,-0.004943630192428827,0.044415850192308426,-0.008053092285990715,0.10661349445581436,0.09541106224060059,0.09884136915206909,-0.001360730966553092,0.05739858001470566,-0.054123472422361374,-0.01973913237452507,0.11583426594734192,0.01961527019739151,-0.08912138640880585,-0.07430095225572586,-0.05057935416698456,0.0837528258562088,-0.03046105057001114,-0.016424721106886864,0.04217388480901718,0.08097898215055466,-0.0198393352329731,-0.021350666880607605,-0.05689713731408119,0.03210361674427986,0.0005728739779442549,-0.02683982439339161,-0.10769917070865631,-0.03742076829075813,-0.03549733757972717,-0.08090422302484512,-0.03509145602583885,-0.0639222115278244,0.018665824085474014,-0.11700794845819473,-0.07897409796714783,0.13345038890838623,0.11726324260234833,-0.04904114082455635,-0.08968270570039749,0.031084993854165077,-0.03959058225154877,0.07755643129348755,0.1512749195098877,0.04158911108970642,0.038244377821683884,-0.027564583346247673,-0.006421906873583794,-0.06952495872974396,0.1529187113046646,-0.007113936822861433,0.02048451267182827,-0.040161605924367905,-0.048408154398202896,0.008201255463063717,-0.06935994327068329,0.10385344177484512,0.03881348296999931,-0.0454946793615818,-0.014935769140720367,0.12607038021087646,-0.05977342650294304,0.12081405520439148,-0.002346893073990941,0.0010362350149080157,-0.00022661099501419812,0.05269427224993706,-0.039875734597444534,-0.00836639478802681,-0.034279145300388336,0.00453666178509593,-0.027213672176003456,0.06421807408332825,-0.038273055106401443,-0.003933914005756378,-0.10617949813604355,-0.01590357907116413,-0.019344542175531387,-0.017693588510155678,0.11683294177055359,-0.029864288866519928,-0.03279925882816315,-0.06101801246404648,0.003235873067751527,0.019397178664803505,-0.016061201691627502,0.08517782390117645,0.029243458062410355,-0.0028168989811092615,0.006996450945734978,0.06366569548845291,-0.05857081711292267,0.0031944660004228354,-0.053703367710113525,-0.021116990596055984,0.07903777062892914,-0.02791816182434559,0.024570118635892868,0.001592990942299366,0.0041928221471607685,-0.07057905197143555,-0.01227662805467844,-0.03484096750617027,-0.07483649253845215,0.03496864438056946,0.03982803225517273,0.07525677978992462,0.03034880757331848,0.046454597264528275,-0.07580792903900146,-0.01598438061773777,-0.04301868751645088,0.03588791936635971,-0.016553781926631927,-0.015447968617081642,-0.07861277461051941]]}}},"searchableProperties":["id","title","path","content","embedding","embeddingModel","created_at","ctime","mtime","tags","extension"],"searchablePropertiesWithTypes":{"id":"string","title":"string","path":"string","content":"string","embedding":"vector[256]","embeddingModel":"string","created_at":"number","ctime":"number","mtime":"number","tags":"string[]","extension":"string"},"frequencies":{"id":{"1":{"00f7a17a58ce641031276f183b3a5f2f":1},"2":{"e0da47551e90934057bad285d1ba8181":1},"3":{"69a44dc01c5ffd62a5b69fd0397f869f":1},"4":{"e656845f32042b038bd5cdfd675b4c06":1},"5":{"6fd9eb7813fbe3b992f1acb925e8c8e6":1},"6":{"f54a470b21c322a6e380d7e3753c5706":1},"7":{"1db65c2d42406ac6cb5c1b9c63dc269d":1}},"title":{"1":{"main":1},"2":{"main":1},"3":{"main":1},"4":{"main":1},"5":{"main":1},"6":{"main":1},"7":{"requirements":1}},"path":{"1":{"source":0.25,"image-editor":0.25,"main":0.25,"md":0.25},"2":{"source":0.25,"image-editor":0.25,"main":0.25,"md":0.25},"3":{"source":0.25,"image-editor":0.25,"main":0.25,"md":0.25},"4":{"source":0.25,"image-editor":0.25,"main":0.25,"md":0.25},"5":{"source":0.25,"image-editor":0.25,"main":0.25,"md":0.25},"6":{"source":0.25,"image-editor":0.25,"main":0.25,"md":0.25},"7":{"source":0.25,"image-editor":0.25,"requirements":0.25,"md":0.25}},"content":{"1":{"0":0.0058823529411764705,"1":0.0058823529411764705,"27":0.0058823529411764705,"46":0.0058823529411764705,"400":0.0058823529411764705,"2025":0.0058823529411764705,"note":0.0058823529411764705,"title":0.0058823529411764705,"main":0.0058823529411764705,"metadata":0.0058823529411764705,"created":0.0058823529411764705,"08":0.0058823529411764705,"01":0.0058823529411764705,"07":0.0058823529411764705,"modified":0.0058823529411764705,"block":0.0058823529411764705,"content":0.0058823529411764705,"from":0.0058823529411764705,"fastapi":0.0058823529411764705,"import":0.0058823529411764705,"file":0.0058823529411764705,"uploadfile":0.0058823529411764705,"httpexception":0.0058823529411764705,"middleware":0.0058823529411764705,"cors":0.0058823529411764705,"corsmiddleware":0.0058823529411764705,"responses":0.0058823529411764705,"fileresponse":0.0058823529411764705,"streamingresponse":0.0058823529411764705,"staticfiles":0.0058823529411764705,"pydantic":0.0058823529411764705,"basemodel":0.0058823529411764705,"typing":0.0058823529411764705,"dict":0.0058823529411764705,"any":0.0058823529411764705,"optional":0.0058823529411764705,"list":0.0058823529411764705,"os":0.0058823529411764705,"uuid":0.0058823529411764705,"pil":0.0058823529411764705,"image":0.0058823529411764705,"imagefilter":0.0058823529411764705,"imageenhance":0.0058823529411764705,"imageops":0.0058823529411764705,"asyncio":0.0058823529411764705,"pathlib":0.0058823529411764705,"path":0.0058823529411764705,"aiofiles":0.0058823529411764705,"zipfile":0.0058823529411764705,"io":0.0058823529411764705,"xml":0.0058823529411764705,"etree":0.0058823529411764705,"elementtree":0.0058823529411764705,"as":0.0058823529411764705,"et":0.0058823529411764705,"re":0.0058823529411764705,"text_image_replacer":0.0058823529411764705,"textimagereplacer":0.0058823529411764705,"create_template_config":0.0058823529411764705,"app":0.0058823529411764705,"editor":0.0058823529411764705,"api":0.0058823529411764705,"version":0.0058823529411764705,"add_middleware":0.0058823529411764705,"allow_origins":0.0058823529411764705,"allow_credentials":0.0058823529411764705,"true":0.0058823529411764705,"allow_methods":0.0058823529411764705,"allow_headers":0.0058823529411764705,"upload_dir":0.0058823529411764705,"uploads":0.0058823529411764705,"processed_dir":0.0058823529411764705,"processed":0.0058823529411764705,"mkdir":0.0058823529411764705,"exist_ok":0.0058823529411764705,"mount":0.0058823529411764705,"directory":0.0058823529411764705,"name":0.0058823529411764705,"class":0.0058823529411764705,"imageresponse":0.0058823529411764705,"url":0.0058823529411764705,"str":0.0058823529411764705,"filename":0.0058823529411764705,"imagebatchresponse":0.0058823529411764705,"original_url":0.0058823529411764705,"processed_url":0.0058823529411764705,"original_filename":0.0058823529411764705,"processed_filename":0.0058823529411764705,"status":0.0058823529411764705,"error_message":0.0058823529411764705,"none":0.0058823529411764705,"operationrequest":0.0058823529411764705,"id":0.0058823529411764705,"operation":0.0058823529411764705,"parameters":0.0058823529411764705,"float":0.0058823529411764705,"enablecrop":0.0058823529411764705,"bool":0.0058823529411764705,"processbatchrequest":0.0058823529411764705,"image_urls":0.0058823529411764705,"operations":0.0058823529411764705,"output_format":0.0058823529411764705,"original":0.0058823529411764705,"get":0.0058823529411764705,"async":0.0058823529411764705,"def":0.0058823529411764705,"root":0.0058823529411764705,"return":0.0058823529411764705,"message":0.0058823529411764705,"post":0.0058823529411764705,"upload":0.0058823529411764705,"response_model":0.0058823529411764705,"upload_image":0.0058823529411764705,"if":0.0058823529411764705,"not":0.0058823529411764705,"content_type":0.0058823529411764705,"or":0.0058823529411764705,"startswith":0.0058823529411764705,"raise":0.0058823529411764705,"status_code":0.0058823529411764705,"detail":0.0058823529411764705,"invalid":0.0058823529411764705,"type":0.0058823529411764705,"please":0.0058823529411764705,"an":0.0058823529411764705,"file_extension":0.0058823529411764705,"split":0.0058823529411764705,"-1":0.0058823529411764705,"else":0.0058823529411764705,"jpg":0.0058823529411764705,"unique_filename":0.0058823529411764705,"f":0.0058823529411764705,"uuid4":0.0058823529411764705,"file_path":0.0058823529411764705,"with":0.0058823529411764705,"open":0.0058823529411764705,"wb":0.0058823529411764705,"await":0.0058823529411764705,"read":0.0058823529411764705,"write":0.0058823529411764705,"upload-batch":0.0058823529411764705,"upload_batch_images":0.0058823529411764705,"files":0.0058823529411764705,"uploaded_files":0.0058823529411764705,"for":0.0058823529411764705,"in":0.0058823529411764705,"images":0.0058823529411764705,"only":0.0058823529411764705,"append":0.0058823529411764705,"process-batch":0.0058823529411764705,"process_batch_images":0.0058823529411764705,"request":0.0058823529411764705,"results":0.0058823529411764705,"image_url":0.0058823529411764705,"try":0.0058823529411764705,"input_path":0.0058823529411764705,"error":0.0058823529411764705,"continue":0.0058823529411764705,"exists":0.0058823529411764705,"found":0.0058823529411764705,"original_extension":0.0058823529411764705,"lower":0.0058823529411764705,"output_extension":0.0058823529411764705,"elif":0.0058823529411764705,"png":0.0058823529411764705,"webp":0.0058823529411764705,"output_filename":0.0058823529411764705,"processed_":0.0058823529411764705,"output_path":0.0058823529411764705,"process_multiple_operations_async":0.0058823529411764705},"2":{"0":0.005988023952095809,"1":0.005988023952095809,"3":0.005988023952095809,"6":0.005988023952095809,"8":0.005988023952095809,"27":0.005988023952095809,"30":0.005988023952095809,"46":0.005988023952095809,"72":0.005988023952095809,"95":0.005988023952095809,"255":0.005988023952095809,"600":0.005988023952095809,"800":0.005988023952095809,"2025":0.005988023952095809,"note":0.005988023952095809,"title":0.005988023952095809,"main":0.005988023952095809,"metadata":0.005988023952095809,"created":0.005988023952095809,"08":0.005988023952095809,"01":0.005988023952095809,"07":0.005988023952095809,"modified":0.005988023952095809,"block":0.005988023952095809,"content":0.005988023952095809,"cont'd":0.005988023952095809,"await":0.005988023952095809,"process_multiple_operations_async":0.005988023952095809,"input_path":0.005988023952095809,"output_path":0.005988023952095809,"request":0.005988023952095809,"operations":0.005988023952095809,"results":0.005988023952095809,"append":0.005988023952095809,"imagebatchresponse":0.005988023952095809,"original_url":0.005988023952095809,"image_url":0.005988023952095809,"processed_url":0.005988023952095809,"f":0.005988023952095809,"processed":0.005988023952095809,"output_filename":0.005988023952095809,"original_filename":0.005988023952095809,"filename":0.005988023952095809,"processed_filename":0.005988023952095809,"status":0.005988023952095809,"success":0.005988023952095809,"error_message":0.005988023952095809,"none":0.005988023952095809,"except":0.005988023952095809,"exception":0.005988023952095809,"as":0.005988023952095809,"e":0.005988023952095809,"error":0.005988023952095809,"str":0.005988023952095809,"return":0.005988023952095809,"async":0.005988023952095809,"def":0.005988023952095809,"path":0.005988023952095809,"list":0.005988023952095809,"operationrequest":0.005988023952095809,"pil":0.005988023952095809,"if":0.005988023952095809,"not":0.005988023952095809,"raise":0.005988023952095809,"valueerror":0.005988023952095809,"process_sync":0.005988023952095809,"with":0.005988023952095809,"image":0.005988023952095809,"open":0.005988023952095809,"original_image":0.005988023952095809,"copy":0.005988023952095809,"dpi":0.005988023952095809,"dpi_value":0.005988023952095809,"for":0.005988023952095809,"operation":0.005988023952095809,"in":0.005988023952095809,"int":0.005988023952095809,"parameters":0.005988023952095809,"get":0.005988023952095809,"operation_params":0.005988023952095809,"resize":0.005988023952095809,"and":0.005988023952095809,"enablecrop":0.005988023952095809,"is":0.005988023952095809,"crop":0.005988023952095809,"else":0.005988023952095809,"apply_pil_operation":0.005988023952095809,"try":0.005988023952095809,"exif":0.005988023952095809,"getexif":0.005988023952095809,"icc_profile":0.005988023952095809,"info":0.005988023952095809,"'icc_profile'":0.005988023952095809,"output_extension":0.005988023952095809,"lower":0.005988023952095809,"endswith":0.005988023952095809,"'":0.005988023952095809,"png'":0.005988023952095809,"save_format":0.005988023952095809,"'png'":0.005988023952095809,"elif":0.005988023952095809,"jpg'":0.005988023952095809,"jpeg'":0.005988023952095809,"'jpeg'":0.005988023952095809,"webp'":0.005988023952095809,"'webp'":0.005988023952095809,"save_kwargs":0.005988023952095809,"'format'":0.005988023952095809,"'dpi'":0.005988023952095809,"'optimize'":0.005988023952095809,"true":0.005988023952095809,"'quality'":0.005988023952095809,"'compress_level'":0.005988023952095809,"'exif'":0.005988023952095809,"icc":0.005988023952095809,"save":0.005988023952095809,"print":0.005988023952095809,"warning":0.005988023952095809,"could":0.005988023952095809,"preserve_image_metadata_and_save":0.005988023952095809,"cpu":0.005988023952095809,"loop":0.005988023952095809,"asyncio":0.005988023952095809,"get_event_loop":0.005988023952095809,"run_in_executor":0.005988023952095809,"dict":0.005988023952095809,"float":0.005988023952095809,"-":0.005988023952095809,"width":0.005988023952095809,"height":0.005988023952095809,"imageops":0.005988023952095809,"fit":0.005988023952095809,"resampling":0.005988023952095809,"lanczos":0.005988023952095809,"rotate":0.005988023952095809,"angle":0.005988023952095809,"resample":0.005988023952095809,"bicubic":0.005988023952095809,"expand":0.005988023952095809,"blur":0.005988023952095809,"sigma":0.005988023952095809,"filter":0.005988023952095809,"imagefilter":0.005988023952095809,"gaussianblur":0.005988023952095809,"radius":0.005988023952095809,"grayscale":0.005988023952095809,"l":0.005988023952095809,"rgb":0.005988023952095809,"convert":0.005988023952095809,"'l'":0.005988023952095809,"'rgb'":0.005988023952095809,"sepia":0.005988023952095809,"new":0.005988023952095809,"size":0.005988023952095809,"sepia_pixels":0.005988023952095809,"pixel":0.005988023952095809,"getdata":0.005988023952095809,"r":0.005988023952095809,"min":0.005988023952095809,"g":0.005988023952095809,"b":0.005988023952095809,"putdata":0.005988023952095809,"overlay":0.005988023952095809,"opacity":0.005988023952095809,"alpha":0.005988023952095809,"overlay_with_alpha":0.005988023952095809,"'rgba'":0.005988023952095809},"3":{"0":0.008333333333333333,"1":0.008333333333333333,"27":0.008333333333333333,"46":0.008333333333333333,"72":0.008333333333333333,"95":0.008333333333333333,"255":0.008333333333333333,"2025":0.008333333333333333,"note":0.008333333333333333,"title":0.008333333333333333,"main":0.008333333333333333,"metadata":0.008333333333333333,"created":0.008333333333333333,"08":0.008333333333333333,"01":0.008333333333333333,"07":0.008333333333333333,"modified":0.008333333333333333,"block":0.008333333333333333,"content":0.008333333333333333,"cont'd":0.008333333333333333,"alpha":0.008333333333333333,"int":0.008333333333333333,"opacity":0.008333333333333333,"overlay_with_alpha":0.008333333333333333,"image":0.008333333333333333,"new":0.008333333333333333,"'rgba'":0.008333333333333333,"size":0.008333333333333333,"rgba":0.008333333333333333,"if":0.008333333333333333,"mode":0.008333333333333333,"image_rgba":0.008333333333333333,"convert":0.008333333333333333,"else":0.008333333333333333,"alpha_composite":0.008333333333333333,"rgb":0.008333333333333333,"'rgb'":0.008333333333333333,"elif":0.008333333333333333,"operation":0.008333333333333333,"dpi":0.008333333333333333,"pass":0.008333333333333333,"return":0.008333333333333333,"def":0.008333333333333333,"preserve_image_metadata_and_save":0.008333333333333333,"original_path":0.008333333333333333,"path":0.008333333333333333,"output_path":0.008333333333333333,"processed_image":0.008333333333333333,"exif":0.008333333333333333,"try":0.008333333333333333,"with":0.008333333333333333,"open":0.008333333333333333,"str":0.008333333333333333,"as":0.008333333333333333,"original":0.008333333333333333,"getexif":0.008333333333333333,"icc":0.008333333333333333,"profile":0.008333333333333333,"icc_profile":0.008333333333333333,"info":0.008333333333333333,"get":0.008333333333333333,"'icc_profile'":0.008333333333333333,"copy":0.008333333333333333,"output_extension":0.008333333333333333,"lower":0.008333333333333333,"endswith":0.008333333333333333,"'":0.008333333333333333,"png'":0.008333333333333333,"save_format":0.008333333333333333,"'png'":0.008333333333333333,"jpg'":0.008333333333333333,"jpeg'":0.008333333333333333,"'jpeg'":0.008333333333333333,"webp'":0.008333333333333333,"'webp'":0.008333333333333333,"save_kwargs":0.008333333333333333,"'format'":0.008333333333333333,"'optimize'":0.008333333333333333,"true":0.008333333333333333,"in":0.008333333333333333,"'quality'":0.008333333333333333,"'compress_level'":0.008333333333333333,"and":0.008333333333333333,"'exif'":0.008333333333333333,"'dpi'":0.008333333333333333,"save":0.008333333333333333,"print":0.008333333333333333,"f":0.008333333333333333,"saved":0.008333333333333333,"preservation":0.008333333333333333,"except":0.008333333333333333,"exception":0.008333333333333333,"e":0.008333333333333333,"warning":0.008333333333333333,"could":0.008333333333333333,"not":0.008333333333333333,"preserve":0.008333333333333333,"format":0.008333333333333333,"compress_level":0.008333333333333333,"quality":0.008333333333333333,"optimize":0.008333333333333333,"async":0.008333333333333333,"process_image_async":0.008333333333333333,"input_path":0.008333333333333333,"parameters":0.008333333333333333,"dict":0.008333333333333333,"float":0.008333333333333333,"pil":0.008333333333333333,"process_sync":0.008333333333333333,"original_image":0.008333333333333333,"apply_pil_operation":0.008333333333333333,"processed":0.008333333333333333,"successfully":0.008333333333333333,"cpu":0.008333333333333333,"loop":0.008333333333333333,"asyncio":0.008333333333333333,"get_event_loop":0.008333333333333333,"await":0.008333333333333333,"run_in_executor":0.008333333333333333,"none":0.008333333333333333},"4":{"0":0.005747126436781609,"1":0.005747126436781609,"24":0.005747126436781609,"27":0.005747126436781609,"46":0.005747126436781609,"400":0.005747126436781609,"404":0.005747126436781609,"500":0.005747126436781609,"1024":0.005747126436781609,"2025":0.005747126436781609,"3600":0.005747126436781609,"note":0.005747126436781609,"title":0.005747126436781609,"main":0.005747126436781609,"metadata":0.005747126436781609,"created":0.005747126436781609,"08":0.005747126436781609,"01":0.005747126436781609,"07":0.005747126436781609,"modified":0.005747126436781609,"block":0.005747126436781609,"content":0.005747126436781609,"cont'd":0.005747126436781609,"cpu":0.005747126436781609,"loop":0.005747126436781609,"asyncio":0.005747126436781609,"get_event_loop":0.005747126436781609,"await":0.005747126436781609,"run_in_executor":0.005747126436781609,"none":0.005747126436781609,"process_sync":0.005747126436781609,"app":0.005747126436781609,"get":0.005747126436781609,"api":0.005747126436781609,"images":0.005747126436781609,"filename":0.005747126436781609,"async":0.005747126436781609,"def":0.005747126436781609,"get_image":0.005747126436781609,"str":0.005747126436781609,"file_path":0.005747126436781609,"processed_dir":0.005747126436781609,"if":0.005747126436781609,"not":0.005747126436781609,"exists":0.005747126436781609,"raise":0.005747126436781609,"httpexception":0.005747126436781609,"status_code":0.005747126436781609,"detail":0.005747126436781609,"image":0.005747126436781609,"found":0.005747126436781609,"return":0.005747126436781609,"fileresponse":0.005747126436781609,"path":0.005747126436781609,"media_type":0.005747126436781609,"png":0.005747126436781609,"uploads":0.005747126436781609,"get_uploaded_image":0.005747126436781609,"upload_dir":0.005747126436781609,"post":0.005747126436781609,"download-batch":0.005747126436781609,"download_batch_images":0.005747126436781609,"filenames":0.005747126436781609,"list":0.005747126436781609,"zip":0.005747126436781609,"no":0.005747126436781609,"files":0.005747126436781609,"specified":0.005747126436781609,"zip_buffer":0.005747126436781609,"io":0.005747126436781609,"bytesio":0.005747126436781609,"with":0.005747126436781609,"zipfile":0.005747126436781609,"w":0.005747126436781609,"zip_deflated":0.005747126436781609,"as":0.005747126436781609,"zip_file":0.005747126436781609,"for":0.005747126436781609,"in":0.005747126436781609,"write":0.005747126436781609,"seek":0.005747126436781609,"streamingresponse":0.005747126436781609,"read":0.005747126436781609,"application":0.005747126436781609,"headers":0.005747126436781609,"content-disposition":0.005747126436781609,"attachment":0.005747126436781609,"processed_images":0.005747126436781609,"delete":0.005747126436781609,"clear-files":0.005747126436781609,"clear_files":0.005747126436781609,"try":0.005747126436781609,"upload_files":0.005747126436781609,"glob":0.005747126436781609,"processed_files":0.005747126436781609,"is_file":0.005747126436781609,"unlink":0.005747126436781609,"message":0.005747126436781609,"cleared":0.005747126436781609,"successfully":0.005747126436781609,"deleted_uploads":0.005747126436781609,"len":0.005747126436781609,"deleted_processed":0.005747126436781609,"total_deleted":0.005747126436781609,"except":0.005747126436781609,"exception":0.005747126436781609,"e":0.005747126436781609,"f":0.005747126436781609,"failed":0.005747126436781609,"to":0.005747126436781609,"clear":0.005747126436781609,"clear-old-files":0.005747126436781609,"clear_old_files":0.005747126436781609,"hours":0.005747126436781609,"int":0.005747126436781609,"import":0.005747126436781609,"time":0.005747126436781609,"current_time":0.005747126436781609,"cutoff_time":0.005747126436781609,"-":0.005747126436781609,"and":0.005747126436781609,"stat":0.005747126436781609,"st_mtime":0.005747126436781609,"old":0.005747126436781609,"older":0.005747126436781609,"than":0.005747126436781609,"storage-info":0.005747126436781609,"get_storage_info":0.005747126436781609,"os":0.005747126436781609,"get_directory_size":0.005747126436781609,"total_size":0.005747126436781609,"file_count":0.005747126436781609,"st_size":0.005747126436781609,"upload_size":0.005747126436781609,"upload_count":0.005747126436781609,"processed_size":0.005747126436781609,"processed_count":0.005747126436781609,"format_size":0.005747126436781609,"size_bytes":0.005747126436781609,"b":0.005747126436781609,"size_names":0.005747126436781609,"kb":0.005747126436781609,"mb":0.005747126436781609,"gb":0.005747126436781609,"i":0.005747126436781609,"while":0.005747126436781609,"1f":0.005747126436781609,"size":0.005747126436781609,"size_formatted":0.005747126436781609,"processed":0.005747126436781609,"total":0.005747126436781609,"storage":0.005747126436781609,"info":0.005747126436781609,"health":0.005747126436781609,"health_check":0.005747126436781609,"from":0.005747126436781609,"datetime":0.005747126436781609,"status":0.005747126436781609,"healthy":0.005747126436781609,"timestamp":0.005747126436781609,"now":0.005747126436781609,"isoformat":0.005747126436781609,"version":0.005747126436781609,"api_name":0.005747126436781609,"editor":0.005747126436781609,"svg":0.005747126436781609,"class":0.005747126436781609,"svggeneraterequest":0.005747126436781609,"basemodel":0.005747126436781609,"prefecture":0.005747126436781609,"color":0.005747126436781609,"ff6277":0.005747126436781609,"svgresponse":0.005747126436781609,"svg_content":0.005747126436781609},"5":{"0":0.00625,"1":0.00625,"2":0.00625,"3":0.00625,"8":0.00625,"27":0.00625,"46":0.00625,"404":0.00625,"500":0.00625,"1024":0.00625,"2025":0.00625,"note":0.00625,"title":0.00625,"main":0.00625,"metadata":0.00625,"created":0.00625,"08":0.00625,"01":0.00625,"07":0.00625,"modified":0.00625,"block":0.00625,"content":0.00625,"cont'd":0.00625,"svg":0.00625,"class":0.00625,"svggeneraterequest":0.00625,"basemodel":0.00625,"prefecture":0.00625,"str":0.00625,"color":0.00625,"ff6277":0.00625,"svgresponse":0.00625,"svg_content":0.00625,"filename":0.00625,"id":0.00625,"prefectures":0.00625,"app":0.00625,"get":0.00625,"api":0.00625,"async":0.00625,"def":0.00625,"get_prefectures":0.00625,"return":0.00625,"post":0.00625,"generate-svg":0.00625,"response_model":0.00625,"generate_svg":0.00625,"request":0.00625,"try":0.00625,"svg_path":0.00625,"path":0.00625,"assets":0.00625,"map":0.00625,"if":0.00625,"not":0.00625,"exists":0.00625,"raise":0.00625,"httpexception":0.00625,"status_code":0.00625,"detail":0.00625,"template":0.00625,"found":0.00625,"with":0.00625,"open":0.00625,"r":0.00625,"encoding":0.00625,"utf-8":0.00625,"as":0.00625,"f":0.00625,"read":0.00625,"for":0.00625,"in":0.00625,"reset_ids":0.00625,"elif":0.00625,"-2":0.00625,"else":0.00625,"prefecture_id":0.00625,"pattern1":0.00625,"f'id":0.00625,"fill":0.00625,"'":0.00625,"re":0.00625,"search":0.00625,"replacement1":0.00625,"1fill":0.00625,"fff":0.00625,"sub":0.00625,"prefecture_ids":0.00625,"print":0.00625,"pattern":0.00625,"matched":0.00625,"updated":0.00625,"existing":0.00625,"attribute":0.00625,"continue":0.00625,"style":0.00625,"pattern2":0.00625,"replacement2":0.00625,"1style":0.00625,"2fill":0.00625,"pattern3":0.00625,"replacement3":0.00625,"added":0.00625,"new":0.00625,"warning":0.00625,"no":0.00625,"japan_map_":0.00625,"_":0.00625,"uuid":0.00625,"uuid4":0.00625,"hex":0.00625,"output_path":0.00625,"processed_dir":0.00625,"w":0.00625,"write":0.00625,"generated":0.00625,"successfully":0.00625,"except":0.00625,"exception":0.00625,"e":0.00625,"generation":0.00625,"error":0.00625,"failed":0.00625,"get_svg":0.00625,"file_path":0.00625,"file":0.00625,"fileresponse":0.00625,"media_type":0.00625,"image":0.00625,"xml":0.00625,"fileinfo":0.00625,"size":0.00625,"int":0.00625,"size_formatted":0.00625,"created_at":0.00625,"file_type":0.00625,"filelistresponse":0.00625,"uploads":0.00625,"list":0.00625,"processed":0.00625,"total_count":0.00625,"files":0.00625,"get_file_list":0.00625,"import":0.00625,"os":0.00625,"from":0.00625,"datetime":0.00625,"format_size":0.00625,"size_bytes":0.00625,"b":0.00625,"size_names":0.00625,"kb":0.00625,"mb":0.00625,"gb":0.00625,"i":0.00625,"while":0.00625,"and":0.00625,"len":0.00625,"-":0.00625,"1f":0.00625},"6":{"0":0.005917159763313609,"8":0.005917159763313609,"27":0.005917159763313609,"46":0.005917159763313609,"400":0.005917159763313609,"404":0.005917159763313609,"500":0.005917159763313609,"2025":0.005917159763313609,"8000":0.005917159763313609,"note":0.005917159763313609,"title":0.005917159763313609,"main":0.005917159763313609,"metadata":0.005917159763313609,"created":0.005917159763313609,"08":0.005917159763313609,"01":0.005917159763313609,"07":0.005917159763313609,"modified":0.005917159763313609,"block":0.005917159763313609,"content":0.005917159763313609,"cont'd":0.005917159763313609,"def":0.005917159763313609,"get_file_info":0.005917159763313609,"file_path":0.005917159763313609,"file_type":0.005917159763313609,"stat":0.005917159763313609,"return":0.005917159763313609,"fileinfo":0.005917159763313609,"filename":0.005917159763313609,"name":0.005917159763313609,"size":0.005917159763313609,"st_size":0.005917159763313609,"size_formatted":0.005917159763313609,"format_size":0.005917159763313609,"created_at":0.005917159763313609,"datetime":0.005917159763313609,"fromtimestamp":0.005917159763313609,"st_mtime":0.005917159763313609,"strftime":0.005917159763313609,"y-":0.005917159763313609,"m-":0.005917159763313609,"d":0.005917159763313609,"h":0.005917159763313609,"m":0.005917159763313609,"s":0.005917159763313609,"uploads":0.005917159763313609,"processed":0.005917159763313609,"for":0.005917159763313609,"in":0.005917159763313609,"upload_dir":0.005917159763313609,"glob":0.005917159763313609,"if":0.005917159763313609,"is_file":0.005917159763313609,"append":0.005917159763313609,"upload":0.005917159763313609,"processed_dir":0.005917159763313609,"sort":0.005917159763313609,"key":0.005917159763313609,"lambda":0.005917159763313609,"x":0.005917159763313609,"reverse":0.005917159763313609,"true":0.005917159763313609,"filelistresponse":0.005917159763313609,"total_count":0.005917159763313609,"len":0.005917159763313609,"except":0.005917159763313609,"exception":0.005917159763313609,"as":0.005917159763313609,"e":0.005917159763313609,"raise":0.005917159763313609,"httpexception":0.005917159763313609,"status_code":0.005917159763313609,"detail":0.005917159763313609,"f":0.005917159763313609,"failed":0.005917159763313609,"to":0.005917159763313609,"get":0.005917159763313609,"file":0.005917159763313609,"list":0.005917159763313609,"str":0.005917159763313609,"app":0.005917159763313609,"delete":0.005917159763313609,"api":0.005917159763313609,"files":0.005917159763313609,"async":0.005917159763313609,"delete_file":0.005917159763313609,"try":0.005917159763313609,"upload_path":0.005917159763313609,"processed_path":0.005917159763313609,"deleted":0.005917159763313609,"false":0.005917159763313609,"none":0.005917159763313609,"exists":0.005917159763313609,"unlink":0.005917159763313609,"elif":0.005917159763313609,"not":0.005917159763313609,"found":0.005917159763313609,"message":0.005917159763313609,"successfully":0.005917159763313609,"class":0.005917159763313609,"textreplacerequest":0.005917159763313609,"basemodel":0.005917159763313609,"text_replacements":0.005917159763313609,"dict":0.005917159763313609,"image_replacements":0.005917159763313609,"image_id":0.005917159763313609,"-":0.005917159763313609,"uploaded_image_url":0.005917159763313609,"config":0.005917159763313609,"optional":0.005917159763313609,"post":0.005917159763313609,"replace-text-images":0.005917159763313609,"replace_text_images":0.005917159763313609,"request":0.005917159763313609,"image_url":0.005917159763313609,"items":0.005917159763313609,"image_filename":0.005917159763313609,"split":0.005917159763313609,"-1":0.005917159763313609,"image_path":0.005917159763313609,"with":0.005917159763313609,"image":0.005917159763313609,"open":0.005917159763313609,"replacement_image":0.005917159763313609,"copy":0.005917159763313609,"replacer":0.005917159763313609,"textimagereplacer":0.005917159763313609,"result_image":0.005917159763313609,"create_composite_image":0.005917159763313609,"jpg":0.005917159763313609,"output_filename":0.005917159763313609,"text_replaced_":0.005917159763313609,"uuid":0.005917159763313609,"uuid4":0.005917159763313609,"hex":0.005917159763313609,"output_path":0.005917159763313609,"save_as_jpg":0.005917159763313609,"text":0.005917159763313609,"and":0.005917159763313609,"images":0.005917159763313609,"replaced":0.005917159763313609,"using":0.005917159763313609,"template-based":0.005917159763313609,"approach":0.005917159763313609,"processed_url":0.005917159763313609,"replacement":0.005917159763313609,"create-tourism-layout":0.005917159763313609,"create_tourism_layout":0.005917159763313609,"locations":0.005917159763313609,"image_urls":0.005917159763313609,"img":0.005917159763313609,"no":0.005917159763313609,"valid":0.005917159763313609,"layout_image":0.005917159763313609,"tourism_layout_":0.005917159763313609,"tourism":0.005917159763313609,"layout":0.005917159763313609,"creation":0.005917159763313609,"template-config":0.005917159763313609,"get_template_config":0.005917159763313609,"create_template_config":0.005917159763313609,"__name__":0.005917159763313609,"__main__":0.005917159763313609,"import":0.005917159763313609,"uvicorn":0.005917159763313609,"run":0.005917159763313609,"host":0.005917159763313609,"port":0.005917159763313609,"reload":0.005917159763313609},"7":{"0":0.022222222222222223,"1":0.022222222222222223,"2":0.022222222222222223,"3":0.022222222222222223,"4":0.022222222222222223,"5":0.022222222222222223,"6":0.022222222222222223,"7":0.022222222222222223,"10":0.022222222222222223,"13":0.022222222222222223,"21":0.022222222222222223,"23":0.022222222222222223,"24":0.022222222222222223,"26":0.022222222222222223,"27":0.022222222222222223,"31":0.022222222222222223,"104":0.022222222222222223,"2025":0.022222222222222223,"note":0.022222222222222223,"title":0.022222222222222223,"requirements":0.022222222222222223,"metadata":0.022222222222222223,"created":0.022222222222222223,"08":0.022222222222222223,"01":0.022222222222222223,"07":0.022222222222222223,"modified":0.022222222222222223,"09":0.022222222222222223,"block":0.022222222222222223,"content":0.022222222222222223,"fastapi":0.022222222222222223,"uvicorn":0.022222222222222223,"standard":0.022222222222222223,"python-multipart":0.022222222222222223,"pillow":0.022222222222222223,"pydantic":0.022222222222222223,"python-jose":0.022222222222222223,"cryptography":0.022222222222222223,"passlib":0.022222222222222223,"bcrypt":0.022222222222222223,"aiofiles":0.022222222222222223,"numpy":0.022222222222222223,"scikit-image":0.022222222222222223,"scipy":0.022222222222222223,"requests":0.022222222222222223}},"embeddingModel":{"1":{"copilot-plus-small":1},"2":{"copilot-plus-small":1},"3":{"copilot-plus-small":1},"4":{"copilot-plus-small":1},"5":{"copilot-plus-small":1},"6":{"copilot-plus-small":1},"7":{"copilot-plus-small":1}},"tags":{},"extension":{"1":{"md":1},"2":{"md":1},"3":{"md":1},"4":{"md":1},"5":{"md":1},"6":{"md":1},"7":{"md":1}}},"tokenOccurrences":{"id":{"00f7a17a58ce641031276f183b3a5f2f":1,"e0da47551e90934057bad285d1ba8181":1,"69a44dc01c5ffd62a5b69fd0397f869f":1,"e656845f32042b038bd5cdfd675b4c06":1,"6fd9eb7813fbe3b992f1acb925e8c8e6":1,"f54a470b21c322a6e380d7e3753c5706":1,"1db65c2d42406ac6cb5c1b9c63dc269d":1},"title":{"main":6,"requirements":1},"path":{"source":7,"image-editor":7,"main":6,"md":7,"requirements":1},"content":{"0":7,"1":6,"2":2,"3":3,"4":1,"5":1,"6":2,"7":1,"8":3,"10":1,"13":1,"21":1,"23":1,"24":2,"26":1,"27":7,"30":1,"31":1,"46":6,"72":2,"95":2,"104":1,"255":2,"400":3,"404":3,"500":3,"600":1,"800":1,"1024":2,"2025":7,"3600":1,"8000":1,"note":7,"title":7,"main":6,"metadata":7,"created":7,"08":7,"01":7,"07":7,"modified":7,"block":7,"content":7,"from":3,"fastapi":2,"import":4,"file":3,"uploadfile":1,"httpexception":4,"middleware":1,"cors":1,"corsmiddleware":1,"responses":1,"fileresponse":3,"streamingresponse":2,"staticfiles":1,"pydantic":2,"basemodel":4,"typing":1,"dict":4,"any":1,"optional":2,"list":5,"os":3,"uuid":3,"pil":3,"image":6,"imagefilter":2,"imageenhance":1,"imageops":2,"asyncio":4,"pathlib":1,"path":5,"aiofiles":2,"zipfile":2,"io":2,"xml":2,"etree":1,"elementtree":1,"as":6,"et":1,"re":2,"text_image_replacer":1,"textimagereplacer":2,"create_template_config":2,"app":4,"editor":2,"api":4,"version":2,"add_middleware":1,"allow_origins":1,"allow_credentials":1,"true":4,"allow_methods":1,"allow_headers":1,"upload_dir":3,"uploads":4,"processed_dir":4,"processed":6,"mkdir":1,"exist_ok":1,"mount":1,"directory":1,"name":2,"class":4,"imageresponse":1,"url":1,"str":6,"filename":5,"imagebatchresponse":2,"original_url":2,"processed_url":3,"original_filename":2,"processed_filename":2,"status":3,"error_message":2,"none":5,"operationrequest":2,"id":2,"operation":3,"parameters":3,"float":3,"enablecrop":2,"bool":1,"processbatchrequest":1,"image_urls":2,"operations":2,"output_format":1,"original":2,"get":6,"async":6,"def":6,"root":1,"return":6,"message":3,"post":4,"upload":2,"response_model":2,"upload_image":1,"if":6,"not":6,"content_type":1,"or":1,"startswith":1,"raise":5,"status_code":4,"detail":4,"invalid":1,"type":1,"please":1,"an":1,"file_extension":1,"split":2,"-1":2,"else":4,"jpg":2,"unique_filename":1,"f":6,"uuid4":3,"file_path":4,"with":6,"open":5,"wb":1,"await":4,"read":3,"write":3,"upload-batch":1,"upload_batch_images":1,"files":4,"uploaded_files":1,"for":5,"in":6,"images":3,"only":1,"append":3,"process-batch":1,"process_batch_images":1,"request":4,"results":2,"image_url":3,"try":6,"input_path":3,"error":3,"continue":2,"exists":4,"found":4,"original_extension":1,"lower":3,"output_extension":3,"elif":5,"png":2,"webp":1,"output_filename":3,"processed_":1,"output_path":5,"process_multiple_operations_async":2,"cont'd":5,"success":1,"except":5,"exception":5,"e":5,"valueerror":1,"process_sync":3,"original_image":2,"copy":3,"dpi":2,"dpi_value":1,"int":4,"operation_params":1,"resize":1,"and":5,"is":1,"crop":1,"apply_pil_operation":2,"exif":2,"getexif":2,"icc_profile":2,"info":3,"'icc_profile'":2,"endswith":2,"'":3,"png'":2,"save_format":2,"'png'":2,"jpg'":2,"jpeg'":2,"'jpeg'":2,"webp'":2,"'webp'":2,"save_kwargs":2,"'format'":2,"'dpi'":2,"'optimize'":2,"'quality'":2,"'compress_level'":2,"'exif'":2,"icc":2,"save":2,"print":3,"warning":3,"could":2,"preserve_image_metadata_and_save":2,"cpu":3,"loop":3,"get_event_loop":3,"run_in_executor":3,"-":4,"width":1,"height":1,"fit":1,"resampling":1,"lanczos":1,"rotate":1,"angle":1,"resample":1,"bicubic":1,"expand":1,"blur":1,"sigma":1,"filter":1,"gaussianblur":1,"radius":1,"grayscale":1,"l":1,"rgb":2,"convert":2,"'l'":1,"'rgb'":2,"sepia":1,"new":3,"size":5,"sepia_pixels":1,"pixel":1,"getdata":1,"r":2,"min":1,"g":1,"b":3,"putdata":1,"overlay":1,"opacity":2,"alpha":2,"overlay_with_alpha":2,"'rgba'":2,"rgba":1,"mode":1,"image_rgba":1,"alpha_composite":1,"pass":1,"original_path":1,"processed_image":1,"profile":1,"saved":1,"preservation":1,"preserve":1,"format":1,"compress_level":1,"quality":1,"optimize":1,"process_image_async":1,"successfully":4,"get_image":1,"media_type":2,"get_uploaded_image":1,"download-batch":1,"download_batch_images":1,"filenames":1,"zip":1,"no":3,"specified":1,"zip_buffer":1,"bytesio":1,"w":2,"zip_deflated":1,"zip_file":1,"seek":1,"application":1,"headers":1,"content-disposition":1,"attachment":1,"processed_images":1,"delete":2,"clear-files":1,"clear_files":1,"upload_files":1,"glob":2,"processed_files":1,"is_file":2,"unlink":2,"cleared":1,"deleted_uploads":1,"len":3,"deleted_processed":1,"total_deleted":1,"failed":3,"to":2,"clear":1,"clear-old-files":1,"clear_old_files":1,"hours":1,"time":1,"current_time":1,"cutoff_time":1,"stat":2,"st_mtime":2,"old":1,"older":1,"than":1,"storage-info":1,"get_storage_info":1,"get_directory_size":1,"total_size":1,"file_count":1,"st_size":2,"upload_size":1,"upload_count":1,"processed_size":1,"processed_count":1,"format_size":3,"size_bytes":2,"size_names":2,"kb":2,"mb":2,"gb":2,"i":2,"while":2,"1f":2,"size_formatted":3,"total":1,"storage":1,"health":1,"health_check":1,"datetime":3,"healthy":1,"timestamp":1,"now":1,"isoformat":1,"api_name":1,"svg":2,"svggeneraterequest":2,"prefecture":2,"color":2,"ff6277":2,"svgresponse":2,"svg_content":2,"prefectures":1,"get_prefectures":1,"generate-svg":1,"generate_svg":1,"svg_path":1,"assets":1,"map":1,"template":1,"encoding":1,"utf-8":1,"reset_ids":1,"-2":1,"prefecture_id":1,"pattern1":1,"f'id":1,"fill":1,"search":1,"replacement1":1,"1fill":1,"fff":1,"sub":1,"prefecture_ids":1,"pattern":1,"matched":1,"updated":1,"existing":1,"attribute":1,"style":1,"pattern2":1,"replacement2":1,"1style":1,"2fill":1,"pattern3":1,"replacement3":1,"added":1,"japan_map_":1,"_":1,"hex":2,"generated":1,"generation":1,"get_svg":1,"fileinfo":2,"created_at":2,"file_type":2,"filelistresponse":2,"total_count":2,"get_file_list":1,"get_file_info":1,"fromtimestamp":1,"strftime":1,"y-":1,"m-":1,"d":1,"h":1,"m":1,"s":1,"sort":1,"key":1,"lambda":1,"x":1,"reverse":1,"delete_file":1,"upload_path":1,"processed_path":1,"deleted":1,"false":1,"textreplacerequest":1,"text_replacements":1,"image_replacements":1,"image_id":1,"uploaded_image_url":1,"config":1,"replace-text-images":1,"replace_text_images":1,"items":1,"image_filename":1,"image_path":1,"replacement_image":1,"replacer":1,"result_image":1,"create_composite_image":1,"text_replaced_":1,"save_as_jpg":1,"text":1,"replaced":1,"using":1,"template-based":1,"approach":1,"replacement":1,"create-tourism-layout":1,"create_tourism_layout":1,"locations":1,"img":1,"valid":1,"layout_image":1,"tourism_layout_":1,"tourism":1,"layout":1,"creation":1,"template-config":1,"get_template_config":1,"__name__":1,"__main__":1,"uvicorn":2,"run":1,"host":1,"port":1,"reload":1,"requirements":1,"09":1,"standard":1,"python-multipart":1,"pillow":1,"python-jose":1,"cryptography":1,"passlib":1,"bcrypt":1,"numpy":1,"scikit-image":1,"scipy":1,"requests":1},"embeddingModel":{"copilot-plus-small":7},"tags":{},"extension":{"md":7}},"avgFieldLength":{"id":1,"title":1,"path":4,"content":143.57142857142858,"embeddingModel":1,"tags":0,"extension":1},"fieldLengths":{"id":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1},"title":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1},"path":{"1":4,"2":4,"3":4,"4":4,"5":4,"6":4,"7":4},"content":{"1":170,"2":167,"3":120,"4":174,"5":160,"6":169,"7":45},"embeddingModel":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1},"tags":{},"extension":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1}}},"docs":{"docs":{"1":{"title":"main","path":"source/image-editor/main.md","embeddingModel":"copilot-plus-small","ctime":1753978047916,"mtime":1753978126206,"tags":[],"extension":"md","metadata":{"created":"2025/08/01 01:07:27","modified":"2025/08/01 01:08:46"},"id":"00f7a17a58ce641031276f183b3a5f2f","content":"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 01:07:27\",\"modified\":\"2025/08/01 01:08:46\"}\n\nNOTE BLOCK CONTENT:\n\n```\nfrom fastapi import FastAPI, File, UploadFile, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.responses import FileResponse, StreamingResponse\nfrom fastapi.staticfiles import StaticFiles\nfrom pydantic import BaseModel\nfrom typing import Dict, Any, Optional, List\nimport os\nimport uuid\nfrom PIL import Image, ImageFilter, ImageEnhance, ImageOps\nimport asyncio\nfrom pathlib import Path\nimport aiofiles\nimport zipfile\nimport io\nimport xml.etree.ElementTree as ET\nimport re\nfrom text_image_replacer import TextImageReplacer, create_template_config\n\napp = FastAPI(title=\"Image Editor API\", version=\"1.0.0\")\n\n# CORS設定\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# アップロードディレクトリの設定\nUPLOAD_DIR = Path(\"uploads\")\nPROCESSED_DIR = Path(\"processed\")\nUPLOAD_DIR.mkdir(exist_ok=True)\nPROCESSED_DIR.mkdir(exist_ok=True)\n\n# 静的ファイル配信の設定\napp.mount(\"/uploads\", StaticFiles(directory=UPLOAD_DIR), name=\"uploads\")\napp.mount(\"/processed\", StaticFiles(directory=PROCESSED_DIR), name=\"processed\")\n\n\nclass ImageResponse(BaseModel):\n    url: str\n    filename: str\n\n\nclass ImageBatchResponse(BaseModel):\n    original_url: str\n    processed_url: str\n    original_filename: str\n    processed_filename: str\n    status: str\n    error_message: Optional[str] = None\n\n\nclass OperationRequest(BaseModel):\n    id: str\n    operation: str\n    parameters: Dict[str, float]\n    enableCrop: Optional[bool] = None\n\n\nclass ProcessBatchRequest(BaseModel):\n    image_urls: List[str]\n    operations: List[OperationRequest]\n    output_format: Optional[str] = \"original\"\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Image Editor API\", \"version\": \"1.0.0\"}\n\n\n@app.post(\"/api/upload\", response_model=ImageResponse)\nasync def upload_image(file: UploadFile = File(...)):\n    \"\"\"画像ファイルをアップロードする\"\"\"\n    if not file.content_type or not file.content_type.startswith(\"image/\"):\n        raise HTTPException(\n            status_code=400, detail=\"Invalid file type. Please upload an image.\"\n        )\n\n    # ファイル名を生成\n    file_extension = file.filename.split(\".\")[-1] if file.filename else \"jpg\"\n    unique_filename = f\"{uuid.uuid4()}.{file_extension}\"\n    file_path = UPLOAD_DIR / unique_filename\n\n    # ファイルを保存\n    async with aiofiles.open(file_path, \"wb\") as f:\n        content = await file.read()\n        await f.write(content)\n\n    return ImageResponse(url=f\"/uploads/{unique_filename}\", filename=unique_filename)\n\n\n@app.post(\"/api/upload-batch\", response_model=List[ImageResponse])\nasync def upload_batch_images(files: List[UploadFile] = File(...)):\n    \"\"\"複数の画像ファイルを一括アップロードする\"\"\"\n    uploaded_files = []\n\n    for file in files:\n        if not file.content_type or not file.content_type.startswith(\"image/\"):\n            raise HTTPException(\n                status_code=400,\n                detail=f\"Invalid file type: {file.filename}. Please upload images only.\",\n            )\n\n        # ファイル名を生成\n        file_extension = file.filename.split(\".\")[-1] if file.filename else \"jpg\"\n        unique_filename = f\"{uuid.uuid4()}.{file_extension}\"\n        file_path = UPLOAD_DIR / unique_filename\n\n        # ファイルを保存\n        async with aiofiles.open(file_path, \"wb\") as f:\n            content = await file.read()\n            await f.write(content)\n\n        uploaded_files.append(\n            ImageResponse(url=f\"/uploads/{unique_filename}\", filename=unique_filename)\n        )\n\n    return uploaded_files\n\n\n@app.post(\"/api/process-batch\", response_model=List[ImageBatchResponse])\nasync def process_batch_images(request: ProcessBatchRequest):\n    \"\"\"複数の画像を一括処理する\"\"\"\n    results = []\n\n    for image_url in request.image_urls:\n        try:\n            # アップロード画像のパスを取得\n            if image_url.startswith(\"/uploads/\") or \"/uploads/\" in image_url:\n                filename = image_url.split(\"/\")[-1]\n                input_path = UPLOAD_DIR / filename\n            else:\n                results.append(\n                    ImageBatchResponse(\n                        original_url=image_url,\n                        processed_url=\"\",\n                        original_filename=filename,\n                        processed_filename=\"\",\n                        status=\"error\",\n                        error_message=\"Invalid image URL\",\n                    )\n                )\n                continue\n\n            if not input_path.exists():\n                results.append(\n                    ImageBatchResponse(\n                        original_url=image_url,\n                        processed_url=\"\",\n                        original_filename=filename,\n                        processed_filename=\"\",\n                        status=\"error\",\n                        error_message=\"Image not found\",\n                    )\n                )\n                continue\n\n            # 出力ファイル名を生成（元の拡張子を保持または指定された形式に変換）\n            original_extension = filename.split(\".\")[-1].lower()\n\n            if request.output_format == \"original\":\n                output_extension = original_extension\n            elif request.output_format == \"png\":\n                output_extension = \"png\"\n            elif request.output_format == \"jpg\":\n                output_extension = \"jpg\"\n            elif request.output_format == \"webp\":\n                output_extension = \"webp\"\n            else:\n                output_extension = original_extension\n\n            output_filename = f\"processed_{uuid.uuid4()}.{output_extension}\"\n            output_path = PROCESSED_DIR / output_filename\n\n            # 複数の画像処理を順番に実行\n            await process_multiple_operations_async(\n                input_path, output_path, request.operations\n            )","embedding":[-0.04144112,0.021647425,-0.09002322,0.025366118,0.031478588,-0.020028744,-0.052639972,-0.038023569,0.048282541,0.126901269,0.062347688,0.078780033,0.046676036,-0.151461154,0.03442863,0.056906458,0.065701269,-0.054087188,0.037504315,0.052207194,0.006970169,-0.076829344,-0.071243636,-0.018201832,0.088970259,-0.008832168,-0.033613354,-0.104212672,0.0457251,0.080146089,-0.082633771,-0.109696753,-0.060220186,0.02754884,-0.019019842,0.096917935,0.113510557,0.079488061,0.119981676,-0.088824183,-0.12626645,0.081860952,-0.020711064,-0.039680108,0.088457607,-0.020655623,-0.042637426,0.042617079,-0.000419346,-0.030670803,-0.086932451,0.049109679,-0.071447089,0.095416591,0.027317764,0.021065589,0.026588148,0.040233567,0.094066687,0.050111756,-0.07478179,0.016748276,-0.01791795,0.07624574,0.001742932,0.060008235,-0.000152426,0.043651201,0.04912528,0.006610579,-0.037010726,0.012467847,0.049342595,0.012311922,-0.00399586,0.110349938,0.076827966,-0.014031912,-0.03602992,-0.100569025,-0.117956758,0.004220852,0.026284158,-0.060412448,-0.011369299,-0.0221362,0.023998173,-0.025845226,0.055941686,-0.057552319,0.017771354,0.053938329,-0.017342286,-0.128464147,0.02010984,0.0438716,0.01064925,0.002348577,0.01979373,-0.010694738,0.062718943,0.057253346,-0.065047294,0.022145301,0.017539429,-0.057940327,0.051395401,0.031113299,0.09752126,0.024020029,0.158309266,0.032648083,-0.153112993,-0.036981326,0.002022787,0.016926534,-0.000008156,0.020739153,-0.004917796,-0.048649114,-0.020436106,-0.034554917,-0.065204002,0.053315554,-0.171004862,-0.004598115,-0.126931995,0.111328483,0.008244338,0.028567424,0.010808774,0.001765742,0.011893435,0.033018481,0.004807167,0.055343948,0.028370734,0.005971735,0.014113446,-0.052804265,-0.039615735,0.057806034,0.035903636,0.001557557,0.1347588,0.077532828,0.074617483,-0.028529713,0.075775847,-0.087932952,0.015525843,0.091460995,0.030039754,-0.045508832,-0.076805554,0.039096549,0.01330819,-0.09813907,-0.106934592,0.049039863,0.029852968,0.040505461,0.01251098,-0.069035016,0.028902853,-0.01530293,-0.056223337,-0.04326681,-0.026352828,0.052586712,-0.027510939,-0.060973629,-0.037025813,0.072986782,-0.133850724,-0.03369939,0.120299429,0.059151843,-0.040318061,-0.067012481,0.03436153,-0.104925029,0.089326695,0.090397276,0.059362829,0.058193166,-0.050351981,-0.040593561,-0.032319613,0.195293218,0.008604855,0.024027204,-0.040775638,0.030678906,0.038425684,-0.063380383,0.162254795,0.016049163,-0.078586981,-0.008414919,0.175283715,-0.08420708,0.048711147,-0.020450136,0.055578999,0.039476354,0.064263798,-0.080472939,-0.009044652,-0.070873983,0.046566334,-0.017156888,0.092711665,-0.042642973,0.060646739,-0.082680598,0.014880064,-0.009230125,-0.035810884,0.053196996,-0.001411523,-0.000847499,-0.028132476,0.021685921,-0.018075008,0.016673721,-0.014221757,0.015205421,0.020080585,-0.014670968,-0.028201658,-0.058365092,-0.023107052,-0.017585022,-0.025498446,0.052768741,-0.085228615,-0.003020504,-0.024483021,0.006742505,-0.090655386,-0.013292069,-0.018015591,-0.073929712,0.031441979,0.181250274,0.045809321,-0.016288241,0.086125001,-0.069595188,-0.005070231,-0.006995244,0.062729172,-0.006300742,-0.039578307,-0.006826848],"created_at":1753978175868,"nchars":5817},"2":{"title":"main","path":"source/image-editor/main.md","embeddingModel":"copilot-plus-small","ctime":1753978047916,"mtime":1753978126206,"tags":[],"extension":"md","metadata":{"created":"2025/08/01 01:07:27","modified":"2025/08/01 01:08:46"},"id":"e0da47551e90934057bad285d1ba8181","content":"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 01:07:27\",\"modified\":\"2025/08/01 01:08:46\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) # 複数の画像処理を順番に実行\n            await process_multiple_operations_async(\n                input_path, output_path, request.operations\n            )\n\n            results.append(\n                ImageBatchResponse(\n                    original_url=image_url,\n                    processed_url=f\"/processed/{output_filename}\",\n                    original_filename=filename,\n                    processed_filename=output_filename,\n                    status=\"success\",\n                    error_message=None,\n                )\n            )\n\n        except Exception as e:\n            results.append(\n                ImageBatchResponse(\n                    original_url=image_url,\n                    processed_url=\"\",\n                    original_filename=filename,\n                    processed_filename=\"\",\n                    status=\"error\",\n                    error_message=str(e),\n                )\n            )\n\n    return results\n\n\nasync def process_multiple_operations_async(\n    input_path: Path, output_path: Path, operations: List[OperationRequest]\n):\n    \"\"\"複数の操作を順番に処理する（PILのみ使用、メモリ内で処理して品質劣化を最小化）\"\"\"\n    if not operations:\n        raise ValueError(\"操作が指定されていません\")\n\n    def process_sync():\n        # PILで画像を読み込み（カラープロファイル保持）\n        with Image.open(str(input_path)) as original_image:\n            # 画像をコピーして処理用にする\n            image = original_image.copy()\n\n            # DPI情報を保持\n            dpi_value = None\n            for operation in operations:\n                if operation.operation == \"dpi\":\n                    dpi_value = int(operation.parameters.get(\"dpi\", 72))\n\n            # 全ての操作を順番に適用\n            for operation in operations:\n                operation_params = operation.parameters.copy()\n                if operation.operation == \"resize\" and operation.enableCrop is not None:\n                    operation_params[\"crop\"] = 1 if operation.enableCrop else 0\n\n                image = apply_pil_operation(image, operation.operation, operation_params)\n\n            # DPI情報がある場合は保存時に適用\n            if dpi_value:\n                # メタデータ保持保存（DPI情報付き）\n                try:\n                    # 元画像からメタデータを取得\n                    exif = original_image.getexif()\n                    icc_profile = original_image.info.get('icc_profile')\n\n                    # 保存形式を決定\n                    output_extension = str(output_path).lower()\n                    if output_extension.endswith('.png'):\n                        save_format = 'PNG'\n                    elif output_extension.endswith(('.jpg', '.jpeg')):\n                        save_format = 'JPEG'\n                    elif output_extension.endswith('.webp'):\n                        save_format = 'WEBP'\n                    else:\n                        save_format = 'JPEG'\n\n                    save_kwargs = {\n                        'format': save_format,\n                        'dpi': (dpi_value, dpi_value),\n                        'optimize': True\n                    }\n\n                    if save_format in ['JPEG', 'WEBP']:\n                        save_kwargs['quality'] = 95\n                    elif save_format == 'PNG':\n                        save_kwargs['compress_level'] = 1\n\n                    # EXIFデータがある場合は保持\n                    if exif and save_format in ['JPEG', 'WEBP']:\n                        save_kwargs['exif'] = exif\n\n                    # ICCプロファイルがある場合は保持\n                    if icc_profile:\n                        save_kwargs['icc_profile'] = icc_profile\n\n                    image.save(str(output_path), **save_kwargs)\n\n                except Exception as e:\n                    print(f\"Warning: Could not save with DPI metadata: {e}\")\n                    preserve_image_metadata_and_save(input_path, output_path, image)\n            else:\n                # 通常の保存（メタデータ保持）\n                preserve_image_metadata_and_save(input_path, output_path, image)\n\n    # CPU集約的な処理を別スレッドで実行\n    loop = asyncio.get_event_loop()\n    await loop.run_in_executor(None, process_sync)\n\n\ndef apply_pil_operation(image: Image.Image, operation: str, parameters: Dict[str, float]) -> Image.Image:\n    \"\"\"PILによる単一の画像処理操作を適用する（メモリ内処理）\"\"\"\n    if operation == \"resize\":\n        width = int(parameters.get(\"width\", 800))\n        height = int(parameters.get(\"height\", 600))\n        crop = int(parameters.get(\"crop\", 0))  # 0=通常リサイズ, 1=トリミング付きリサイズ\n\n        if crop == 1:\n            # トリミング付きリサイズ：アスペクト比を維持してトリミング\n            # ImageOps.fitを使用してスマートトリミング\n            image = ImageOps.fit(image, (width, height), Image.Resampling.LANCZOS)\n        else:\n            # 通常のリサイズ：アスペクト比を無視して指定サイズに変更\n            image = image.resize((width, height), Image.Resampling.LANCZOS)\n\n    elif operation == \"rotate\":\n        angle = parameters.get(\"angle\", 0)\n        # 高品質な回転処理\n        image = image.rotate(angle, resample=Image.Resampling.BICUBIC, expand=True)\n\n    elif operation == \"blur\":\n        sigma = parameters.get(\"sigma\", 1.0)\n        # ガウシアンブラーを適用\n        image = image.filter(ImageFilter.GaussianBlur(radius=sigma))\n\n    elif operation == \"grayscale\":\n        # グレースケール変換（Lモードに変換してからRGBに戻す）\n        grayscale = image.convert('L')\n        image = grayscale.convert('RGB')\n\n    elif operation == \"sepia\":\n        # セピア効果をPILで実装\n        # まずグレースケールに変換\n        grayscale = image.convert('L')\n\n        # セピア色調を作成\n        sepia = Image.new('RGB', image.size)\n        sepia_pixels = []\n\n        for pixel in grayscale.getdata():\n            # セピア色計算\n            r = min(255, int(pixel * 1.0))\n            g = min(255, int(pixel * 0.8))\n            b = min(255, int(pixel * 0.6))\n            sepia_pixels.append((r, g, b))\n\n        sepia.putdata(sepia_pixels)\n        image = sepia\n\n    elif operation == \"overlay\":\n        # 透過黒オーバーレイを適用\n        opacity = parameters.get(\"opacity\", 0.3)  # デフォルト30%\n\n        # アルファ値を計算して黒いオーバーレイを作成\n        alpha = int(opacity * 255)\n        overlay_with_alpha = Image.new('RGBA', image.size, (0, 0, 0, alpha))","embedding":[-0.045819446,0.042375308,-0.045161538,0.029083608,0.034039889,-0.03880354,-0.055486053,-0.022431633,0.027734745,0.100730464,0.120738357,0.031718697,0.053731717,-0.116894722,-0.012277906,0.046998091,0.119145431,-0.060278516,0.006369993,0.042652451,0.028593844,-0.019875597,-0.055298451,-0.007060635,0.033671524,-0.042571638,-0.007202437,-0.111661948,0.086935133,0.042385846,-0.120584711,-0.080464326,-0.075999528,-0.02342689,-0.021575166,0.163822308,0.099210791,0.135265231,0.090924628,-0.083574563,-0.081239693,0.101723149,0.007528569,-0.021859914,0.075940825,-0.077041611,-0.003496724,0.003228341,0.015849149,-0.078113094,-0.019530315,0.035710007,-0.042936526,0.038236562,-0.021016527,0.016683426,0.001143921,0.017559467,0.102745421,0.025606008,-0.05253366,-0.016263371,0.000348548,0.08743754,0.005207488,0.054063983,0.013806428,0.001814235,-0.03046947,-0.0101544,-0.019913707,0.08207427,0.065318242,0.065164223,0.030614542,0.111569487,0.07590057,-0.024659196,0.018968396,-0.088748753,-0.125473723,0.002150003,-0.019765129,-0.015122505,-0.053097848,0.020258259,-0.044782192,-0.080870844,0.062686153,-0.077034116,0.044661697,0.039120514,-0.049392253,-0.095187388,0.049418937,0.025529996,0.052672088,-0.004965999,0.022929367,-0.033645108,0.022786388,0.017856216,-0.037717957,-0.011339271,0.014878855,-0.07709074,0.087428756,-0.016330633,0.108963042,-0.003101675,0.096232973,0.07596866,-0.11802645,-0.002414667,-0.042113855,-0.01159108,0.007374342,-0.008627615,-0.014362518,-0.082443245,-0.020560347,-0.062624395,-0.073966771,0.120718665,-0.179669142,-0.006465054,-0.071971431,0.040435221,0.011458914,0.002540229,-0.034923729,0.008210965,-0.038414087,0.076692618,-0.012567456,0.036367562,-0.001200246,0.014919696,-0.067885555,-0.018797383,-0.045326784,-0.017986784,0.058845166,-0.010232546,0.150316134,0.11275544,0.06233263,-0.041108932,0.091214009,-0.066712804,-0.000849393,0.052467443,0.029012533,0.003927094,-0.110367782,0.065228842,-0.038525734,-0.072713509,-0.071776465,0.031430662,-0.004093254,-0.033078089,0.021678958,-0.047802094,0.031963147,0.032352224,-0.062219948,-0.030546693,0.019976363,0.014994903,-0.097727425,-0.032735404,-0.109525837,0.032575663,-0.125623778,-0.006015486,0.068442568,0.122171268,-0.10742382,-0.037562829,0.027932242,-0.076968692,0.087549888,0.098440245,0.018881729,0.0557785,-0.011804917,-0.042847384,0.010189308,0.194987193,-0.057781603,-0.002750749,-0.001794829,0.056628685,0.008078357,-0.054117993,0.180828139,0.00553764,-0.013478902,0.031980995,0.118256859,-0.067018777,0.058336657,-0.014820795,0.030808331,0.072997257,0.08622285,-0.064078584,-0.006164246,-0.048066232,0.053338293,-0.027813176,0.113765888,-0.010315159,0.029542731,-0.050277051,0.124694414,0.01261234,-0.040589117,0.089853346,-0.017528519,-0.063594304,-0.044789892,0.013541446,0.017174331,0.010537153,-0.027654314,0.036754299,0.020893332,-0.070849992,-0.018653363,-0.037776351,-0.000387424,0.033700544,0.022399703,0.021223988,-0.05464749,-0.057144877,0.005821985,-0.011468084,-0.06722261,-0.065716125,-0.041255809,-0.095727965,0.036675345,0.157943293,0.037128769,-0.039006472,0.064153686,-0.129494801,-0.021122547,-0.034449525,0.053345639,-0.051195562,-0.030959094,0.007199928],"created_at":1753978175873,"nchars":6035},"3":{"title":"main","path":"source/image-editor/main.md","embeddingModel":"copilot-plus-small","ctime":1753978047916,"mtime":1753978126206,"tags":[],"extension":"md","metadata":{"created":"2025/08/01 01:07:27","modified":"2025/08/01 01:08:46"},"id":"69a44dc01c5ffd62a5b69fd0397f869f","content":"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 01:07:27\",\"modified\":\"2025/08/01 01:08:46\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) # アルファ値を計算して黒いオーバーレイを作成\n        alpha = int(opacity * 255)\n        overlay_with_alpha = Image.new('RGBA', image.size, (0, 0, 0, alpha))\n\n        # 元画像をRGBAに変換\n        if image.mode != 'RGBA':\n            image_rgba = image.convert('RGBA')\n        else:\n            image_rgba = image\n\n        # 合成\n        image = Image.alpha_composite(image_rgba, overlay_with_alpha)\n\n        # 必要に応じてRGBに戻す\n        if image.mode == 'RGBA':\n            image = image.convert('RGB')\n\n\n\n    elif operation == \"dpi\":\n        # DPI変更（画像自体は変更せず、メタデータのみ変更）\n        # DPI情報は保存時に設定されるため、ここでは何もしない\n        pass\n\n    return image\n\n\ndef preserve_image_metadata_and_save(original_path: Path, output_path: Path, processed_image: Image.Image):\n    \"\"\"元画像のメタデータ（EXIF、カラープロファイル）を保持して保存\"\"\"\n    try:\n        # 元画像を開いてメタデータを取得\n        with Image.open(str(original_path)) as original:\n            # EXIFデータを取得\n            exif = original.getexif()\n\n            # カラープロファイル（ICC Profile）を取得\n            icc_profile = original.info.get('icc_profile')\n\n            # その他のメタデータも取得\n            info = original.info.copy()\n\n            # 保存形式を決定\n            output_extension = str(output_path).lower()\n            if output_extension.endswith('.png'):\n                save_format = 'PNG'\n            elif output_extension.endswith(('.jpg', '.jpeg')):\n                save_format = 'JPEG'\n            elif output_extension.endswith('.webp'):\n                save_format = 'WEBP'\n            else:\n                save_format = 'JPEG'\n\n            # 保存オプション\n            save_kwargs = {\n                'format': save_format,\n                'optimize': True\n            }\n\n            # 品質設定\n            if save_format in ['JPEG', 'WEBP']:\n                save_kwargs['quality'] = 95\n            elif save_format == 'PNG':\n                save_kwargs['compress_level'] = 1\n\n            # EXIFデータがある場合は保持\n            if exif and save_format in ['JPEG', 'WEBP']:\n                save_kwargs['exif'] = exif\n\n            # ICCプロファイルがある場合は保持\n            if icc_profile:\n                save_kwargs['icc_profile'] = icc_profile\n\n            # DPI情報がある場合は保持\n            if 'dpi' in info:\n                save_kwargs['dpi'] = info['dpi']\n\n            # 保存\n            processed_image.save(str(output_path), **save_kwargs)\n            print(f\"Saved with metadata preservation: {output_path}\")\n\n    except Exception as e:\n        print(f\"Warning: Could not preserve metadata: {e}\")\n        # メタデータ保持に失敗した場合は通常の保存を行う\n        if str(output_path).lower().endswith('.png'):\n            processed_image.save(str(output_path), format='PNG', compress_level=1)\n        elif str(output_path).lower().endswith(('.jpg', '.jpeg')):\n            processed_image.save(str(output_path), format='JPEG', quality=95, optimize=True)\n        elif str(output_path).lower().endswith('.webp'):\n            processed_image.save(str(output_path), format='WEBP', quality=95, optimize=True)\n        else:\n            processed_image.save(str(output_path), format='JPEG', quality=95, optimize=True)\n\n\nasync def process_image_async(\n    input_path: Path, output_path: Path, operation: str, parameters: Dict[str, float]\n):\n    \"\"\"画像処理を非同期で実行（PILのみ使用）\"\"\"\n    def process_sync():\n        # PILで画像を読み込み（カラープロファイル保持）\n        with Image.open(str(input_path)) as original_image:\n            # 画像をコピーして処理用にする\n            image = original_image.copy()\n\n            print(f\"Original image mode: {image.mode}\")\n            print(f\"Original image size: {image.size}\")\n\n            # 操作を適用\n            image = apply_pil_operation(image, operation, parameters)\n\n            print(f\"Processed image mode: {image.mode}\")\n            print(f\"Processed image size: {image.size}\")\n\n            # DPI処理の場合は特別な保存処理\n            if operation == \"dpi\":\n                dpi = int(parameters.get(\"dpi\", 72))\n                try:\n                    # 元画像からメタデータを取得\n                    exif = original_image.getexif()\n                    icc_profile = original_image.info.get('icc_profile')\n\n                    # 保存形式を決定\n                    output_extension = str(output_path).lower()\n                    if output_extension.endswith('.png'):\n                        save_format = 'PNG'\n                    elif output_extension.endswith(('.jpg', '.jpeg')):\n                        save_format = 'JPEG'\n                    elif output_extension.endswith('.webp'):\n                        save_format = 'WEBP'\n                    else:\n                        save_format = 'PNG'\n\n                    save_kwargs = {\n                        'format': save_format,\n                        'dpi': (dpi, dpi),\n                        'optimize': True\n                    }\n\n                    if save_format in ['JPEG', 'WEBP']:\n                        save_kwargs['quality'] = 95\n                    elif save_format == 'PNG':\n                        save_kwargs['compress_level'] = 1\n\n                    # EXIFデータがある場合は保持\n                    if exif and save_format in ['JPEG', 'WEBP']:\n                        save_kwargs['exif'] = exif\n\n                    # ICCプロファイルがある場合は保持\n                    if icc_profile:\n                        save_kwargs['icc_profile'] = icc_profile\n\n                    image.save(str(output_path), **save_kwargs)\n                    print(f\"Successfully saved with DPI {dpi}: {output_path}\")\n\n                except Exception as e:\n                    print(f\"Warning: Could not save with DPI metadata: {e}\")\n                    preserve_image_metadata_and_save(input_path, output_path, image)\n            else:\n                # 通常の保存（メタデータ保持）\n                preserve_image_metadata_and_save(input_path, output_path, image)\n\n    # CPU集約的な処理を別スレッドで実行\n    loop = asyncio.get_event_loop()\n    await loop.run_in_executor(None, process_sync)","embedding":[-0.063226782,0.068499923,-0.021274319,0.004282081,0.043853953,-0.038137123,-0.038257256,-0.018580182,0.013812855,0.092629924,0.111261249,0.057381928,0.068216123,-0.132553875,0.005285921,0.05182486,0.106745735,-0.035992105,0.012589286,0.040084984,0.028995745,-0.038721647,-0.081202351,-0.026276149,-0.001114695,-0.038674992,-0.015020932,-0.096259303,0.077179089,0.078586653,-0.154806554,-0.08813788,-0.046229772,-0.056302499,0.010321507,0.138204753,0.108232148,0.126564085,0.05192925,-0.077026986,-0.074988969,0.058689699,0.015590127,-0.026419006,0.063558869,-0.075969905,0.005310697,0.030375591,-0.020205619,-0.110854059,-0.000413458,0.043569084,-0.026582414,0.04624334,-0.020284897,-0.001638309,0.004357986,0.000190653,0.09561041,0.054462764,-0.0374032,-0.023825552,-0.002988165,0.085478939,-0.023049122,0.045167748,0.002048059,-0.025907755,-0.029324308,-0.020179555,-0.019599449,0.077913672,0.0848919,0.03825406,-0.012826242,0.090305999,0.056530066,-0.020018939,0.020336604,-0.064666271,-0.106382824,0.022168675,-0.055461537,-0.002519668,-0.045540597,0.030785363,-0.01349344,-0.080101527,0.042402558,-0.063050441,0.032070469,0.03285725,-0.078101628,-0.106688596,0.063535124,0.025578823,0.054062329,-0.030398602,0.032417536,-0.041449055,-0.02716879,-0.001668646,-0.041147735,-0.030590598,-0.023133047,-0.074469902,0.103055969,0.002730506,0.111362256,-0.044632126,0.095984571,0.064345077,-0.13136439,-0.018639106,-0.044010621,0.017479498,0.029648723,-0.031833027,-0.003097759,-0.025372896,-0.039470259,-0.059198067,-0.101361103,0.147481143,-0.174310192,-0.010690857,-0.083289556,0.043484591,-0.012719695,0.002244773,-0.021729363,0.002614503,0.002029324,0.074069656,0.008677427,0.029127419,-0.003515119,0.002693691,-0.071683548,-0.030091647,-0.046143416,-0.012202876,0.054862931,0.012951404,0.13740167,0.138211116,0.082496688,-0.077221327,0.096394643,-0.064188495,0.012764639,0.038921699,0.027673047,-0.002669726,-0.122755565,0.045947552,-0.033767968,-0.100455634,-0.069245756,0.03782082,0.036750324,-0.05456087,-0.004611727,-0.032331802,0.037480831,0.034826059,-0.049684919,-0.053005427,0.028432114,0.020827806,-0.090741843,0.005946062,-0.132912144,0.046492733,-0.085151926,-0.033461444,0.084768943,0.107848622,-0.119687214,-0.03409766,0.003457148,-0.053996488,0.091456689,0.077964492,0.013817258,0.033471972,-0.013985271,-0.06618648,0.02005001,0.210335076,-0.00597231,-0.00642564,0.009843525,0.047444224,0.015033652,-0.08874777,0.164910659,0.015193511,0.013845072,0.04233684,0.084968731,-0.092248075,0.069237493,-0.014445744,0.017195074,0.080421694,0.033419032,-0.091565154,-0.055621892,-0.060135603,0.042607456,-0.017395297,0.086445674,-0.014550474,0.003755157,-0.04075782,0.119667977,-0.010467742,-0.070489191,0.076210052,-0.021111416,-0.064996555,-0.020553,-0.002611619,0.003620456,-0.008807572,-0.021477671,0.018625058,-0.023476388,-0.072678462,-0.00308063,-0.029177446,-0.008792082,0.031534068,0.032374941,0.038522955,-0.053759288,-0.025646552,-0.023516003,0.000691696,-0.041386768,-0.043431088,-0.001773185,-0.130748913,0.025826326,0.168013051,0.011835685,-0.021176035,0.067814134,-0.142363027,0.002129972,-0.024205061,0.034521319,-0.028228024,-0.026206173,-0.019764036],"created_at":1753978175875,"nchars":5890},"4":{"title":"main","path":"source/image-editor/main.md","embeddingModel":"copilot-plus-small","ctime":1753978047916,"mtime":1753978126206,"tags":[],"extension":"md","metadata":{"created":"2025/08/01 01:07:27","modified":"2025/08/01 01:08:46"},"id":"e656845f32042b038bd5cdfd675b4c06","content":"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 01:07:27\",\"modified\":\"2025/08/01 01:08:46\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) # CPU集約的な処理を別スレッドで実行\n    loop = asyncio.get_event_loop()\n    await loop.run_in_executor(None, process_sync)\n\n\n@app.get(\"/api/images/{filename}\")\nasync def get_image(filename: str):\n    \"\"\"処理済み画像を取得する\"\"\"\n    file_path = PROCESSED_DIR / filename\n    if not file_path.exists():\n        raise HTTPException(status_code=404, detail=\"Image not found\")\n\n    return FileResponse(path=file_path, media_type=\"image/png\", filename=filename)\n\n\n@app.get(\"/api/uploads/{filename}\")\nasync def get_uploaded_image(filename: str):\n    \"\"\"アップロード済み画像を取得する\"\"\"\n    file_path = UPLOAD_DIR / filename\n    if not file_path.exists():\n        raise HTTPException(status_code=404, detail=\"Image not found\")\n\n    return FileResponse(path=file_path, media_type=\"image/png\", filename=filename)\n\n\n@app.post(\"/api/download-batch\")\nasync def download_batch_images(filenames: List[str]):\n    \"\"\"複数の処理済み画像をZIPファイルでダウンロードする\"\"\"\n    if not filenames:\n        raise HTTPException(status_code=400, detail=\"No files specified\")\n\n    # ZIPファイルをメモリに作成\n    zip_buffer = io.BytesIO()\n\n    with zipfile.ZipFile(zip_buffer, \"w\", zipfile.ZIP_DEFLATED) as zip_file:\n        for filename in filenames:\n            file_path = PROCESSED_DIR / filename\n            if file_path.exists():\n                zip_file.write(file_path, filename)\n\n    zip_buffer.seek(0)\n\n    return StreamingResponse(\n        io.BytesIO(zip_buffer.read()),\n        media_type=\"application/zip\",\n        headers={\"Content-Disposition\": \"attachment; filename=processed_images.zip\"},\n    )\n\n\n@app.delete(\"/api/clear-files\")\nasync def clear_files():\n    \"\"\"アップロードファイルと処理済みファイルをクリアする\"\"\"\n    try:\n        upload_files = list(UPLOAD_DIR.glob(\"*\"))\n        processed_files = list(PROCESSED_DIR.glob(\"*\"))\n\n        # アップロードファイルを削除\n        for file_path in upload_files:\n            if file_path.is_file():\n                file_path.unlink()\n\n        # 処理済みファイルを削除\n        for file_path in processed_files:\n            if file_path.is_file():\n                file_path.unlink()\n\n        return {\n            \"message\": \"Files cleared successfully\",\n            \"deleted_uploads\": len(upload_files),\n            \"deleted_processed\": len(processed_files),\n            \"total_deleted\": len(upload_files) + len(processed_files),\n        }\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to clear files: {str(e)}\")\n\n\n@app.delete(\"/api/clear-old-files\")\nasync def clear_old_files(hours: int = 24):\n    \"\"\"指定時間以上古いファイルを削除する\"\"\"\n    try:\n        import time\n\n        current_time = time.time()\n        cutoff_time = current_time - (hours * 3600)  # 指定時間前\n\n        upload_files = list(UPLOAD_DIR.glob(\"*\"))\n        processed_files = list(PROCESSED_DIR.glob(\"*\"))\n\n        deleted_uploads = 0\n        deleted_processed = 0\n\n        # 古いアップロードファイルを削除\n        for file_path in upload_files:\n            if file_path.is_file() and file_path.stat().st_mtime < cutoff_time:\n                file_path.unlink()\n                deleted_uploads += 1\n\n        # 古い処理済みファイルを削除\n        for file_path in processed_files:\n            if file_path.is_file() and file_path.stat().st_mtime < cutoff_time:\n                file_path.unlink()\n                deleted_processed += 1\n\n        return {\n            \"message\": f\"Old files (older than {hours} hours) cleared successfully\",\n            \"deleted_uploads\": deleted_uploads,\n            \"deleted_processed\": deleted_processed,\n            \"total_deleted\": deleted_uploads + deleted_processed,\n        }\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to clear old files: {str(e)}\"\n        )\n\n\n@app.get(\"/api/storage-info\")\nasync def get_storage_info():\n    \"\"\"ストレージ使用量情報を取得する\"\"\"\n    try:\n        import os\n\n        def get_directory_size(path):\n            total_size = 0\n            file_count = 0\n            if path.exists():\n                for file_path in path.glob(\"*\"):\n                    if file_path.is_file():\n                        total_size += file_path.stat().st_size\n                        file_count += 1\n            return total_size, file_count\n\n        upload_size, upload_count = get_directory_size(UPLOAD_DIR)\n        processed_size, processed_count = get_directory_size(PROCESSED_DIR)\n\n        def format_size(size_bytes):\n            if size_bytes == 0:\n                return \"0 B\"\n            size_names = [\"B\", \"KB\", \"MB\", \"GB\"]\n            i = 0\n            while size_bytes >= 1024 and i < len(size_names) - 1:\n                size_bytes /= 1024\n                i += 1\n            return f\"{size_bytes:.1f} {size_names[i]}\"\n\n        return {\n            \"uploads\": {\n                \"size\": upload_size,\n                \"size_formatted\": format_size(upload_size),\n                \"file_count\": upload_count,\n            },\n            \"processed\": {\n                \"size\": processed_size,\n                \"size_formatted\": format_size(processed_size),\n                \"file_count\": processed_count,\n            },\n            \"total\": {\n                \"size\": upload_size + processed_size,\n                \"size_formatted\": format_size(upload_size + processed_size),\n                \"file_count\": upload_count + processed_count,\n            },\n        }\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to get storage info: {str(e)}\"\n        )\n\n\n@app.get(\"/health\")\nasync def health_check():\n    \"\"\"ヘルスチェック\"\"\"\n    from datetime import datetime\n\n    return {\n        \"status\": \"healthy\",\n        \"timestamp\": datetime.now().isoformat(),\n        \"version\": \"1.0.0\",\n        \"api_name\": \"Image Editor API\",\n    }\n\n\n# SVG処理用のクラス\nclass SVGGenerateRequest(BaseModel):\n    prefecture: str\n    color: str = \"#ff6277\"\n\n\nclass SVGResponse(BaseModel):\n    svg_content: str\n    filename: str","embedding":[-0.010623483,0.025874214,-0.027837733,0.025572453,0.003872596,-0.087976955,-0.024112483,-0.026729258,0.057576932,0.115161024,0.089774765,0.087060407,0.070495896,-0.180118412,0.008597058,0.042921808,0.016763726,-0.021574697,0.008530614,0.026712121,0.020523246,-0.107481204,-0.086044922,-0.067148313,0.067229457,-0.031538732,-0.041110244,-0.109752253,-0.020181743,0.055774331,-0.121684134,-0.108436406,-0.05198177,-0.044805806,0.003158928,0.121126972,0.127555951,0.060645565,0.071752302,-0.12112806,-0.085657537,0.039766133,0.010830006,0.001518286,0.050343163,-0.019513482,-0.058178622,-0.0353081,-0.041660838,-0.070302241,-0.066148259,0.009893545,-0.029380487,0.079905294,-0.058339372,0.079779387,-0.012179196,0.038335651,0.076581329,0.051001094,-0.022385933,0.012381264,-0.046960168,0.071946383,-0.019573966,0.03989017,-0.019178085,0.017607531,0.036946334,-0.024200629,-0.051436067,-0.047544241,0.042885911,0.011302011,0.008893089,0.072617859,0.03821623,0.005019839,-0.008779863,-0.093825832,-0.089735903,0.027435651,0.008420208,-0.043554939,-0.056701358,-0.073053576,0.070269555,-0.017358651,0.063301034,-0.081608653,0.013426167,0.039682504,-0.013662073,-0.117530867,0.001113047,0.024724271,0.051635027,-0.038945395,0.065898217,-0.029007001,0.040817481,0.086288579,-0.123357512,0.015892988,-0.004643247,-0.083758779,0.073285133,0.018302642,0.116538182,0.027414136,0.131419852,0.060215328,-0.117987268,-0.062250026,0.008159915,0.043126646,0.047470842,-0.002983777,0.01040999,-0.034141712,-0.048223671,0.036363445,-0.071093418,0.110527053,-0.137554646,-0.008363985,-0.05906653,0.057110056,0.060163762,0.005656343,0.009770035,-0.030324286,0.015956193,0.078723505,-0.012733019,0.046278983,0.078250825,-0.000018424,0.046788685,-0.085873514,0.016698251,0.069577917,0.039002642,0.009194407,0.114597194,0.058216602,0.070203751,-0.010017756,0.068338528,-0.038523555,-0.029218458,0.007735997,-0.004561512,-0.041198507,-0.097001277,0.000913758,-0.023407929,-0.108575545,-0.059479494,0.050819166,-0.000953671,0.024109641,0.018956721,-0.086468987,0.016261319,0.004072712,-0.055214837,-0.046734206,0.001613197,0.020251216,-0.051870186,-0.068263225,-0.074936576,0.036177568,-0.096552014,-0.053536799,0.140962645,0.088055968,-0.043761358,-0.014867296,0.011744176,-0.063718542,0.105130903,0.165611565,0.058722112,0.033517927,-0.0935717,-0.06507244,-0.051498067,0.219283983,0.011374462,0.009865926,-0.053762719,0.026283959,0.038450472,-0.06675376,0.129788667,-0.006499237,-0.085472777,-0.000992373,0.106125601,-0.100112617,0.048116524,0.022102572,0.063588038,0.037818823,0.080590531,-0.045580801,0.009985523,-0.054461688,0.049671564,0.001986763,0.117045008,-0.033205666,0.022745721,-0.098852299,0.017940983,-0.032819103,-0.037201118,0.086621903,-0.013029062,-0.081688017,-0.02870344,0.043315433,-0.050327081,-0.029658291,0.004764223,-0.018262811,0.005943777,-0.035231646,0.012495679,-0.057069231,-0.000031046,0.033260133,-0.030664545,0.020850675,-0.022715511,-0.025511501,-0.071955711,0.066919051,-0.073838897,0.02859316,-0.036487594,-0.090074934,0.001781288,0.176646262,0.055295669,-0.013038848,0.106733456,-0.056564946,0.024655586,0.000013117,0.037108302,-0.036151148,-0.036006909,0.023894681],"created_at":1753978175877,"nchars":5930},"5":{"title":"main","path":"source/image-editor/main.md","embeddingModel":"copilot-plus-small","ctime":1753978047916,"mtime":1753978126206,"tags":[],"extension":"md","metadata":{"created":"2025/08/01 01:07:27","modified":"2025/08/01 01:08:46"},"id":"6fd9eb7813fbe3b992f1acb925e8c8e6","content":"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 01:07:27\",\"modified\":\"2025/08/01 01:08:46\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) # SVG処理用のクラス\nclass SVGGenerateRequest(BaseModel):\n    prefecture: str\n    color: str = \"#ff6277\"\n\n\nclass SVGResponse(BaseModel):\n    svg_content: str\n    filename: str\n\n\n# 都道府県リスト（SVGのid属性と対応）\nPREFECTURES = [\n    \"北海道\",\n    \"青森\",\n    \"岩手\",\n    \"宮城\",\n    \"秋田\",\n    \"山形\",\n    \"福島\",\n    \"茨城\",\n    \"栃木\",\n    \"群馬\",\n    \"埼玉\",\n    \"千葉\",\n    \"東京\",\n    \"神奈川\",\n    \"新潟\",\n    \"富山\",\n    \"石川\",\n    \"福井\",\n    \"山梨\",\n    \"長野\",\n    \"岐阜\",\n    \"静岡\",\n    \"愛知\",\n    \"三重\",\n    \"滋賀\",\n    \"京都\",\n    \"大阪\",\n    \"兵庫\",\n    \"奈良\",\n    \"和歌山\",\n    \"鳥取\",\n    \"島根\",\n    \"岡山\",\n    \"広島\",\n    \"山口\",\n    \"徳島\",\n    \"香川\",\n    \"愛媛\",\n    \"高知\",\n    \"福岡\",\n    \"佐賀\",\n    \"長崎\",\n    \"熊本\",\n    \"大分\",\n    \"宮崎\",\n    \"鹿児島\",\n    \"沖縄\",\n]\n\n\n@app.get(\"/api/prefectures\")\nasync def get_prefectures():\n    \"\"\"都道府県リストを取得する\"\"\"\n    return {\"prefectures\": PREFECTURES}\n\n\n@app.post(\"/api/generate-svg\", response_model=SVGResponse)\nasync def generate_svg(request: SVGGenerateRequest):\n    \"\"\"選択された都道府県をハイライトしたSVGを生成する\"\"\"\n    try:\n        svg_path = Path(\"assets/map.svg\")\n\n        if not svg_path.exists():\n            raise HTTPException(status_code=404, detail=\"SVG template not found\")\n\n        # SVGファイルを読み込み\n        with open(svg_path, \"r\", encoding=\"utf-8\") as f:\n            svg_content = f.read()\n\n        # まず、すべての都道府県の色を白色にリセット\n        for prefecture in PREFECTURES:\n            # 特別処理：SVG内のid属性と都道府県名のマッピング\n            if prefecture == \"徳島\":\n                reset_ids = [\"徳島\"]\n            elif prefecture == \"香川\":\n                reset_ids = [\"徳島-2\"]\n            else:\n                reset_ids = [prefecture]\n\n            for prefecture_id in reset_ids:\n                # 既存の色を白色にリセット\n                pattern1 = f'id=\"{prefecture_id}\"([^>]*?)fill=[\"\\'](#[^\"\\']*)[\"\\']'\n                if re.search(pattern1, svg_content):\n                    replacement1 = f'id=\"{prefecture_id}\"\\\\1fill=\"#fff\"'\n                    svg_content = re.sub(pattern1, replacement1, svg_content)\n\n        # 選択された都道府県の色を変更\n        if request.prefecture in PREFECTURES:\n            # 特別処理：SVG内のid属性と都道府県名のマッピング\n            if request.prefecture == \"徳島\":\n                prefecture_ids = [\"徳島\"]\n            elif request.prefecture == \"香川\":\n                # SVGファイル内では香川県がid=\"徳島-2\"で表現されている\n                prefecture_ids = [\"徳島-2\"]\n            else:\n                prefecture_ids = [request.prefecture]\n\n            for prefecture_id in prefecture_ids:\n                # より堅牢なSVG色変更処理\n                # ケース1: 既存のfill属性がある場合（fill=\"#色\" または fill='#色'）\n                pattern1 = f'id=\"{prefecture_id}\"([^>]*?)fill=[\"\\'](#[^\"\\']*)[\"\\']'\n                if re.search(pattern1, svg_content):\n                    replacement1 = f'id=\"{prefecture_id}\"\\\\1fill=\"{request.color}\"'\n                    svg_content = re.sub(pattern1, replacement1, svg_content)\n                    print(\n                        f\"Pattern 1 matched for {prefecture_id}: Updated existing fill attribute\"\n                    )\n                    continue\n\n                # ケース2: style属性内にfillがある場合\n                pattern2 = (\n                    f'id=\"{prefecture_id}\"([^>]*?)style=\"([^\"]*?)fill:[^;\"]*([^\"]*)\"'\n                )\n                if re.search(pattern2, svg_content):\n                    replacement2 = (\n                        f'id=\"{prefecture_id}\"\\\\1style=\"\\\\2fill:{request.color}\\\\3\"'\n                    )\n                    svg_content = re.sub(pattern2, replacement2, svg_content)\n                    print(\n                        f\"Pattern 2 matched for {prefecture_id}: Updated fill in style attribute\"\n                    )\n                    continue\n\n                # ケース3: fill属性がない場合は追加\n                pattern3 = f'id=\"{prefecture_id}\"([^>]*?)(?=[ >])'\n                if re.search(pattern3, svg_content):\n                    replacement3 = f'id=\"{prefecture_id}\"\\\\1 fill=\"{request.color}\"'\n                    svg_content = re.sub(pattern3, replacement3, svg_content)\n                    print(\n                        f\"Pattern 3 matched for {prefecture_id}: Added new fill attribute\"\n                    )\n                else:\n                    print(f\"Warning: No pattern matched for {prefecture_id}\")\n\n        # ファイル名を生成\n        filename = f\"japan_map_{request.prefecture}_{uuid.uuid4().hex[:8]}.svg\"\n        output_path = PROCESSED_DIR / filename\n\n        # SVGファイルを保存\n        with open(output_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(svg_content)\n\n        print(f\"SVG generated successfully: {filename}\")\n        return SVGResponse(svg_content=svg_content, filename=filename)\n\n    except Exception as e:\n        print(f\"SVG generation error: {str(e)}\")\n        raise HTTPException(status_code=500, detail=f\"SVG generation failed: {str(e)}\")\n\n\n@app.get(\"/api/svg/{filename}\")\nasync def get_svg(filename: str):\n    \"\"\"生成されたSVGファイルを取得する\"\"\"\n    file_path = PROCESSED_DIR / filename\n    if not file_path.exists():\n        raise HTTPException(status_code=404, detail=\"SVG file not found\")\n\n    return FileResponse(path=file_path, media_type=\"image/svg+xml\", filename=filename)\n\n\nclass FileInfo(BaseModel):\n    filename: str\n    size: int\n    size_formatted: str\n    created_at: str\n    file_type: str\n\n\nclass FileListResponse(BaseModel):\n    uploads: List[FileInfo]\n    processed: List[FileInfo]\n    total_count: int\n\n\n@app.get(\"/api/files/list\", response_model=FileListResponse)\nasync def get_file_list():\n    \"\"\"ファイル一覧を取得する\"\"\"\n    try:\n        import os\n        from datetime import datetime\n\n        def format_size(size_bytes):\n            if size_bytes == 0:\n                return \"0 B\"\n            size_names = [\"B\", \"KB\", \"MB\", \"GB\"]\n            i = 0\n            while size_bytes >= 1024 and i < len(size_names) - 1:\n                size_bytes /= 1024\n                i += 1\n            return f\"{size_bytes:.1f} {size_names[i]}\"","embedding":[0.018456878,0.04843834,-0.0452822,0.00885925,0.080751263,-0.046870202,0.024338949,-0.010794572,0.048958153,0.094284616,0.096631862,0.134841979,0.021478731,-0.171735182,0.035345357,0.000408374,0.011487549,-0.002567602,-0.008404944,0.022767738,0.033740532,-0.117993794,-0.057441127,-0.036326945,0.019631436,-0.025307184,-0.024648981,-0.041201074,-0.013182481,0.094124764,-0.141716927,-0.14093335,-0.054090764,-0.049800348,0.013368626,0.082003146,0.123408526,0.064454958,0.072605751,-0.056236416,-0.108704545,0.07093966,0.025660014,0.060551412,0.027319124,-0.055753343,-0.00727938,0.04231308,-0.019245025,-0.06984321,-0.01037435,0.010907619,-0.003936575,0.068238571,0.016882859,0.058247827,-0.018773057,0.045183398,0.064346403,0.067370497,-0.065190047,-0.006556293,-0.000609705,0.136273578,-0.036976647,0.039757781,-0.075390153,0.042980552,0.048477266,-0.046143953,-0.071400031,0.030451907,0.055430587,0.007422637,0.016874319,0.102050595,0.093736395,-0.016792115,-0.056943256,-0.087452039,-0.117500603,0.028889986,-0.027522219,-0.065566666,-0.028267989,-0.029362252,0.094812296,-0.022927888,0.054678977,-0.03048696,-0.00362668,0.021318363,-0.009334864,-0.142492861,-0.024146881,0.025652995,0.008006231,-0.020584453,-0.019165976,-0.015690373,0.055337619,0.020212267,-0.08807651,0.043201704,-0.006951974,-0.066315405,0.04271974,0.066964813,0.118556499,0.016941888,0.09833701,0.012548461,-0.114212736,-0.062412597,-0.045145217,0.044528957,0.034717727,-0.003837125,-0.07105571,0.000342925,-0.029513499,0.01777542,-0.079369783,0.070603848,-0.136259377,-0.023138346,-0.082618341,0.081660919,0.008798746,0.111320905,-0.041759923,-0.013511184,0.044737797,0.060792044,-0.003982918,0.036463782,0.069512457,-0.050533358,0.060532823,-0.027689658,-0.030391797,0.06032069,0.117424719,0.034156948,0.178370744,0.096246891,0.075444721,0.002296474,0.058826916,-0.053621449,-0.050841331,-0.034238555,0.030528752,-0.037425693,-0.065860152,-0.012048315,0.053408604,-0.10929358,-0.00321802,0.063852273,0.059141822,0.006541362,0.005415598,-0.055455547,-0.014927703,-0.027901394,0.018384269,-0.068215646,0.005564277,0.018189576,-0.009653607,-0.035650376,-0.071917757,0.085125886,-0.084397025,-0.054839998,0.147662058,0.052146949,-0.091473773,-0.018786812,-0.010136977,-0.090715811,0.111579761,0.132096514,-0.00347754,-0.013917515,-0.063899629,-0.029130166,-0.000352497,0.192442402,0.077164538,0.02173779,0.01396302,0.01760133,-0.000709466,-0.015514344,0.154738367,0.046686776,-0.109802887,-0.036634251,0.133403137,-0.097786807,0.039113898,-0.023613505,0.03976661,0.037086178,0.055402216,-0.056039736,-0.041023057,-0.018206164,-0.020149829,-0.016340103,0.102974005,-0.012409748,-0.008622014,-0.092229016,0.072545953,0.025850471,-0.058499433,0.080292396,0.001139687,-0.015205224,-0.088255309,-0.006680694,-0.091151759,-0.019049386,0.03518704,-0.00112528,0.02556977,-0.025822457,0.001298473,-0.053828623,-0.033661541,-0.007368886,-0.008665218,0.018491458,-0.067098834,0.02066406,-0.041623857,-0.02616467,0.027506359,0.000528663,-0.026345758,-0.094982944,-0.036913887,0.152755037,0.051941108,-0.040412858,0.080250986,-0.068948343,0.037891828,-0.043677244,-0.013007291,0.005033945,-0.023810241,0.014241147],"created_at":1753978175878,"nchars":5917},"6":{"title":"main","path":"source/image-editor/main.md","embeddingModel":"copilot-plus-small","ctime":1753978047916,"mtime":1753978126206,"tags":[],"extension":"md","metadata":{"created":"2025/08/01 01:07:27","modified":"2025/08/01 01:08:46"},"id":"f54a470b21c322a6e380d7e3753c5706","content":"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 01:07:27\",\"modified\":\"2025/08/01 01:08:46\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) def get_file_info(file_path, file_type):\n            stat = file_path.stat()\n            return FileInfo(\n                filename=file_path.name,\n                size=stat.st_size,\n                size_formatted=format_size(stat.st_size),\n                created_at=datetime.fromtimestamp(stat.st_mtime).strftime(\n                    \"%Y-%m-%d %H:%M:%S\"\n                ),\n                file_type=file_type,\n            )\n\n        uploads = []\n        processed = []\n\n        # アップロード済みファイルを取得\n        for file_path in UPLOAD_DIR.glob(\"*\"):\n            if file_path.is_file():\n                uploads.append(get_file_info(file_path, \"upload\"))\n\n        # 処理済みファイルを取得\n        for file_path in PROCESSED_DIR.glob(\"*\"):\n            if file_path.is_file():\n                processed.append(get_file_info(file_path, \"processed\"))\n\n        # 作成日時順でソート（新しいものから）\n        uploads.sort(key=lambda x: x.created_at, reverse=True)\n        processed.sort(key=lambda x: x.created_at, reverse=True)\n\n        return FileListResponse(\n            uploads=uploads,\n            processed=processed,\n            total_count=len(uploads) + len(processed),\n        )\n\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to get file list: {str(e)}\"\n        )\n\n\n@app.delete(\"/api/files/{filename}\")\nasync def delete_file(filename: str):\n    \"\"\"個別ファイルを削除する\"\"\"\n    try:\n        upload_path = UPLOAD_DIR / filename\n        processed_path = PROCESSED_DIR / filename\n\n        deleted = False\n        file_type = None\n\n        if upload_path.exists():\n            upload_path.unlink()\n            deleted = True\n            file_type = \"upload\"\n        elif processed_path.exists():\n            processed_path.unlink()\n            deleted = True\n            file_type = \"processed\"\n\n        if not deleted:\n            raise HTTPException(status_code=404, detail=\"File not found\")\n\n        return {\n            \"message\": \"File deleted successfully\",\n            \"filename\": filename,\n            \"file_type\": file_type,\n        }\n\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to delete file: {str(e)}\")\n\n\n# 文字・画像置換用のリクエストモデル\nclass TextReplaceRequest(BaseModel):\n    text_replacements: Dict[str, str]\n    image_replacements: Dict[str, str]  # image_id -> uploaded_image_url\n    config: Optional[Dict] = None\n\n\n@app.post(\"/api/replace-text-images\")\nasync def replace_text_images(request: TextReplaceRequest):\n    \"\"\"テンプレート画像の文字と画像を置換する - 新しいテンプレートベースアプローチ\"\"\"\n    try:\n        # 置換用画像を読み込み\n        image_replacements = {}\n        for image_id, image_url in request.image_replacements.items():\n            image_filename = image_url.split(\"/\")[-1]\n            image_path = UPLOAD_DIR / image_filename\n\n            if image_path.exists():\n                with Image.open(image_path) as replacement_image:\n                    image_replacements[image_id] = replacement_image.copy()\n\n        # 新しいテンプレートベース合成処理\n        replacer = TextImageReplacer()\n        result_image = replacer.create_composite_image(\n            request.text_replacements,\n            image_replacements\n        )\n\n        # 結果を保存（JPG形式）\n        output_filename = f\"text_replaced_{uuid.uuid4().hex[:8]}.jpg\"\n        output_path = PROCESSED_DIR / output_filename\n        replacer.save_as_jpg(result_image, str(output_path))\n\n        return {\n            \"message\": \"Text and images replaced successfully using template-based approach\",\n            \"processed_url\": f\"/processed/{output_filename}\",\n            \"filename\": output_filename\n        }\n\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Text replacement failed: {str(e)}\")\n\n\n@app.post(\"/api/create-tourism-layout\")\nasync def create_tourism_layout(\n    title: str,\n    locations: List[str],\n    image_urls: List[str]\n):\n    \"\"\"観光パンフレット風のレイアウトを作成する\"\"\"\n    try:\n        # アップロードされた画像を読み込み\n        images = []\n        for image_url in image_urls:\n            image_filename = image_url.split(\"/\")[-1]\n            image_path = UPLOAD_DIR / image_filename\n\n            if image_path.exists():\n                with Image.open(image_path) as img:\n                    images.append(img.copy())\n\n        if not images:\n            raise HTTPException(status_code=400, detail=\"No valid images found\")\n\n        # パンフレットレイアウトを作成\n        replacer = TextImageReplacer()\n        layout_image = replacer.create_tourism_layout(title, locations, images)\n\n        # 結果を保存（JPG形式）\n        output_filename = f\"tourism_layout_{uuid.uuid4().hex[:8]}.jpg\"\n        output_path = PROCESSED_DIR / output_filename\n        replacer.save_as_jpg(layout_image, str(output_path))\n\n        return {\n            \"message\": \"Tourism layout created successfully\",\n            \"processed_url\": f\"/processed/{output_filename}\",\n            \"filename\": output_filename\n        }\n\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Layout creation failed: {str(e)}\")\n\n\n@app.get(\"/api/template-config\")\nasync def get_template_config():\n    \"\"\"テンプレート設定を取得する\"\"\"\n    return create_template_config()\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000, reload=True)\n\n```","embedding":[-0.010476745,0.023034368,-0.048605975,-0.006179549,0.043471396,-0.067705363,-0.030446608,-0.025318321,0.052405834,0.120064594,0.067770153,0.058267344,-0.015761811,-0.13621673,0.043190736,0.038197782,0.005330896,-0.046803892,-0.03338477,0.013376952,0.03354241,-0.048536763,-0.102314092,-0.035154674,0.02138399,0.019585621,-0.088189729,-0.095362097,0.021398954,0.051606022,-0.095214181,-0.097029693,-0.067908578,-0.015433526,-0.006808509,0.069709748,0.093422607,0.057339609,0.104524523,-0.137294248,-0.075491875,0.086225398,-0.000988083,0.004004879,0.048113313,-0.034911677,-0.052480061,-0.007836882,-0.011066584,-0.084889613,-0.107211113,0.044213783,-0.046111695,0.089817435,-0.018784754,0.012379882,0.003198085,0.050586291,0.064083025,0.023965036,-0.041183583,0.009257801,-0.023461228,0.084006779,-0.037155036,0.049317461,-0.024632899,0.019116363,0.047065277,-0.023795025,-0.04759717,-0.060808782,0.017289869,-0.037053909,0.003771791,0.05410685,0.058679461,-0.012167729,-0.029354524,-0.083656274,-0.069278136,0.008639694,0.000746146,-0.050414383,-0.020935038,-0.044217821,0.063150078,-0.015335911,0.054211926,-0.04180887,0.017005514,0.049313072,-0.034273617,-0.069242902,-0.009369639,0.076762304,0.005685616,-0.027395381,0.004209937,-0.047891937,0.051020518,0.110818222,-0.085611172,0.018245636,-0.009195312,-0.053026017,0.06606853,0.029445762,0.086740941,0.051202007,0.100163028,0.088613935,-0.176436484,-0.083378732,-0.027115572,0.016158117,0.058362301,-0.004465261,0.013714213,-0.01077404,-0.049898248,0.023246735,-0.03711728,0.069595963,-0.220619708,0.011157457,-0.076334409,0.079910904,0.053923823,0.04805227,0.004099906,-0.052941013,0.037099086,0.098524421,0.045442436,0.042281996,0.012028921,0.013211329,0.033814557,-0.072923481,-0.023745442,0.083614193,0.043057054,-0.001914808,0.143886775,0.060949653,0.110806324,-0.000880642,0.081277654,-0.025346149,-0.059326183,0.015325291,0.05346781,-0.03844228,-0.084402479,0.037072655,-0.02276043,-0.093159318,-0.062307972,0.086741589,0.030590124,-0.018993029,-0.015451575,-0.0582183,0.012621558,-0.011823265,-0.012962258,-0.081809416,-0.053253811,0.011069491,-0.019108599,-0.066312172,-0.025725635,0.132333621,-0.101112939,-0.082410648,0.134846568,0.086327545,-0.029773774,-0.049219619,0.043557424,-0.054419901,0.115054466,0.164857596,0.049768563,0.048632413,-0.050605707,-0.016030405,-0.00945908,0.231476992,0.037568077,0.024677802,-0.060665667,0.026467133,0.01058334,-0.026794223,0.132476345,0.005116913,-0.083012745,-0.03989511,0.153639674,-0.117480606,0.059829362,0.001770656,0.07381051,0.015573932,0.05942139,-0.055860933,0.009312181,-0.028855443,0.067889012,0.005148507,0.085289285,-0.005131536,0.079062618,-0.07152196,0.07960853,-0.010153253,-0.062349841,0.022816887,-0.004153824,-0.0379797,-0.057740603,-0.011898726,-0.044231798,-0.002474898,0.048397735,-0.031551074,-0.000517283,-0.079722218,-0.03018637,-0.072256804,0.018615315,0.035589769,-0.024734791,0.05626021,-0.078002557,0.011599547,-0.079707257,0.038351133,-0.026672706,-0.004353156,-0.008553453,-0.087394238,-0.005949792,0.137987539,0.076210789,-0.02508834,0.109782301,-0.002535062,0.036221638,-0.008144022,0.039656658,-0.000627492,-0.046808615,0.027517131],"created_at":1753978175880,"nchars":5349},"7":{"title":"requirements","path":"source/image-editor/requirements.md","embeddingModel":"copilot-plus-small","ctime":1753978047914,"mtime":1753978161082,"tags":[],"extension":"md","metadata":{"created":"2025/08/01 01:07:27","modified":"2025/08/01 01:09:21"},"id":"1db65c2d42406ac6cb5c1b9c63dc269d","content":"\n\nNOTE TITLE: [[requirements]]\n\nMETADATA:{\"created\":\"2025/08/01 01:07:27\",\"modified\":\"2025/08/01 01:09:21\"}\n\nNOTE BLOCK CONTENT:\n\n```\nfastapi==0.104.1\nuvicorn[standard]==0.24.0\npython-multipart==0.0.6\nPillow==10.1.0\npydantic==2.5.0\npython-jose[cryptography]==3.3.0\npasslib[bcrypt]==1.7.4\naiofiles==23.2.1\nnumpy==1.26.4\nscikit-image==0.24.0\nscipy==1.13.0\nrequests==2.31.0\n```","embedding":[0.009353527,-0.000224328,-0.074308462,-0.017293129,0.046207566,-0.009936613,0.039915223,-0.021144334,0.023025392,0.046803482,0.076085679,0.012222223,0.062915072,-0.09213452,0.038676444,0.026354454,0.013715618,-0.081861213,0.097855031,0.110147104,0.02481528,-0.057647616,-0.06761159,-0.072682194,0.081824727,-0.003052216,-0.015973639,0.036030047,0.070886016,0.041140094,-0.048567675,-0.085089087,-0.04355789,0.089863017,-0.076867536,0.093599252,0.135874599,0.057058796,0.116803989,-0.097895205,-0.119691946,-0.010208272,-0.073107891,-0.040149454,0.092772529,-0.050146401,-0.0096764,0.069738813,0.008143125,-0.066560671,-0.107614085,0.020287896,-0.075853497,0.055301994,-0.000785418,0.033108041,-0.027277483,-0.015472555,0.061893709,0.084625773,-0.030456152,-0.016568871,-0.052787624,0.07628724,0.05910974,0.059808895,0.048763357,-0.009083525,0.033588488,0.018936666,-0.028569255,0.013946696,0.04529234,0.012654547,-0.033255734,0.118530571,0.050002418,0.105204545,-0.042426512,-0.060593773,-0.024145333,0.032770395,0.044004306,-0.045951176,0.000285851,-0.024577565,0.025545191,-0.082592055,0.016585013,-0.052733298,0.085392036,0.0399248,-0.049622092,-0.18579191,0.031332247,0.084099762,0.049844194,-0.016090885,-0.000668273,-0.043629412,-0.000074635,0.074709907,0.004509368,-0.051246013,-0.030140543,-0.022748051,0.081541844,0.031272952,0.100494318,0.004344568,0.106140636,-0.02445415,-0.224916473,0.000594198,-0.022612613,-0.002114248,0.070702121,0.042833846,-0.052273043,0.036914837,0.029040156,0.014519772,-0.054582242,0.008843282,-0.165220097,-0.027623266,-0.137549788,0.114809729,-0.052471373,-0.050986134,-0.049216285,0.002701249,0.053151466,0.020266552,0.021463335,0.12718454,0.044071455,0.017786058,0.051558707,-0.070009813,-0.078426614,-0.00494363,0.04441585,-0.008053092,0.106613494,0.095411062,0.098841369,-0.001360731,0.05739858,-0.054123472,-0.019739132,0.115834266,0.01961527,-0.089121386,-0.074300952,-0.050579354,0.083752826,-0.030461051,-0.016424721,0.042173885,0.080978982,-0.019839335,-0.021350667,-0.056897137,0.032103617,0.000572874,-0.026839824,-0.107699171,-0.037420768,-0.035497338,-0.080904223,-0.035091456,-0.063922212,0.018665824,-0.117007948,-0.078974098,0.133450389,0.117263243,-0.049041141,-0.089682706,0.031084994,-0.039590582,0.077556431,0.15127492,0.041589111,0.038244378,-0.027564583,-0.006421907,-0.069524959,0.152918711,-0.007113937,0.020484513,-0.040161606,-0.048408154,0.008201255,-0.069359943,0.103853442,0.038813483,-0.045494679,-0.014935769,0.12607038,-0.059773427,0.120814055,-0.002346893,0.001036235,-0.000226611,0.052694272,-0.039875735,-0.008366395,-0.034279145,0.004536662,-0.027213672,0.064218074,-0.038273055,-0.003933914,-0.106179498,-0.015903579,-0.019344542,-0.017693589,0.116832942,-0.029864289,-0.032799259,-0.061018012,0.003235873,0.019397179,-0.016061202,0.085177824,0.029243458,-0.002816899,0.006996451,0.063665695,-0.058570817,0.003194466,-0.053703368,-0.021116991,0.079037771,-0.027918162,0.024570119,0.001592991,0.004192822,-0.070579052,-0.012276628,-0.034840968,-0.074836493,0.034968644,0.039828032,0.07525678,0.030348808,0.046454597,-0.075807929,-0.015984381,-0.043018688,0.035887919,-0.016553782,-0.015447969,-0.078612775],"created_at":1753978175881,"nchars":374}},"count":7},"sorting":{"language":"english","sortableProperties":["id","title","path","content","embeddingModel","created_at","ctime","mtime","extension"],"sortablePropertiesWithTypes":{"id":"string","title":"string","path":"string","content":"string","embeddingModel":"string","created_at":"number","ctime":"number","mtime":"number","extension":"string"},"sorts":{"id":{"docs":{"1":0,"2":4,"3":2,"4":5,"5":3,"6":6,"7":1},"orderedDocs":[[1,"00f7a17a58ce641031276f183b3a5f2f"],[7,"1db65c2d42406ac6cb5c1b9c63dc269d"],[3,"69a44dc01c5ffd62a5b69fd0397f869f"],[5,"6fd9eb7813fbe3b992f1acb925e8c8e6"],[2,"e0da47551e90934057bad285d1ba8181"],[4,"e656845f32042b038bd5cdfd675b4c06"],[6,"f54a470b21c322a6e380d7e3753c5706"]],"type":"string"},"title":{"docs":{"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":6},"orderedDocs":[[1,"main"],[2,"main"],[3,"main"],[4,"main"],[5,"main"],[6,"main"],[7,"requirements"]],"type":"string"},"path":{"docs":{"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":6},"orderedDocs":[[1,"source/image-editor/main.md"],[2,"source/image-editor/main.md"],[3,"source/image-editor/main.md"],[4,"source/image-editor/main.md"],[5,"source/image-editor/main.md"],[6,"source/image-editor/main.md"],[7,"source/image-editor/requirements.md"]],"type":"string"},"content":{"docs":{"1":5,"2":3,"3":2,"4":0,"5":1,"6":4,"7":6},"orderedDocs":[[4,"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 01:07:27\",\"modified\":\"2025/08/01 01:08:46\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) # CPU集約的な処理を別スレッドで実行\n    loop = asyncio.get_event_loop()\n    await loop.run_in_executor(None, process_sync)\n\n\n@app.get(\"/api/images/{filename}\")\nasync def get_image(filename: str):\n    \"\"\"処理済み画像を取得する\"\"\"\n    file_path = PROCESSED_DIR / filename\n    if not file_path.exists():\n        raise HTTPException(status_code=404, detail=\"Image not found\")\n\n    return FileResponse(path=file_path, media_type=\"image/png\", filename=filename)\n\n\n@app.get(\"/api/uploads/{filename}\")\nasync def get_uploaded_image(filename: str):\n    \"\"\"アップロード済み画像を取得する\"\"\"\n    file_path = UPLOAD_DIR / filename\n    if not file_path.exists():\n        raise HTTPException(status_code=404, detail=\"Image not found\")\n\n    return FileResponse(path=file_path, media_type=\"image/png\", filename=filename)\n\n\n@app.post(\"/api/download-batch\")\nasync def download_batch_images(filenames: List[str]):\n    \"\"\"複数の処理済み画像をZIPファイルでダウンロードする\"\"\"\n    if not filenames:\n        raise HTTPException(status_code=400, detail=\"No files specified\")\n\n    # ZIPファイルをメモリに作成\n    zip_buffer = io.BytesIO()\n\n    with zipfile.ZipFile(zip_buffer, \"w\", zipfile.ZIP_DEFLATED) as zip_file:\n        for filename in filenames:\n            file_path = PROCESSED_DIR / filename\n            if file_path.exists():\n                zip_file.write(file_path, filename)\n\n    zip_buffer.seek(0)\n\n    return StreamingResponse(\n        io.BytesIO(zip_buffer.read()),\n        media_type=\"application/zip\",\n        headers={\"Content-Disposition\": \"attachment; filename=processed_images.zip\"},\n    )\n\n\n@app.delete(\"/api/clear-files\")\nasync def clear_files():\n    \"\"\"アップロードファイルと処理済みファイルをクリアする\"\"\"\n    try:\n        upload_files = list(UPLOAD_DIR.glob(\"*\"))\n        processed_files = list(PROCESSED_DIR.glob(\"*\"))\n\n        # アップロードファイルを削除\n        for file_path in upload_files:\n            if file_path.is_file():\n                file_path.unlink()\n\n        # 処理済みファイルを削除\n        for file_path in processed_files:\n            if file_path.is_file():\n                file_path.unlink()\n\n        return {\n            \"message\": \"Files cleared successfully\",\n            \"deleted_uploads\": len(upload_files),\n            \"deleted_processed\": len(processed_files),\n            \"total_deleted\": len(upload_files) + len(processed_files),\n        }\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to clear files: {str(e)}\")\n\n\n@app.delete(\"/api/clear-old-files\")\nasync def clear_old_files(hours: int = 24):\n    \"\"\"指定時間以上古いファイルを削除する\"\"\"\n    try:\n        import time\n\n        current_time = time.time()\n        cutoff_time = current_time - (hours * 3600)  # 指定時間前\n\n        upload_files = list(UPLOAD_DIR.glob(\"*\"))\n        processed_files = list(PROCESSED_DIR.glob(\"*\"))\n\n        deleted_uploads = 0\n        deleted_processed = 0\n\n        # 古いアップロードファイルを削除\n        for file_path in upload_files:\n            if file_path.is_file() and file_path.stat().st_mtime < cutoff_time:\n                file_path.unlink()\n                deleted_uploads += 1\n\n        # 古い処理済みファイルを削除\n        for file_path in processed_files:\n            if file_path.is_file() and file_path.stat().st_mtime < cutoff_time:\n                file_path.unlink()\n                deleted_processed += 1\n\n        return {\n            \"message\": f\"Old files (older than {hours} hours) cleared successfully\",\n            \"deleted_uploads\": deleted_uploads,\n            \"deleted_processed\": deleted_processed,\n            \"total_deleted\": deleted_uploads + deleted_processed,\n        }\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to clear old files: {str(e)}\"\n        )\n\n\n@app.get(\"/api/storage-info\")\nasync def get_storage_info():\n    \"\"\"ストレージ使用量情報を取得する\"\"\"\n    try:\n        import os\n\n        def get_directory_size(path):\n            total_size = 0\n            file_count = 0\n            if path.exists():\n                for file_path in path.glob(\"*\"):\n                    if file_path.is_file():\n                        total_size += file_path.stat().st_size\n                        file_count += 1\n            return total_size, file_count\n\n        upload_size, upload_count = get_directory_size(UPLOAD_DIR)\n        processed_size, processed_count = get_directory_size(PROCESSED_DIR)\n\n        def format_size(size_bytes):\n            if size_bytes == 0:\n                return \"0 B\"\n            size_names = [\"B\", \"KB\", \"MB\", \"GB\"]\n            i = 0\n            while size_bytes >= 1024 and i < len(size_names) - 1:\n                size_bytes /= 1024\n                i += 1\n            return f\"{size_bytes:.1f} {size_names[i]}\"\n\n        return {\n            \"uploads\": {\n                \"size\": upload_size,\n                \"size_formatted\": format_size(upload_size),\n                \"file_count\": upload_count,\n            },\n            \"processed\": {\n                \"size\": processed_size,\n                \"size_formatted\": format_size(processed_size),\n                \"file_count\": processed_count,\n            },\n            \"total\": {\n                \"size\": upload_size + processed_size,\n                \"size_formatted\": format_size(upload_size + processed_size),\n                \"file_count\": upload_count + processed_count,\n            },\n        }\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to get storage info: {str(e)}\"\n        )\n\n\n@app.get(\"/health\")\nasync def health_check():\n    \"\"\"ヘルスチェック\"\"\"\n    from datetime import datetime\n\n    return {\n        \"status\": \"healthy\",\n        \"timestamp\": datetime.now().isoformat(),\n        \"version\": \"1.0.0\",\n        \"api_name\": \"Image Editor API\",\n    }\n\n\n# SVG処理用のクラス\nclass SVGGenerateRequest(BaseModel):\n    prefecture: str\n    color: str = \"#ff6277\"\n\n\nclass SVGResponse(BaseModel):\n    svg_content: str\n    filename: str"],[5,"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 01:07:27\",\"modified\":\"2025/08/01 01:08:46\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) # SVG処理用のクラス\nclass SVGGenerateRequest(BaseModel):\n    prefecture: str\n    color: str = \"#ff6277\"\n\n\nclass SVGResponse(BaseModel):\n    svg_content: str\n    filename: str\n\n\n# 都道府県リスト（SVGのid属性と対応）\nPREFECTURES = [\n    \"北海道\",\n    \"青森\",\n    \"岩手\",\n    \"宮城\",\n    \"秋田\",\n    \"山形\",\n    \"福島\",\n    \"茨城\",\n    \"栃木\",\n    \"群馬\",\n    \"埼玉\",\n    \"千葉\",\n    \"東京\",\n    \"神奈川\",\n    \"新潟\",\n    \"富山\",\n    \"石川\",\n    \"福井\",\n    \"山梨\",\n    \"長野\",\n    \"岐阜\",\n    \"静岡\",\n    \"愛知\",\n    \"三重\",\n    \"滋賀\",\n    \"京都\",\n    \"大阪\",\n    \"兵庫\",\n    \"奈良\",\n    \"和歌山\",\n    \"鳥取\",\n    \"島根\",\n    \"岡山\",\n    \"広島\",\n    \"山口\",\n    \"徳島\",\n    \"香川\",\n    \"愛媛\",\n    \"高知\",\n    \"福岡\",\n    \"佐賀\",\n    \"長崎\",\n    \"熊本\",\n    \"大分\",\n    \"宮崎\",\n    \"鹿児島\",\n    \"沖縄\",\n]\n\n\n@app.get(\"/api/prefectures\")\nasync def get_prefectures():\n    \"\"\"都道府県リストを取得する\"\"\"\n    return {\"prefectures\": PREFECTURES}\n\n\n@app.post(\"/api/generate-svg\", response_model=SVGResponse)\nasync def generate_svg(request: SVGGenerateRequest):\n    \"\"\"選択された都道府県をハイライトしたSVGを生成する\"\"\"\n    try:\n        svg_path = Path(\"assets/map.svg\")\n\n        if not svg_path.exists():\n            raise HTTPException(status_code=404, detail=\"SVG template not found\")\n\n        # SVGファイルを読み込み\n        with open(svg_path, \"r\", encoding=\"utf-8\") as f:\n            svg_content = f.read()\n\n        # まず、すべての都道府県の色を白色にリセット\n        for prefecture in PREFECTURES:\n            # 特別処理：SVG内のid属性と都道府県名のマッピング\n            if prefecture == \"徳島\":\n                reset_ids = [\"徳島\"]\n            elif prefecture == \"香川\":\n                reset_ids = [\"徳島-2\"]\n            else:\n                reset_ids = [prefecture]\n\n            for prefecture_id in reset_ids:\n                # 既存の色を白色にリセット\n                pattern1 = f'id=\"{prefecture_id}\"([^>]*?)fill=[\"\\'](#[^\"\\']*)[\"\\']'\n                if re.search(pattern1, svg_content):\n                    replacement1 = f'id=\"{prefecture_id}\"\\\\1fill=\"#fff\"'\n                    svg_content = re.sub(pattern1, replacement1, svg_content)\n\n        # 選択された都道府県の色を変更\n        if request.prefecture in PREFECTURES:\n            # 特別処理：SVG内のid属性と都道府県名のマッピング\n            if request.prefecture == \"徳島\":\n                prefecture_ids = [\"徳島\"]\n            elif request.prefecture == \"香川\":\n                # SVGファイル内では香川県がid=\"徳島-2\"で表現されている\n                prefecture_ids = [\"徳島-2\"]\n            else:\n                prefecture_ids = [request.prefecture]\n\n            for prefecture_id in prefecture_ids:\n                # より堅牢なSVG色変更処理\n                # ケース1: 既存のfill属性がある場合（fill=\"#色\" または fill='#色'）\n                pattern1 = f'id=\"{prefecture_id}\"([^>]*?)fill=[\"\\'](#[^\"\\']*)[\"\\']'\n                if re.search(pattern1, svg_content):\n                    replacement1 = f'id=\"{prefecture_id}\"\\\\1fill=\"{request.color}\"'\n                    svg_content = re.sub(pattern1, replacement1, svg_content)\n                    print(\n                        f\"Pattern 1 matched for {prefecture_id}: Updated existing fill attribute\"\n                    )\n                    continue\n\n                # ケース2: style属性内にfillがある場合\n                pattern2 = (\n                    f'id=\"{prefecture_id}\"([^>]*?)style=\"([^\"]*?)fill:[^;\"]*([^\"]*)\"'\n                )\n                if re.search(pattern2, svg_content):\n                    replacement2 = (\n                        f'id=\"{prefecture_id}\"\\\\1style=\"\\\\2fill:{request.color}\\\\3\"'\n                    )\n                    svg_content = re.sub(pattern2, replacement2, svg_content)\n                    print(\n                        f\"Pattern 2 matched for {prefecture_id}: Updated fill in style attribute\"\n                    )\n                    continue\n\n                # ケース3: fill属性がない場合は追加\n                pattern3 = f'id=\"{prefecture_id}\"([^>]*?)(?=[ >])'\n                if re.search(pattern3, svg_content):\n                    replacement3 = f'id=\"{prefecture_id}\"\\\\1 fill=\"{request.color}\"'\n                    svg_content = re.sub(pattern3, replacement3, svg_content)\n                    print(\n                        f\"Pattern 3 matched for {prefecture_id}: Added new fill attribute\"\n                    )\n                else:\n                    print(f\"Warning: No pattern matched for {prefecture_id}\")\n\n        # ファイル名を生成\n        filename = f\"japan_map_{request.prefecture}_{uuid.uuid4().hex[:8]}.svg\"\n        output_path = PROCESSED_DIR / filename\n\n        # SVGファイルを保存\n        with open(output_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(svg_content)\n\n        print(f\"SVG generated successfully: {filename}\")\n        return SVGResponse(svg_content=svg_content, filename=filename)\n\n    except Exception as e:\n        print(f\"SVG generation error: {str(e)}\")\n        raise HTTPException(status_code=500, detail=f\"SVG generation failed: {str(e)}\")\n\n\n@app.get(\"/api/svg/{filename}\")\nasync def get_svg(filename: str):\n    \"\"\"生成されたSVGファイルを取得する\"\"\"\n    file_path = PROCESSED_DIR / filename\n    if not file_path.exists():\n        raise HTTPException(status_code=404, detail=\"SVG file not found\")\n\n    return FileResponse(path=file_path, media_type=\"image/svg+xml\", filename=filename)\n\n\nclass FileInfo(BaseModel):\n    filename: str\n    size: int\n    size_formatted: str\n    created_at: str\n    file_type: str\n\n\nclass FileListResponse(BaseModel):\n    uploads: List[FileInfo]\n    processed: List[FileInfo]\n    total_count: int\n\n\n@app.get(\"/api/files/list\", response_model=FileListResponse)\nasync def get_file_list():\n    \"\"\"ファイル一覧を取得する\"\"\"\n    try:\n        import os\n        from datetime import datetime\n\n        def format_size(size_bytes):\n            if size_bytes == 0:\n                return \"0 B\"\n            size_names = [\"B\", \"KB\", \"MB\", \"GB\"]\n            i = 0\n            while size_bytes >= 1024 and i < len(size_names) - 1:\n                size_bytes /= 1024\n                i += 1\n            return f\"{size_bytes:.1f} {size_names[i]}\""],[3,"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 01:07:27\",\"modified\":\"2025/08/01 01:08:46\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) # アルファ値を計算して黒いオーバーレイを作成\n        alpha = int(opacity * 255)\n        overlay_with_alpha = Image.new('RGBA', image.size, (0, 0, 0, alpha))\n\n        # 元画像をRGBAに変換\n        if image.mode != 'RGBA':\n            image_rgba = image.convert('RGBA')\n        else:\n            image_rgba = image\n\n        # 合成\n        image = Image.alpha_composite(image_rgba, overlay_with_alpha)\n\n        # 必要に応じてRGBに戻す\n        if image.mode == 'RGBA':\n            image = image.convert('RGB')\n\n\n\n    elif operation == \"dpi\":\n        # DPI変更（画像自体は変更せず、メタデータのみ変更）\n        # DPI情報は保存時に設定されるため、ここでは何もしない\n        pass\n\n    return image\n\n\ndef preserve_image_metadata_and_save(original_path: Path, output_path: Path, processed_image: Image.Image):\n    \"\"\"元画像のメタデータ（EXIF、カラープロファイル）を保持して保存\"\"\"\n    try:\n        # 元画像を開いてメタデータを取得\n        with Image.open(str(original_path)) as original:\n            # EXIFデータを取得\n            exif = original.getexif()\n\n            # カラープロファイル（ICC Profile）を取得\n            icc_profile = original.info.get('icc_profile')\n\n            # その他のメタデータも取得\n            info = original.info.copy()\n\n            # 保存形式を決定\n            output_extension = str(output_path).lower()\n            if output_extension.endswith('.png'):\n                save_format = 'PNG'\n            elif output_extension.endswith(('.jpg', '.jpeg')):\n                save_format = 'JPEG'\n            elif output_extension.endswith('.webp'):\n                save_format = 'WEBP'\n            else:\n                save_format = 'JPEG'\n\n            # 保存オプション\n            save_kwargs = {\n                'format': save_format,\n                'optimize': True\n            }\n\n            # 品質設定\n            if save_format in ['JPEG', 'WEBP']:\n                save_kwargs['quality'] = 95\n            elif save_format == 'PNG':\n                save_kwargs['compress_level'] = 1\n\n            # EXIFデータがある場合は保持\n            if exif and save_format in ['JPEG', 'WEBP']:\n                save_kwargs['exif'] = exif\n\n            # ICCプロファイルがある場合は保持\n            if icc_profile:\n                save_kwargs['icc_profile'] = icc_profile\n\n            # DPI情報がある場合は保持\n            if 'dpi' in info:\n                save_kwargs['dpi'] = info['dpi']\n\n            # 保存\n            processed_image.save(str(output_path), **save_kwargs)\n            print(f\"Saved with metadata preservation: {output_path}\")\n\n    except Exception as e:\n        print(f\"Warning: Could not preserve metadata: {e}\")\n        # メタデータ保持に失敗した場合は通常の保存を行う\n        if str(output_path).lower().endswith('.png'):\n            processed_image.save(str(output_path), format='PNG', compress_level=1)\n        elif str(output_path).lower().endswith(('.jpg', '.jpeg')):\n            processed_image.save(str(output_path), format='JPEG', quality=95, optimize=True)\n        elif str(output_path).lower().endswith('.webp'):\n            processed_image.save(str(output_path), format='WEBP', quality=95, optimize=True)\n        else:\n            processed_image.save(str(output_path), format='JPEG', quality=95, optimize=True)\n\n\nasync def process_image_async(\n    input_path: Path, output_path: Path, operation: str, parameters: Dict[str, float]\n):\n    \"\"\"画像処理を非同期で実行（PILのみ使用）\"\"\"\n    def process_sync():\n        # PILで画像を読み込み（カラープロファイル保持）\n        with Image.open(str(input_path)) as original_image:\n            # 画像をコピーして処理用にする\n            image = original_image.copy()\n\n            print(f\"Original image mode: {image.mode}\")\n            print(f\"Original image size: {image.size}\")\n\n            # 操作を適用\n            image = apply_pil_operation(image, operation, parameters)\n\n            print(f\"Processed image mode: {image.mode}\")\n            print(f\"Processed image size: {image.size}\")\n\n            # DPI処理の場合は特別な保存処理\n            if operation == \"dpi\":\n                dpi = int(parameters.get(\"dpi\", 72))\n                try:\n                    # 元画像からメタデータを取得\n                    exif = original_image.getexif()\n                    icc_profile = original_image.info.get('icc_profile')\n\n                    # 保存形式を決定\n                    output_extension = str(output_path).lower()\n                    if output_extension.endswith('.png'):\n                        save_format = 'PNG'\n                    elif output_extension.endswith(('.jpg', '.jpeg')):\n                        save_format = 'JPEG'\n                    elif output_extension.endswith('.webp'):\n                        save_format = 'WEBP'\n                    else:\n                        save_format = 'PNG'\n\n                    save_kwargs = {\n                        'format': save_format,\n                        'dpi': (dpi, dpi),\n                        'optimize': True\n                    }\n\n                    if save_format in ['JPEG', 'WEBP']:\n                        save_kwargs['quality'] = 95\n                    elif save_format == 'PNG':\n                        save_kwargs['compress_level'] = 1\n\n                    # EXIFデータがある場合は保持\n                    if exif and save_format in ['JPEG', 'WEBP']:\n                        save_kwargs['exif'] = exif\n\n                    # ICCプロファイルがある場合は保持\n                    if icc_profile:\n                        save_kwargs['icc_profile'] = icc_profile\n\n                    image.save(str(output_path), **save_kwargs)\n                    print(f\"Successfully saved with DPI {dpi}: {output_path}\")\n\n                except Exception as e:\n                    print(f\"Warning: Could not save with DPI metadata: {e}\")\n                    preserve_image_metadata_and_save(input_path, output_path, image)\n            else:\n                # 通常の保存（メタデータ保持）\n                preserve_image_metadata_and_save(input_path, output_path, image)\n\n    # CPU集約的な処理を別スレッドで実行\n    loop = asyncio.get_event_loop()\n    await loop.run_in_executor(None, process_sync)"],[2,"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 01:07:27\",\"modified\":\"2025/08/01 01:08:46\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) # 複数の画像処理を順番に実行\n            await process_multiple_operations_async(\n                input_path, output_path, request.operations\n            )\n\n            results.append(\n                ImageBatchResponse(\n                    original_url=image_url,\n                    processed_url=f\"/processed/{output_filename}\",\n                    original_filename=filename,\n                    processed_filename=output_filename,\n                    status=\"success\",\n                    error_message=None,\n                )\n            )\n\n        except Exception as e:\n            results.append(\n                ImageBatchResponse(\n                    original_url=image_url,\n                    processed_url=\"\",\n                    original_filename=filename,\n                    processed_filename=\"\",\n                    status=\"error\",\n                    error_message=str(e),\n                )\n            )\n\n    return results\n\n\nasync def process_multiple_operations_async(\n    input_path: Path, output_path: Path, operations: List[OperationRequest]\n):\n    \"\"\"複数の操作を順番に処理する（PILのみ使用、メモリ内で処理して品質劣化を最小化）\"\"\"\n    if not operations:\n        raise ValueError(\"操作が指定されていません\")\n\n    def process_sync():\n        # PILで画像を読み込み（カラープロファイル保持）\n        with Image.open(str(input_path)) as original_image:\n            # 画像をコピーして処理用にする\n            image = original_image.copy()\n\n            # DPI情報を保持\n            dpi_value = None\n            for operation in operations:\n                if operation.operation == \"dpi\":\n                    dpi_value = int(operation.parameters.get(\"dpi\", 72))\n\n            # 全ての操作を順番に適用\n            for operation in operations:\n                operation_params = operation.parameters.copy()\n                if operation.operation == \"resize\" and operation.enableCrop is not None:\n                    operation_params[\"crop\"] = 1 if operation.enableCrop else 0\n\n                image = apply_pil_operation(image, operation.operation, operation_params)\n\n            # DPI情報がある場合は保存時に適用\n            if dpi_value:\n                # メタデータ保持保存（DPI情報付き）\n                try:\n                    # 元画像からメタデータを取得\n                    exif = original_image.getexif()\n                    icc_profile = original_image.info.get('icc_profile')\n\n                    # 保存形式を決定\n                    output_extension = str(output_path).lower()\n                    if output_extension.endswith('.png'):\n                        save_format = 'PNG'\n                    elif output_extension.endswith(('.jpg', '.jpeg')):\n                        save_format = 'JPEG'\n                    elif output_extension.endswith('.webp'):\n                        save_format = 'WEBP'\n                    else:\n                        save_format = 'JPEG'\n\n                    save_kwargs = {\n                        'format': save_format,\n                        'dpi': (dpi_value, dpi_value),\n                        'optimize': True\n                    }\n\n                    if save_format in ['JPEG', 'WEBP']:\n                        save_kwargs['quality'] = 95\n                    elif save_format == 'PNG':\n                        save_kwargs['compress_level'] = 1\n\n                    # EXIFデータがある場合は保持\n                    if exif and save_format in ['JPEG', 'WEBP']:\n                        save_kwargs['exif'] = exif\n\n                    # ICCプロファイルがある場合は保持\n                    if icc_profile:\n                        save_kwargs['icc_profile'] = icc_profile\n\n                    image.save(str(output_path), **save_kwargs)\n\n                except Exception as e:\n                    print(f\"Warning: Could not save with DPI metadata: {e}\")\n                    preserve_image_metadata_and_save(input_path, output_path, image)\n            else:\n                # 通常の保存（メタデータ保持）\n                preserve_image_metadata_and_save(input_path, output_path, image)\n\n    # CPU集約的な処理を別スレッドで実行\n    loop = asyncio.get_event_loop()\n    await loop.run_in_executor(None, process_sync)\n\n\ndef apply_pil_operation(image: Image.Image, operation: str, parameters: Dict[str, float]) -> Image.Image:\n    \"\"\"PILによる単一の画像処理操作を適用する（メモリ内処理）\"\"\"\n    if operation == \"resize\":\n        width = int(parameters.get(\"width\", 800))\n        height = int(parameters.get(\"height\", 600))\n        crop = int(parameters.get(\"crop\", 0))  # 0=通常リサイズ, 1=トリミング付きリサイズ\n\n        if crop == 1:\n            # トリミング付きリサイズ：アスペクト比を維持してトリミング\n            # ImageOps.fitを使用してスマートトリミング\n            image = ImageOps.fit(image, (width, height), Image.Resampling.LANCZOS)\n        else:\n            # 通常のリサイズ：アスペクト比を無視して指定サイズに変更\n            image = image.resize((width, height), Image.Resampling.LANCZOS)\n\n    elif operation == \"rotate\":\n        angle = parameters.get(\"angle\", 0)\n        # 高品質な回転処理\n        image = image.rotate(angle, resample=Image.Resampling.BICUBIC, expand=True)\n\n    elif operation == \"blur\":\n        sigma = parameters.get(\"sigma\", 1.0)\n        # ガウシアンブラーを適用\n        image = image.filter(ImageFilter.GaussianBlur(radius=sigma))\n\n    elif operation == \"grayscale\":\n        # グレースケール変換（Lモードに変換してからRGBに戻す）\n        grayscale = image.convert('L')\n        image = grayscale.convert('RGB')\n\n    elif operation == \"sepia\":\n        # セピア効果をPILで実装\n        # まずグレースケールに変換\n        grayscale = image.convert('L')\n\n        # セピア色調を作成\n        sepia = Image.new('RGB', image.size)\n        sepia_pixels = []\n\n        for pixel in grayscale.getdata():\n            # セピア色計算\n            r = min(255, int(pixel * 1.0))\n            g = min(255, int(pixel * 0.8))\n            b = min(255, int(pixel * 0.6))\n            sepia_pixels.append((r, g, b))\n\n        sepia.putdata(sepia_pixels)\n        image = sepia\n\n    elif operation == \"overlay\":\n        # 透過黒オーバーレイを適用\n        opacity = parameters.get(\"opacity\", 0.3)  # デフォルト30%\n\n        # アルファ値を計算して黒いオーバーレイを作成\n        alpha = int(opacity * 255)\n        overlay_with_alpha = Image.new('RGBA', image.size, (0, 0, 0, alpha))"],[6,"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 01:07:27\",\"modified\":\"2025/08/01 01:08:46\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) def get_file_info(file_path, file_type):\n            stat = file_path.stat()\n            return FileInfo(\n                filename=file_path.name,\n                size=stat.st_size,\n                size_formatted=format_size(stat.st_size),\n                created_at=datetime.fromtimestamp(stat.st_mtime).strftime(\n                    \"%Y-%m-%d %H:%M:%S\"\n                ),\n                file_type=file_type,\n            )\n\n        uploads = []\n        processed = []\n\n        # アップロード済みファイルを取得\n        for file_path in UPLOAD_DIR.glob(\"*\"):\n            if file_path.is_file():\n                uploads.append(get_file_info(file_path, \"upload\"))\n\n        # 処理済みファイルを取得\n        for file_path in PROCESSED_DIR.glob(\"*\"):\n            if file_path.is_file():\n                processed.append(get_file_info(file_path, \"processed\"))\n\n        # 作成日時順でソート（新しいものから）\n        uploads.sort(key=lambda x: x.created_at, reverse=True)\n        processed.sort(key=lambda x: x.created_at, reverse=True)\n\n        return FileListResponse(\n            uploads=uploads,\n            processed=processed,\n            total_count=len(uploads) + len(processed),\n        )\n\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to get file list: {str(e)}\"\n        )\n\n\n@app.delete(\"/api/files/{filename}\")\nasync def delete_file(filename: str):\n    \"\"\"個別ファイルを削除する\"\"\"\n    try:\n        upload_path = UPLOAD_DIR / filename\n        processed_path = PROCESSED_DIR / filename\n\n        deleted = False\n        file_type = None\n\n        if upload_path.exists():\n            upload_path.unlink()\n            deleted = True\n            file_type = \"upload\"\n        elif processed_path.exists():\n            processed_path.unlink()\n            deleted = True\n            file_type = \"processed\"\n\n        if not deleted:\n            raise HTTPException(status_code=404, detail=\"File not found\")\n\n        return {\n            \"message\": \"File deleted successfully\",\n            \"filename\": filename,\n            \"file_type\": file_type,\n        }\n\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to delete file: {str(e)}\")\n\n\n# 文字・画像置換用のリクエストモデル\nclass TextReplaceRequest(BaseModel):\n    text_replacements: Dict[str, str]\n    image_replacements: Dict[str, str]  # image_id -> uploaded_image_url\n    config: Optional[Dict] = None\n\n\n@app.post(\"/api/replace-text-images\")\nasync def replace_text_images(request: TextReplaceRequest):\n    \"\"\"テンプレート画像の文字と画像を置換する - 新しいテンプレートベースアプローチ\"\"\"\n    try:\n        # 置換用画像を読み込み\n        image_replacements = {}\n        for image_id, image_url in request.image_replacements.items():\n            image_filename = image_url.split(\"/\")[-1]\n            image_path = UPLOAD_DIR / image_filename\n\n            if image_path.exists():\n                with Image.open(image_path) as replacement_image:\n                    image_replacements[image_id] = replacement_image.copy()\n\n        # 新しいテンプレートベース合成処理\n        replacer = TextImageReplacer()\n        result_image = replacer.create_composite_image(\n            request.text_replacements,\n            image_replacements\n        )\n\n        # 結果を保存（JPG形式）\n        output_filename = f\"text_replaced_{uuid.uuid4().hex[:8]}.jpg\"\n        output_path = PROCESSED_DIR / output_filename\n        replacer.save_as_jpg(result_image, str(output_path))\n\n        return {\n            \"message\": \"Text and images replaced successfully using template-based approach\",\n            \"processed_url\": f\"/processed/{output_filename}\",\n            \"filename\": output_filename\n        }\n\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Text replacement failed: {str(e)}\")\n\n\n@app.post(\"/api/create-tourism-layout\")\nasync def create_tourism_layout(\n    title: str,\n    locations: List[str],\n    image_urls: List[str]\n):\n    \"\"\"観光パンフレット風のレイアウトを作成する\"\"\"\n    try:\n        # アップロードされた画像を読み込み\n        images = []\n        for image_url in image_urls:\n            image_filename = image_url.split(\"/\")[-1]\n            image_path = UPLOAD_DIR / image_filename\n\n            if image_path.exists():\n                with Image.open(image_path) as img:\n                    images.append(img.copy())\n\n        if not images:\n            raise HTTPException(status_code=400, detail=\"No valid images found\")\n\n        # パンフレットレイアウトを作成\n        replacer = TextImageReplacer()\n        layout_image = replacer.create_tourism_layout(title, locations, images)\n\n        # 結果を保存（JPG形式）\n        output_filename = f\"tourism_layout_{uuid.uuid4().hex[:8]}.jpg\"\n        output_path = PROCESSED_DIR / output_filename\n        replacer.save_as_jpg(layout_image, str(output_path))\n\n        return {\n            \"message\": \"Tourism layout created successfully\",\n            \"processed_url\": f\"/processed/{output_filename}\",\n            \"filename\": output_filename\n        }\n\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Layout creation failed: {str(e)}\")\n\n\n@app.get(\"/api/template-config\")\nasync def get_template_config():\n    \"\"\"テンプレート設定を取得する\"\"\"\n    return create_template_config()\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000, reload=True)\n\n```"],[1,"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 01:07:27\",\"modified\":\"2025/08/01 01:08:46\"}\n\nNOTE BLOCK CONTENT:\n\n```\nfrom fastapi import FastAPI, File, UploadFile, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.responses import FileResponse, StreamingResponse\nfrom fastapi.staticfiles import StaticFiles\nfrom pydantic import BaseModel\nfrom typing import Dict, Any, Optional, List\nimport os\nimport uuid\nfrom PIL import Image, ImageFilter, ImageEnhance, ImageOps\nimport asyncio\nfrom pathlib import Path\nimport aiofiles\nimport zipfile\nimport io\nimport xml.etree.ElementTree as ET\nimport re\nfrom text_image_replacer import TextImageReplacer, create_template_config\n\napp = FastAPI(title=\"Image Editor API\", version=\"1.0.0\")\n\n# CORS設定\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# アップロードディレクトリの設定\nUPLOAD_DIR = Path(\"uploads\")\nPROCESSED_DIR = Path(\"processed\")\nUPLOAD_DIR.mkdir(exist_ok=True)\nPROCESSED_DIR.mkdir(exist_ok=True)\n\n# 静的ファイル配信の設定\napp.mount(\"/uploads\", StaticFiles(directory=UPLOAD_DIR), name=\"uploads\")\napp.mount(\"/processed\", StaticFiles(directory=PROCESSED_DIR), name=\"processed\")\n\n\nclass ImageResponse(BaseModel):\n    url: str\n    filename: str\n\n\nclass ImageBatchResponse(BaseModel):\n    original_url: str\n    processed_url: str\n    original_filename: str\n    processed_filename: str\n    status: str\n    error_message: Optional[str] = None\n\n\nclass OperationRequest(BaseModel):\n    id: str\n    operation: str\n    parameters: Dict[str, float]\n    enableCrop: Optional[bool] = None\n\n\nclass ProcessBatchRequest(BaseModel):\n    image_urls: List[str]\n    operations: List[OperationRequest]\n    output_format: Optional[str] = \"original\"\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Image Editor API\", \"version\": \"1.0.0\"}\n\n\n@app.post(\"/api/upload\", response_model=ImageResponse)\nasync def upload_image(file: UploadFile = File(...)):\n    \"\"\"画像ファイルをアップロードする\"\"\"\n    if not file.content_type or not file.content_type.startswith(\"image/\"):\n        raise HTTPException(\n            status_code=400, detail=\"Invalid file type. Please upload an image.\"\n        )\n\n    # ファイル名を生成\n    file_extension = file.filename.split(\".\")[-1] if file.filename else \"jpg\"\n    unique_filename = f\"{uuid.uuid4()}.{file_extension}\"\n    file_path = UPLOAD_DIR / unique_filename\n\n    # ファイルを保存\n    async with aiofiles.open(file_path, \"wb\") as f:\n        content = await file.read()\n        await f.write(content)\n\n    return ImageResponse(url=f\"/uploads/{unique_filename}\", filename=unique_filename)\n\n\n@app.post(\"/api/upload-batch\", response_model=List[ImageResponse])\nasync def upload_batch_images(files: List[UploadFile] = File(...)):\n    \"\"\"複数の画像ファイルを一括アップロードする\"\"\"\n    uploaded_files = []\n\n    for file in files:\n        if not file.content_type or not file.content_type.startswith(\"image/\"):\n            raise HTTPException(\n                status_code=400,\n                detail=f\"Invalid file type: {file.filename}. Please upload images only.\",\n            )\n\n        # ファイル名を生成\n        file_extension = file.filename.split(\".\")[-1] if file.filename else \"jpg\"\n        unique_filename = f\"{uuid.uuid4()}.{file_extension}\"\n        file_path = UPLOAD_DIR / unique_filename\n\n        # ファイルを保存\n        async with aiofiles.open(file_path, \"wb\") as f:\n            content = await file.read()\n            await f.write(content)\n\n        uploaded_files.append(\n            ImageResponse(url=f\"/uploads/{unique_filename}\", filename=unique_filename)\n        )\n\n    return uploaded_files\n\n\n@app.post(\"/api/process-batch\", response_model=List[ImageBatchResponse])\nasync def process_batch_images(request: ProcessBatchRequest):\n    \"\"\"複数の画像を一括処理する\"\"\"\n    results = []\n\n    for image_url in request.image_urls:\n        try:\n            # アップロード画像のパスを取得\n            if image_url.startswith(\"/uploads/\") or \"/uploads/\" in image_url:\n                filename = image_url.split(\"/\")[-1]\n                input_path = UPLOAD_DIR / filename\n            else:\n                results.append(\n                    ImageBatchResponse(\n                        original_url=image_url,\n                        processed_url=\"\",\n                        original_filename=filename,\n                        processed_filename=\"\",\n                        status=\"error\",\n                        error_message=\"Invalid image URL\",\n                    )\n                )\n                continue\n\n            if not input_path.exists():\n                results.append(\n                    ImageBatchResponse(\n                        original_url=image_url,\n                        processed_url=\"\",\n                        original_filename=filename,\n                        processed_filename=\"\",\n                        status=\"error\",\n                        error_message=\"Image not found\",\n                    )\n                )\n                continue\n\n            # 出力ファイル名を生成（元の拡張子を保持または指定された形式に変換）\n            original_extension = filename.split(\".\")[-1].lower()\n\n            if request.output_format == \"original\":\n                output_extension = original_extension\n            elif request.output_format == \"png\":\n                output_extension = \"png\"\n            elif request.output_format == \"jpg\":\n                output_extension = \"jpg\"\n            elif request.output_format == \"webp\":\n                output_extension = \"webp\"\n            else:\n                output_extension = original_extension\n\n            output_filename = f\"processed_{uuid.uuid4()}.{output_extension}\"\n            output_path = PROCESSED_DIR / output_filename\n\n            # 複数の画像処理を順番に実行\n            await process_multiple_operations_async(\n                input_path, output_path, request.operations\n            )"],[7,"\n\nNOTE TITLE: [[requirements]]\n\nMETADATA:{\"created\":\"2025/08/01 01:07:27\",\"modified\":\"2025/08/01 01:09:21\"}\n\nNOTE BLOCK CONTENT:\n\n```\nfastapi==0.104.1\nuvicorn[standard]==0.24.0\npython-multipart==0.0.6\nPillow==10.1.0\npydantic==2.5.0\npython-jose[cryptography]==3.3.0\npasslib[bcrypt]==1.7.4\naiofiles==23.2.1\nnumpy==1.26.4\nscikit-image==0.24.0\nscipy==1.13.0\nrequests==2.31.0\n```"]],"type":"string"},"embeddingModel":{"docs":{"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":6},"orderedDocs":[[1,"copilot-plus-small"],[2,"copilot-plus-small"],[3,"copilot-plus-small"],[4,"copilot-plus-small"],[5,"copilot-plus-small"],[6,"copilot-plus-small"],[7,"copilot-plus-small"]],"type":"string"},"created_at":{"docs":{"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":6},"orderedDocs":[[1,1753978175868],[2,1753978175873],[3,1753978175875],[4,1753978175877],[5,1753978175878],[6,1753978175880],[7,1753978175881]],"type":"number"},"ctime":{"docs":{"1":1,"2":2,"3":3,"4":4,"5":5,"6":6,"7":0},"orderedDocs":[[7,1753978047914],[1,1753978047916],[2,1753978047916],[3,1753978047916],[4,1753978047916],[5,1753978047916],[6,1753978047916]],"type":"number"},"mtime":{"docs":{"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":6},"orderedDocs":[[1,1753978126206],[2,1753978126206],[3,1753978126206],[4,1753978126206],[5,1753978126206],[6,1753978126206],[7,1753978161082]],"type":"number"},"extension":{"docs":{"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":6},"orderedDocs":[[1,"md"],[2,"md"],[3,"md"],[4,"md"],[5,"md"],[6,"md"],[7,"md"]],"type":"string"}},"enabled":true,"isSorted":true},"language":"english","schema":{"id":"string","title":"string","path":"string","content":"string","embedding":"vector[256]","embeddingModel":"string","created_at":"number","ctime":"number","mtime":"number","tags":"string[]","extension":"string"}}