{"internalDocumentIDStore":{"internalIdToId":["7b4c3a5f2351e68d3fab702932a69aab","1f18119a228357d4a4d1ad176766099e","fdf9b5ff709a96f1f4b2f9548042e2e9","9ca9b5355017a0ddced116c218340237","80f7a1dbcb9542d4724e15cc1ec5e830","e23a8f2b97eb4b4ce2c21dbf16b77f2c","e68c06e6749a791ef6819b56d7359187","1e58243d8b3345b7f61176cbddfbc364","2222116f6465647400989b362ca33dce"]},"index":{"indexes":{"id":{"type":"Radix","node":{"w":"","s":"","c":{"1":{"w":"1","s":"1","c":{"f":{"w":"1f18119a228357d4a4d1ad176766099e","s":"f18119a228357d4a4d1ad176766099e","c":{},"d":[2],"e":true},"e":{"w":"1e58243d8b3345b7f61176cbddfbc364","s":"e58243d8b3345b7f61176cbddfbc364","c":{},"d":[8],"e":true}},"d":[],"e":false},"2":{"w":"2222116f6465647400989b362ca33dce","s":"2222116f6465647400989b362ca33dce","c":{},"d":[9],"e":true},"7":{"w":"7b4c3a5f2351e68d3fab702932a69aab","s":"7b4c3a5f2351e68d3fab702932a69aab","c":{},"d":[1],"e":true},"8":{"w":"80f7a1dbcb9542d4724e15cc1ec5e830","s":"80f7a1dbcb9542d4724e15cc1ec5e830","c":{},"d":[5],"e":true},"9":{"w":"9ca9b5355017a0ddced116c218340237","s":"9ca9b5355017a0ddced116c218340237","c":{},"d":[4],"e":true},"f":{"w":"fdf9b5ff709a96f1f4b2f9548042e2e9","s":"fdf9b5ff709a96f1f4b2f9548042e2e9","c":{},"d":[3],"e":true},"e":{"w":"e","s":"e","c":{"2":{"w":"e23a8f2b97eb4b4ce2c21dbf16b77f2c","s":"23a8f2b97eb4b4ce2c21dbf16b77f2c","c":{},"d":[6],"e":true},"6":{"w":"e68c06e6749a791ef6819b56d7359187","s":"68c06e6749a791ef6819b56d7359187","c":{},"d":[7],"e":true}},"d":[],"e":false}},"d":[],"e":false},"isArray":false},"title":{"type":"Radix","node":{"w":"","s":"","c":{"r":{"w":"re","s":"re","c":{"q":{"w":"requirements","s":"quirements","c":{},"d":[1],"e":true},"a":{"w":"readme","s":"adme","c":{},"d":[9],"e":true}},"d":[],"e":false},"m":{"w":"main","s":"main","c":{},"d":[2,3,4,5,6,7],"e":true},"p":{"w":"p","s":"p","c":{"y":{"w":"python","s":"ython","c":{},"d":[8],"e":true},"i":{"w":"pillow","s":"illow","c":{},"d":[8],"e":true}},"d":[],"e":false}},"d":[],"e":false},"isArray":false},"path":{"type":"Radix","node":{"w":"","s":"","c":{"s":{"w":"source","s":"source","c":{},"d":[1,2,3,4,5,6,7],"e":true},"i":{"w":"image-editor","s":"image-editor","c":{},"d":[1,2,3,4,5,6,7],"e":true},"r":{"w":"re","s":"re","c":{"q":{"w":"requirements","s":"quirements","c":{},"d":[1],"e":true},"a":{"w":"readme","s":"adme","c":{},"d":[9],"e":true}},"d":[],"e":false},"m":{"w":"m","s":"m","c":{"d":{"w":"md","s":"d","c":{},"d":[1,2,3,4,5,6,7,8,9],"e":true},"a":{"w":"main","s":"ain","c":{},"d":[2,3,4,5,6,7],"e":true}},"d":[],"e":false},"p":{"w":"p","s":"p","c":{"y":{"w":"python","s":"ython","c":{},"d":[8],"e":true},"i":{"w":"pillow","s":"illow","c":{},"d":[8],"e":true}},"d":[],"e":false}},"d":[],"e":false},"isArray":false},"content":{"type":"Radix","node":{"w":"","s":"","c":{"0":{"w":"0","s":"0","c":{"1":{"w":"01","s":"1","c":{},"d":[1,2,3,4,5,6,7,8,9],"e":true},"3":{"w":"031105","s":"31105","c":{},"d":[8],"e":true},"7":{"w":"07","s":"7","c":{},"d":[1,2,3,4,5,6,7,8,9],"e":true},"8":{"w":"08","s":"8","c":{},"d":[1,2,3,4,5,6,7,8,9],"e":true}},"d":[1,2,3,4,5,6,7],"e":true},"1":{"w":"1","s":"1","c":{"0":{"w":"10","s":"0","c":{"2":{"w":"1024","s":"24","c":{},"d":[5,6],"e":true},"4":{"w":"104","s":"4","c":{},"d":[1],"e":true}},"d":[1],"e":true},"1":{"w":"11","s":"1","c":{},"d":[1,2,3,4,5,6,7,8,9],"e":true},"3":{"w":"13","s":"3","c":{},"d":[1],"e":true},"f":{"w":"1f","s":"f","c":{"i":{"w":"1fill","s":"ill","c":{},"d":[6],"e":true}},"d":[5,6],"e":true},"s":{"w":"1style","s":"style","c":{},"d":[6],"e":true}},"d":[1,2,3,4,5,6,8],"e":true},"2":{"w":"2","s":"2","c":{"0":{"w":"2025","s":"025","c":{"-":{"w":"2025-08-01","s":"-08-01","c":{},"d":[8],"e":true}},"d":[1,2,3,4,5,6,7,8,9],"e":true},"3":{"w":"23","s":"3","c":{},"d":[1],"e":true},"4":{"w":"24","s":"4","c":{},"d":[1,5],"e":true},"5":{"w":"255","s":"55","c":{},"d":[3,4],"e":true},"6":{"w":"26","s":"6","c":{},"d":[1],"e":true},"f":{"w":"2fill","s":"fill","c":{},"d":[6],"e":true}},"d":[1,6,8],"e":true},"3":{"w":"3","s":"3","c":{"0":{"w":"30","s":"0","c":{},"d":[3],"e":true},"1":{"w":"31","s":"1","c":{},"d":[1],"e":true},"6":{"w":"3600","s":"600","c":{},"d":[5],"e":true},"7":{"w":"37","s":"7","c":{},"d":[1,2,3,4,5,6,7,8,9],"e":true}},"d":[1,3,6,8],"e":true},"4":{"w":"4","s":"4","c":{"0":{"w":"40","s":"0","c":{"0":{"w":"400","s":"0","c":{},"d":[2,5,7],"e":true},"4":{"w":"404","s":"4","c":{},"d":[5,6,7],"e":true}},"d":[],"e":false},"5":{"w":"45","s":"5","c":{},"d":[8],"e":true}},"d":[1,8],"e":true},"5":{"w":"5","s":"5","c":{"0":{"w":"500","s":"00","c":{},"d":[5,6,7],"e":true}},"d":[1,8],"e":true},"6":{"w":"6","s":"6","c":{"0":{"w":"600","s":"00","c":{"p":{"w":"600px","s":"px","c":{},"d":[8],"e":true}},"d":[3,8],"e":true}},"d":[1,3,8],"e":true},"7":{"w":"7","s":"7","c":{"2":{"w":"72","s":"2","c":{},"d":[3,4],"e":true}},"d":[1],"e":true},"8":{"w":"8","s":"8","c":{"0":{"w":"800","s":"00","c":{"0":{"w":"8000","s":"0","c":{},"d":[7],"e":true},"p":{"w":"800px","s":"px","c":{},"d":[8],"e":true}},"d":[3,8],"e":true}},"d":[3,6,7],"e":true},"9":{"w":"95","s":"95","c":{},"d":[3,4],"e":true},"n":{"w":"n","s":"n","c":{"o":{"w":"no","s":"o","c":{"t":{"w":"not","s":"t","c":{"e":{"w":"note","s":"e","c":{},"d":[1,2,3,4,5,6,7,8,9],"e":true}},"d":[2,3,4,5,6,7],"e":true},"n":{"w":"none","s":"ne","c":{},"d":[2,3,4,5,7],"e":true},"w":{"w":"now","s":"w","c":{},"d":[5],"e":true}},"d":[5,6,7],"e":true},"u":{"w":"numpy","s":"umpy","c":{},"d":[1],"e":true},"a":{"w":"name","s":"ame","c":{},"d":[2,7],"e":true},"e":{"w":"new","s":"ew","c":{},"d":[3,4,6],"e":true}},"d":[],"e":false},"t":{"w":"t","s":"t","c":{"i":{"w":"ti","s":"i","c":{"t":{"w":"title","s":"tle","c":{},"d":[1,2,3,4,5,6,7,8,9],"e":true},"m":{"w":"time","s":"me","c":{"s":{"w":"timestamp","s":"stamp","c":{},"d":[5],"e":true}},"d":[5],"e":true}},"d":[],"e":false},"y":{"w":"typ","s":"yp","c":{"i":{"w":"typing","s":"ing","c":{},"d":[2],"e":true},"e":{"w":"type","s":"e","c":{},"d":[2],"e":true}},"d":[],"e":false},"e":{"w":"te","s":"e","c":{"x":{"w":"text","s":"xt","c":{"_":{"w":"text_","s":"_","c":{"i":{"w":"text_image_replacer","s":"image_replacer","c":{},"d":[2],"e":true},"r":{"w":"text_replace","s":"replace","c":{"m":{"w":"text_replacements","s":"ments","c":{},"d":[7],"e":true},"d":{"w":"text_replaced_","s":"d_","c":{},"d":[7],"e":true}},"d":[],"e":false}},"d":[],"e":false},"i":{"w":"textimagereplacer","s":"imagereplacer","c":{},"d":[2,7],"e":true},"r":{"w":"textreplacerequest","s":"replacerequest","c":{},"d":[7],"e":true}},"d":[7],"e":true},"m":{"w":"template","s":"mplate","c":{"-":{"w":"template-","s":"-","c":{"b":{"w":"template-based","s":"based","c":{},"d":[7],"e":true},"c":{"w":"template-config","s":"config","c":{},"d":[7],"e":true}},"d":[],"e":false}},"d":[6],"e":true}},"d":[],"e":false},"r":{"w":"tr","s":"r","c":{"u":{"w":"true","s":"ue","c":{},"d":[2,3,4,7],"e":true},"y":{"w":"try","s":"y","c":{},"d":[2,3,4,5,6,7],"e":true},"a":{"w":"transcend_with_profile","s":"anscend_with_profile","c":{},"d":[8],"e":true}},"d":[],"e":false},"o":{"w":"to","s":"o","c":{"t":{"w":"total","s":"tal","c":{"_":{"w":"total_","s":"_","c":{"d":{"w":"total_deleted","s":"deleted","c":{},"d":[5],"e":true},"s":{"w":"total_size","s":"size","c":{},"d":[5],"e":true},"c":{"w":"total_count","s":"count","c":{},"d":[6,7],"e":true}},"d":[],"e":false}},"d":[5],"e":true},"u":{"w":"tourism","s":"urism","c":{"_":{"w":"tourism_layout_","s":"_layout_","c":{},"d":[7],"e":true}},"d":[7],"e":true}},"d":[5,7],"e":true},"h":{"w":"than","s":"han","c":{},"d":[5],"e":true}},"d":[],"e":false},"r":{"w":"r","s":"r","c":{"e":{"w":"re","s":"e","c":{"q":{"w":"requ","s":"qu","c":{"i":{"w":"requirements","s":"irements","c":{},"d":[1],"e":true},"e":{"w":"request","s":"est","c":{"s":{"w":"requests","s":"s","c":{},"d":[1],"e":true}},"d":[2,3,6,7],"e":true}},"d":[],"e":false},"s":{"w":"res","s":"s","c":{"p":{"w":"response","s":"ponse","c":{"s":{"w":"responses","s":"s","c":{},"d":[2],"e":true},"_":{"w":"response_model","s":"_model","c":{},"d":[2,6],"e":true}},"d":[],"e":false},"u":{"w":"result","s":"ult","c":{"s":{"w":"results","s":"s","c":{},"d":[2,3],"e":true},"_":{"w":"result_image","s":"_image","c":{},"d":[7],"e":true}},"d":[],"e":false},"i":{"w":"resize","s":"ize","c":{"d":{"w":"resized_image","s":"d_image","c":{},"d":[8],"e":true}},"d":[3,8],"e":true},"a":{"w":"resampl","s":"ampl","c":{"i":{"w":"resampling","s":"ing","c":{},"d":[3],"e":true},"e":{"w":"resample","s":"e","c":{},"d":[3],"e":true}},"d":[],"e":false},"e":{"w":"reset_ids","s":"et_ids","c":{},"d":[6],"e":true}},"d":[],"e":false},"t":{"w":"return","s":"turn","c":{},"d":[2,3,4,5,6,7],"e":true},"a":{"w":"read","s":"ad","c":{"m":{"w":"readme","s":"me","c":{},"d":[9],"e":true}},"d":[2,5,6],"e":true},"p":{"w":"replace","s":"place","c":{"m":{"w":"replacement","s":"ment","c":{"1":{"w":"replacement1","s":"1","c":{},"d":[6],"e":true},"2":{"w":"replacement2","s":"2","c":{},"d":[6],"e":true},"3":{"w":"replacement3","s":"3","c":{},"d":[6],"e":true},"_":{"w":"replacement_image","s":"_image","c":{},"d":[7],"e":true}},"d":[7],"e":true},"-":{"w":"replace-text-images","s":"-text-images","c":{},"d":[7],"e":true},"_":{"w":"replace_text_images","s":"_text_images","c":{},"d":[7],"e":true},"r":{"w":"replacer","s":"r","c":{},"d":[7],"e":true},"d":{"w":"replaced","s":"d","c":{},"d":[7],"e":true}},"d":[],"e":false},"v":{"w":"reverse","s":"verse","c":{},"d":[7],"e":true},"l":{"w":"reload","s":"load","c":{},"d":[7],"e":true}},"d":[2,6],"e":true},"o":{"w":"ro","s":"o","c":{"o":{"w":"root","s":"ot","c":{},"d":[2],"e":true},"t":{"w":"rotate","s":"tate","c":{"d":{"w":"rotated_image","s":"d_image","c":{},"d":[8],"e":true}},"d":[3,8],"e":true}},"d":[],"e":false},"a":{"w":"ra","s":"a","c":{"i":{"w":"raise","s":"ise","c":{},"d":[2,3,5,6,7],"e":true},"d":{"w":"radius","s":"dius","c":{},"d":[3,8],"e":true}},"d":[],"e":false},"u":{"w":"run","s":"un","c":{"_":{"w":"run_in_executor","s":"_in_executor","c":{},"d":[3,4,5],"e":true}},"d":[7],"e":true},"g":{"w":"rgb","s":"gb","c":{"a":{"w":"rgba","s":"a","c":{},"d":[4],"e":true}},"d":[3,4,8],"e":true}},"d":[3,6],"e":true},"m":{"w":"m","s":"m","c":{"e":{"w":"me","s":"e","c":{"t":{"w":"metadata","s":"tadata","c":{},"d":[1,2,3,4,5,6,7,8,9],"e":true},"s":{"w":"message","s":"ssage","c":{},"d":[2,5,7],"e":true},"d":{"w":"media_type","s":"dia_type","c":{},"d":[5,6],"e":true}},"d":[],"e":false},"o":{"w":"mo","s":"o","c":{"d":{"w":"mod","s":"d","c":{"i":{"w":"modified","s":"ified","c":{},"d":[1,2,3,4,5,6,7,8,9],"e":true},"e":{"w":"mode","s":"e","c":{},"d":[4],"e":true}},"d":[],"e":false},"u":{"w":"mount","s":"unt","c":{},"d":[2],"e":true}},"d":[],"e":false},"a":{"w":"ma","s":"a","c":{"i":{"w":"main","s":"in","c":{},"d":[2,3,4,5,6,7],"e":true},"p":{"w":"map","s":"p","c":{},"d":[6],"e":true},"t":{"w":"matched","s":"tched","c":{},"d":[6],"e":true}},"d":[],"e":false},"i":{"w":"mi","s":"i","c":{"d":{"w":"middleware","s":"ddleware","c":{},"d":[2],"e":true},"n":{"w":"min","s":"n","c":{},"d":[3],"e":true}},"d":[],"e":false},"k":{"w":"mkdir","s":"kdir","c":{},"d":[2],"e":true},"b":{"w":"mb","s":"b","c":{},"d":[5,6],"e":true},"-":{"w":"m-","s":"-","c":{},"d":[7],"e":true},"p":{"w":"mp4","s":"p4","c":{},"d":[8],"e":true}},"d":[7],"e":true},"c":{"w":"c","s":"c","c":{"r":{"w":"cr","s":"r","c":{"e":{"w":"creat","s":"eat","c":{"e":{"w":"create","s":"e","c":{"d":{"w":"created","s":"d","c":{"_":{"w":"created_at","s":"_at","c":{},"d":[6,7],"e":true}},"d":[1,2,3,4,5,6,7,8,9],"e":true},"_":{"w":"create_","s":"_","c":{"t":{"w":"create_t","s":"t","c":{"e":{"w":"create_template_config","s":"emplate_config","c":{},"d":[2,7],"e":true},"o":{"w":"create_tourism_layout","s":"ourism_layout","c":{},"d":[7],"e":true}},"d":[],"e":false},"c":{"w":"create_composite_image","s":"composite_image","c":{},"d":[7],"e":true}},"d":[],"e":false},"-":{"w":"create-tourism-layout","s":"-tourism-layout","c":{},"d":[7],"e":true}},"d":[],"e":false},"i":{"w":"creation","s":"ion","c":{},"d":[7],"e":true}},"d":[],"e":false},"y":{"w":"cryptography","s":"yptography","c":{},"d":[1],"e":true},"o":{"w":"crop","s":"op","c":{},"d":[3],"e":true}},"d":[],"e":false},"o":{"w":"co","s":"o","c":{"n":{"w":"con","s":"n","c":{"t":{"w":"cont","s":"t","c":{"e":{"w":"content","s":"ent","c":{"_":{"w":"content_type","s":"_type","c":{},"d":[2],"e":true},"-":{"w":"content-disposition","s":"-disposition","c":{},"d":[5],"e":true}},"d":[1,2,3,4,5,6,7,8,9],"e":true},"i":{"w":"continue","s":"inue","c":{},"d":[2,6],"e":true},"'":{"w":"cont'd","s":"'d","c":{},"d":[3,4,5,6,7],"e":true}},"d":[],"e":false},"v":{"w":"convert","s":"vert","c":{},"d":[3,4,8],"e":true},"f":{"w":"config","s":"fig","c":{},"d":[7],"e":true}},"d":[],"e":false},"r":{"w":"cors","s":"rs","c":{"m":{"w":"corsmiddleware","s":"middleware","c":{},"d":[2],"e":true}},"d":[2],"e":true},"p":{"w":"copy","s":"py","c":{},"d":[3,4,7],"e":true},"u":{"w":"could","s":"uld","c":{},"d":[3,4],"e":true},"m":{"w":"compress_level","s":"mpress_level","c":{},"d":[4],"e":true},"l":{"w":"color","s":"lor","c":{},"d":[5,6,8],"e":true}},"d":[],"e":false},"l":{"w":"cl","s":"l","c":{"a":{"w":"class","s":"ass","c":{},"d":[2,5,6,7],"e":true},"e":{"w":"clear","s":"ear","c":{"-":{"w":"clear-","s":"-","c":{"f":{"w":"clear-files","s":"files","c":{},"d":[5],"e":true},"o":{"w":"clear-old-files","s":"old-files","c":{},"d":[5],"e":true}},"d":[],"e":false},"_":{"w":"clear_","s":"_","c":{"f":{"w":"clear_files","s":"files","c":{},"d":[5],"e":true},"o":{"w":"clear_old_files","s":"old_files","c":{},"d":[5],"e":true}},"d":[],"e":false},"e":{"w":"cleared","s":"ed","c":{},"d":[5],"e":true}},"d":[5],"e":true}},"d":[],"e":false},"p":{"w":"cpu","s":"pu","c":{},"d":[3,4,5],"e":true},"u":{"w":"cu","s":"u","c":{"r":{"w":"current_time","s":"rrent_time","c":{},"d":[5],"e":true},"t":{"w":"cutoff_time","s":"toff_time","c":{},"d":[5],"e":true}},"d":[],"e":false},"v":{"w":"cv","s":"v","c":{"2":{"w":"cv2","s":"2","c":{},"d":[8],"e":true},"t":{"w":"cvtcolor","s":"tcolor","c":{},"d":[8],"e":true}},"d":[],"e":false}},"d":[],"e":false},"b":{"w":"b","s":"b","c":{"l":{"w":"bl","s":"l","c":{"o":{"w":"block","s":"ock","c":{},"d":[1,2,3,4,5,6,7,8,9],"e":true},"u":{"w":"blur","s":"ur","c":{"r":{"w":"blurred_image","s":"red_image","c":{},"d":[8],"e":true}},"d":[3],"e":true}},"d":[],"e":false},"c":{"w":"bcrypt","s":"crypt","c":{},"d":[1],"e":true},"a":{"w":"basemodel","s":"asemodel","c":{},"d":[2,5,6,7],"e":true},"o":{"w":"bool","s":"ool","c":{},"d":[2],"e":true},"i":{"w":"bicubic","s":"icubic","c":{},"d":[3],"e":true},"y":{"w":"bytesio","s":"ytesio","c":{},"d":[5],"e":true},"g":{"w":"bgr","s":"gr","c":{},"d":[8],"e":true},"e":{"w":"before","s":"efore","c":{},"d":[8],"e":true}},"d":[3,5,6],"e":true},"f":{"w":"f","s":"f","c":{"a":{"w":"fa","s":"a","c":{"s":{"w":"fastapi","s":"stapi","c":{},"d":[1,2],"e":true},"i":{"w":"failed","s":"iled","c":{},"d":[5,6,7],"e":true},"l":{"w":"false","s":"lse","c":{},"d":[7],"e":true}},"d":[],"e":false},"r":{"w":"from","s":"rom","c":{"t":{"w":"fromtimestamp","s":"timestamp","c":{},"d":[7],"e":true}},"d":[2,5,6],"e":true},"i":{"w":"fi","s":"i","c":{"l":{"w":"fil","s":"l","c":{"e":{"w":"file","s":"e","c":{"r":{"w":"fileresponse","s":"response","c":{},"d":[2,5,6],"e":true},"n":{"w":"filename","s":"name","c":{"s":{"w":"filenames","s":"s","c":{},"d":[5],"e":true}},"d":[2,3,5,6,7],"e":true},"_":{"w":"file_","s":"_","c":{"e":{"w":"file_extension","s":"extension","c":{},"d":[2],"e":true},"p":{"w":"file_path","s":"path","c":{},"d":[2,5,6,7],"e":true},"c":{"w":"file_count","s":"count","c":{},"d":[5],"e":true},"t":{"w":"file_type","s":"type","c":{},"d":[6,7],"e":true}},"d":[],"e":false},"s":{"w":"files","s":"s","c":{},"d":[2,5,6,7],"e":true},"i":{"w":"fileinfo","s":"info","c":{},"d":[6,7],"e":true},"l":{"w":"filelistresponse","s":"listresponse","c":{},"d":[6,7],"e":true}},"d":[2,6,7],"e":true},"t":{"w":"filter","s":"ter","c":{},"d":[3,8],"e":true},"l":{"w":"fill","s":"l","c":{},"d":[6],"e":true}},"d":[],"e":false},"t":{"w":"fit","s":"t","c":{},"d":[3],"e":true}},"d":[],"e":false},"l":{"w":"float","s":"loat","c":{},"d":[2,3,4],"e":true},"o":{"w":"fo","s":"o","c":{"r":{"w":"for","s":"r","c":{"m":{"w":"format","s":"mat","c":{"_":{"w":"format_size","s":"_size","c":{},"d":[5,6,7],"e":true}},"d":[4],"e":true}},"d":[2,3,5,6,7],"e":true},"u":{"w":"found","s":"und","c":{},"d":[2,5,6,7],"e":true}},"d":[],"e":false},"f":{"w":"ff","s":"f","c":{"6":{"w":"ff6277","s":"6277","c":{},"d":[5,6],"e":true},"f":{"w":"fff","s":"f","c":{},"d":[6],"e":true}},"d":[],"e":false},"'":{"w":"f'id","s":"'id","c":{},"d":[6],"e":true}},"d":[2,3,4,5,6,7],"e":true},"u":{"w":"u","s":"u","c":{"v":{"w":"uvicorn","s":"vicorn","c":{},"d":[1,7],"e":true},"p":{"w":"up","s":"p","c":{"l":{"w":"upload","s":"load","c":{"f":{"w":"uploadfile","s":"file","c":{},"d":[2],"e":true},"_":{"w":"upload_","s":"_","c":{"d":{"w":"upload_dir","s":"dir","c":{},"d":[2,5,7],"e":true},"i":{"w":"upload_image","s":"image","c":{},"d":[2],"e":true},"b":{"w":"upload_batch_images","s":"batch_images","c":{},"d":[2],"e":true},"f":{"w":"upload_files","s":"files","c":{},"d":[5],"e":true},"s":{"w":"upload_size","s":"size","c":{},"d":[5],"e":true},"c":{"w":"upload_count","s":"count","c":{},"d":[5],"e":true},"p":{"w":"upload_path","s":"path","c":{},"d":[7],"e":true}},"d":[],"e":false},"s":{"w":"uploads","s":"s","c":{},"d":[2,5,6,7],"e":true},"-":{"w":"upload-batch","s":"-batch","c":{},"d":[2],"e":true},"e":{"w":"uploaded_","s":"ed_","c":{"f":{"w":"uploaded_files","s":"files","c":{},"d":[2],"e":true},"i":{"w":"uploaded_image_url","s":"image_url","c":{},"d":[7],"e":true}},"d":[],"e":false}},"d":[2,7],"e":true},"d":{"w":"updated","s":"dated","c":{},"d":[6],"e":true}},"d":[],"e":false},"u":{"w":"uuid","s":"uid","c":{"4":{"w":"uuid4","s":"4","c":{},"d":[2,6,7],"e":true}},"d":[2,6,7],"e":true},"r":{"w":"url","s":"rl","c":{},"d":[2],"e":true},"n":{"w":"un","s":"n","c":{"i":{"w":"unique_filename","s":"ique_filename","c":{},"d":[2],"e":true},"l":{"w":"unlink","s":"link","c":{},"d":[5,7],"e":true}},"d":[],"e":false},"t":{"w":"utf-8","s":"tf-8","c":{},"d":[6],"e":true},"s":{"w":"using","s":"sing","c":{},"d":[7],"e":true}},"d":[],"e":false},"s":{"w":"s","s":"s","c":{"t":{"w":"st","s":"t","c":{"a":{"w":"sta","s":"a","c":{"n":{"w":"standard","s":"ndard","c":{},"d":[1],"e":true},"t":{"w":"stat","s":"t","c":{"i":{"w":"staticfiles","s":"icfiles","c":{},"d":[2],"e":true},"u":{"w":"status","s":"us","c":{"_":{"w":"status_code","s":"_code","c":{},"d":[2,5,6,7],"e":true}},"d":[2,3,5],"e":true}},"d":[5,7],"e":true},"r":{"w":"startswith","s":"rtswith","c":{},"d":[2],"e":true}},"d":[],"e":false},"r":{"w":"str","s":"r","c":{"e":{"w":"streamingresponse","s":"eamingresponse","c":{},"d":[2,5],"e":true},"f":{"w":"strftime","s":"ftime","c":{},"d":[7],"e":true}},"d":[2,3,4,5,6,7],"e":true},"_":{"w":"st_","s":"_","c":{"m":{"w":"st_mtime","s":"mtime","c":{},"d":[5,7],"e":true},"s":{"w":"st_size","s":"size","c":{},"d":[5,7],"e":true}},"d":[],"e":false},"o":{"w":"storage","s":"orage","c":{"-":{"w":"storage-info","s":"-info","c":{},"d":[5],"e":true}},"d":[5],"e":true},"y":{"w":"style","s":"yle","c":{},"d":[6],"e":true},"u":{"w":"study-documents","s":"udy-documents","c":{},"d":[9],"e":true}},"d":[],"e":false},"c":{"w":"sci","s":"ci","c":{"k":{"w":"scikit-image","s":"kit-image","c":{},"d":[1],"e":true},"p":{"w":"scipy","s":"py","c":{},"d":[1],"e":true}},"d":[],"e":false},"p":{"w":"sp","s":"p","c":{"l":{"w":"split","s":"lit","c":{},"d":[2,7],"e":true},"e":{"w":"specified","s":"ecified","c":{},"d":[5],"e":true}},"d":[],"e":false},"u":{"w":"su","s":"u","c":{"c":{"w":"success","s":"ccess","c":{"f":{"w":"successfully","s":"fully","c":{},"d":[4,5,6,7],"e":true}},"d":[3],"e":true},"b":{"w":"sub","s":"b","c":{},"d":[6],"e":true}},"d":[],"e":false},"a":{"w":"save","s":"ave","c":{"_":{"w":"save_","s":"_","c":{"f":{"w":"save_format","s":"format","c":{},"d":[3,4],"e":true},"k":{"w":"save_kwargs","s":"kwargs","c":{},"d":[3,4],"e":true},"a":{"w":"save_as_jpg","s":"as_jpg","c":{},"d":[7],"e":true}},"d":[],"e":false},"d":{"w":"saved","s":"d","c":{},"d":[4],"e":true}},"d":[3,4,8],"e":true},"i":{"w":"si","s":"i","c":{"g":{"w":"sigma","s":"gma","c":{},"d":[3],"e":true},"z":{"w":"size","s":"ze","c":{"_":{"w":"size_","s":"_","c":{"b":{"w":"size_bytes","s":"bytes","c":{},"d":[5,6],"e":true},"n":{"w":"size_names","s":"names","c":{},"d":[5,6],"e":true},"f":{"w":"size_formatted","s":"formatted","c":{},"d":[5,6,7],"e":true}},"d":[],"e":false}},"d":[3,4,5,6,7],"e":true}},"d":[],"e":false},"e":{"w":"se","s":"e","c":{"p":{"w":"sepia","s":"pia","c":{"_":{"w":"sepia_pixels","s":"_pixels","c":{},"d":[3],"e":true}},"d":[3],"e":true},"e":{"w":"seek","s":"ek","c":{},"d":[5],"e":true},"a":{"w":"search","s":"arch","c":{},"d":[6],"e":true}},"d":[],"e":false},"v":{"w":"svg","s":"vg","c":{"g":{"w":"svggeneraterequest","s":"generaterequest","c":{},"d":[5,6],"e":true},"r":{"w":"svgresponse","s":"response","c":{},"d":[5,6],"e":true},"_":{"w":"svg_","s":"_","c":{"c":{"w":"svg_content","s":"content","c":{},"d":[5,6],"e":true},"p":{"w":"svg_path","s":"path","c":{},"d":[6],"e":true}},"d":[],"e":false}},"d":[5,6],"e":true},"o":{"w":"sort","s":"ort","c":{},"d":[7],"e":true}},"d":[7],"e":true},"p":{"w":"p","s":"p","c":{"y":{"w":"py","s":"y","c":{"t":{"w":"python","s":"thon","c":{"-":{"w":"python-","s":"-","c":{"m":{"w":"python-multipart","s":"multipart","c":{},"d":[1],"e":true},"j":{"w":"python-jose","s":"jose","c":{},"d":[1],"e":true}},"d":[],"e":false}},"d":[8],"e":true},"d":{"w":"pydantic","s":"dantic","c":{},"d":[1,2],"e":true},"h":{"w":"pyhon","s":"hon","c":{},"d":[8],"e":true}},"d":[],"e":false},"i":{"w":"pi","s":"i","c":{"l":{"w":"pil","s":"l","c":{"l":{"w":"pillow","s":"low","c":{},"d":[1,8],"e":true}},"d":[2,3,4,8],"e":true},"x":{"w":"pixel","s":"xel","c":{},"d":[3],"e":true}},"d":[],"e":false},"a":{"w":"pa","s":"a","c":{"s":{"w":"pass","s":"ss","c":{"l":{"w":"passlib","s":"lib","c":{},"d":[1],"e":true}},"d":[4],"e":true},"t":{"w":"pat","s":"t","c":{"h":{"w":"path","s":"h","c":{"l":{"w":"pathlib","s":"lib","c":{},"d":[2],"e":true}},"d":[2,3,4,5,6],"e":true},"t":{"w":"pattern","s":"tern","c":{"1":{"w":"pattern1","s":"1","c":{},"d":[6],"e":true},"2":{"w":"pattern2","s":"2","c":{},"d":[6],"e":true},"3":{"w":"pattern3","s":"3","c":{},"d":[6],"e":true}},"d":[6],"e":true}},"d":[],"e":false},"r":{"w":"parameters","s":"rameters","c":{},"d":[2,3,4],"e":true}},"d":[],"e":false},"r":{"w":"pr","s":"r","c":{"o":{"w":"pro","s":"o","c":{"c":{"w":"process","s":"cess","c":{"e":{"w":"processed","s":"ed","c":{"_":{"w":"processed_","s":"_","c":{"5":{"w":"processed_587f4226-142a-430a-8dfc-9936203af133","s":"587f4226-142a-430a-8dfc-9936203af133","c":{},"d":[8],"e":true},"d":{"w":"processed_dir","s":"dir","c":{},"d":[2,5,6,7],"e":true},"u":{"w":"processed_url","s":"url","c":{},"d":[2,3,7],"e":true},"f":{"w":"processed_file","s":"file","c":{"n":{"w":"processed_filename","s":"name","c":{},"d":[2,3],"e":true},"s":{"w":"processed_files","s":"s","c":{},"d":[5],"e":true}},"d":[],"e":false},"i":{"w":"processed_image","s":"image","c":{"s":{"w":"processed_images","s":"s","c":{},"d":[5],"e":true}},"d":[4],"e":true},"s":{"w":"processed_size","s":"size","c":{},"d":[5],"e":true},"c":{"w":"processed_count","s":"count","c":{},"d":[5],"e":true},"p":{"w":"processed_path","s":"path","c":{},"d":[7],"e":true},"a":{"w":"processed_a370d39c-dc67-474c-b6b7-d183b6d23194","s":"a370d39c-dc67-474c-b6b7-d183b6d23194","c":{},"d":[8],"e":true}},"d":[2],"e":true}},"d":[2,3,4,5,6,7],"e":true},"b":{"w":"processbatchrequest","s":"batchrequest","c":{},"d":[2],"e":true},"-":{"w":"process-batch","s":"-batch","c":{},"d":[2],"e":true},"_":{"w":"process_","s":"_","c":{"b":{"w":"process_batch_images","s":"batch_images","c":{},"d":[2],"e":true},"m":{"w":"process_multiple_operations_async","s":"multiple_operations_async","c":{},"d":[2,3],"e":true},"s":{"w":"process_sync","s":"sync","c":{},"d":[3,4,5],"e":true},"i":{"w":"process_image_async","s":"image_async","c":{},"d":[4],"e":true}},"d":[],"e":false}},"d":[],"e":false},"f":{"w":"profile","s":"file","c":{},"d":[4],"e":true}},"d":[],"e":false},"i":{"w":"print","s":"int","c":{},"d":[3,4,6],"e":true},"e":{"w":"pre","s":"e","c":{"s":{"w":"preserv","s":"serv","c":{"e":{"w":"preserve","s":"e","c":{"_":{"w":"preserve_image_metadata_and_save","s":"_image_metadata_and_save","c":{},"d":[3,4],"e":true}},"d":[4],"e":true},"a":{"w":"preservation","s":"ation","c":{},"d":[4],"e":true}},"d":[],"e":false},"f":{"w":"prefecture","s":"fecture","c":{"s":{"w":"prefectures","s":"s","c":{},"d":[6],"e":true},"_":{"w":"prefecture_id","s":"_id","c":{"s":{"w":"prefecture_ids","s":"s","c":{},"d":[6],"e":true}},"d":[6],"e":true}},"d":[5,6],"e":true}},"d":[],"e":false}},"d":[],"e":false},"o":{"w":"po","s":"o","c":{"s":{"w":"post","s":"st","c":{},"d":[2,5,6,7],"e":true},"r":{"w":"port","s":"rt","c":{},"d":[7],"e":true}},"d":[],"e":false},"l":{"w":"please","s":"lease","c":{},"d":[2],"e":true},"n":{"w":"png","s":"ng","c":{"'":{"w":"png'","s":"'","c":{},"d":[3,4],"e":true}},"d":[2,5,8],"e":true},"u":{"w":"putdata","s":"utdata","c":{},"d":[3],"e":true}},"d":[],"e":false},"a":{"w":"a","s":"a","c":{"i":{"w":"aiofiles","s":"iofiles","c":{},"d":[1,2],"e":true},"n":{"w":"an","s":"n","c":{"y":{"w":"any","s":"y","c":{},"d":[2],"e":true},"d":{"w":"and","s":"d","c":{},"d":[3,4,5,6,7],"e":true},"g":{"w":"angle","s":"gle","c":{},"d":[3],"e":true}},"d":[2],"e":true},"s":{"w":"as","s":"s","c":{"y":{"w":"async","s":"ync","c":{"i":{"w":"asyncio","s":"io","c":{},"d":[2,3,4,5],"e":true}},"d":[2,3,4,5,6,7],"e":true},"s":{"w":"assets","s":"sets","c":{},"d":[6],"e":true}},"d":[2,3,4,5,6,7],"e":true},"p":{"w":"ap","s":"p","c":{"p":{"w":"app","s":"p","c":{"e":{"w":"append","s":"end","c":{},"d":[2,3,7],"e":true},"l":{"w":"appl","s":"l","c":{"y":{"w":"apply_pil_operation","s":"y_pil_operation","c":{},"d":[3,4],"e":true},"i":{"w":"application","s":"ication","c":{},"d":[5],"e":true}},"d":[],"e":false},"r":{"w":"approach","s":"roach","c":{},"d":[7],"e":true}},"d":[2,5,6,7],"e":true},"i":{"w":"api","s":"i","c":{"_":{"w":"api_name","s":"_name","c":{},"d":[5],"e":true}},"d":[2,5,6,7,8],"e":true}},"d":[],"e":false},"d":{"w":"add","s":"dd","c":{"_":{"w":"add_middleware","s":"_middleware","c":{},"d":[2],"e":true},"e":{"w":"added","s":"ed","c":{},"d":[6],"e":true}},"d":[],"e":false},"l":{"w":"al","s":"l","c":{"l":{"w":"allow_","s":"low_","c":{"o":{"w":"allow_origins","s":"origins","c":{},"d":[2],"e":true},"c":{"w":"allow_credentials","s":"credentials","c":{},"d":[2],"e":true},"m":{"w":"allow_methods","s":"methods","c":{},"d":[2],"e":true},"h":{"w":"allow_headers","s":"headers","c":{},"d":[2],"e":true}},"d":[],"e":false},"p":{"w":"alpha","s":"pha","c":{"_":{"w":"alpha_composite","s":"_composite","c":{},"d":[4],"e":true}},"d":[3,4],"e":true}},"d":[],"e":false},"w":{"w":"await","s":"wait","c":{},"d":[2,3,4,5],"e":true},"t":{"w":"att","s":"tt","c":{"a":{"w":"attachment","s":"achment","c":{},"d":[5],"e":true},"r":{"w":"attribute","s":"ribute","c":{},"d":[6],"e":true}},"d":[],"e":false},"f":{"w":"after","s":"fter","c":{},"d":[8],"e":true}},"d":[],"e":false},"i":{"w":"i","s":"i","c":{"m":{"w":"im","s":"m","c":{"p":{"w":"import","s":"port","c":{},"d":[2,5,6,7],"e":true},"a":{"w":"imag","s":"ag","c":{"e":{"w":"image","s":"e","c":{"f":{"w":"imagefilter","s":"filter","c":{},"d":[2,3,8],"e":true},"e":{"w":"imageenhance","s":"enhance","c":{},"d":[2],"e":true},"o":{"w":"imageops","s":"ops","c":{},"d":[2,3],"e":true},"r":{"w":"imageresponse","s":"response","c":{},"d":[2],"e":true},"b":{"w":"imagebatchresponse","s":"batchresponse","c":{},"d":[2,3],"e":true},"_":{"w":"image_","s":"_","c":{"u":{"w":"image_url","s":"url","c":{"s":{"w":"image_urls","s":"s","c":{},"d":[2,7],"e":true}},"d":[2,3,7],"e":true},"r":{"w":"image_r","s":"r","c":{"g":{"w":"image_rgba","s":"gba","c":{},"d":[4],"e":true},"e":{"w":"image_replacements","s":"eplacements","c":{},"d":[7],"e":true}},"d":[],"e":false},"i":{"w":"image_id","s":"id","c":{},"d":[7],"e":true},"f":{"w":"image_filename","s":"filename","c":{},"d":[7],"e":true},"p":{"w":"image_path","s":"path","c":{},"d":[7],"e":true}},"d":[],"e":false},"s":{"w":"images","s":"s","c":{},"d":[2,5,7],"e":true}},"d":[2,3,4,5,6,7,8],"e":true},"i":{"w":"imaging","s":"ing","c":{},"d":[8],"e":true}},"d":[],"e":false},"g":{"w":"img","s":"g","c":{"_":{"w":"img_20250607_192630989_nv_with_profile","s":"_20250607_192630989_nv_with_profile","c":{},"d":[8],"e":true}},"d":[7],"e":true}},"d":[],"e":false},"o":{"w":"io","s":"o","c":{},"d":[2,5],"e":true},"d":{"w":"id","s":"d","c":{},"d":[2,6],"e":true},"f":{"w":"if","s":"f","c":{},"d":[2,3,4,5,6,7],"e":true},"n":{"w":"in","s":"n","c":{"v":{"w":"invalid","s":"valid","c":{},"d":[2],"e":true},"p":{"w":"input_path","s":"put_path","c":{},"d":[2,3,4],"e":true},"t":{"w":"int","s":"t","c":{},"d":[3,4,5,6],"e":true},"f":{"w":"info","s":"fo","c":{},"d":[3,4,5],"e":true}},"d":[2,3,4,5,6,7],"e":true},"s":{"w":"is","s":"s","c":{"_":{"w":"is_file","s":"_file","c":{},"d":[5,7],"e":true},"o":{"w":"isoformat","s":"oformat","c":{},"d":[5],"e":true}},"d":[3],"e":true},"c":{"w":"icc","s":"cc","c":{"_":{"w":"icc_profile","s":"_profile","c":{},"d":[3,4],"e":true}},"d":[3,4,8],"e":true},"t":{"w":"items","s":"tems","c":{},"d":[7],"e":true}},"d":[5,6],"e":true},"h":{"w":"h","s":"h","c":{"t":{"w":"httpexception","s":"ttpexception","c":{},"d":[2,5,6,7],"e":true},"e":{"w":"he","s":"e","c":{"i":{"w":"height","s":"ight","c":{},"d":[3],"e":true},"a":{"w":"hea","s":"a","c":{"d":{"w":"headers","s":"ders","c":{},"d":[5],"e":true},"l":{"w":"health","s":"lth","c":{"_":{"w":"health_check","s":"_check","c":{},"d":[5],"e":true},"y":{"w":"healthy","s":"y","c":{},"d":[5],"e":true}},"d":[5],"e":true}},"d":[],"e":false},"x":{"w":"hex","s":"x","c":{},"d":[6,7],"e":true}},"d":[],"e":false},"o":{"w":"ho","s":"o","c":{"u":{"w":"hours","s":"urs","c":{},"d":[5],"e":true},"s":{"w":"host","s":"st","c":{},"d":[7],"e":true}},"d":[],"e":false}},"d":[7],"e":true},"d":{"w":"d","s":"d","c":{"i":{"w":"di","s":"i","c":{"c":{"w":"dict","s":"ct","c":{},"d":[2,3,4,7],"e":true},"r":{"w":"directory","s":"rectory","c":{},"d":[2],"e":true}},"d":[],"e":false},"e":{"w":"de","s":"e","c":{"f":{"w":"def","s":"f","c":{},"d":[2,3,4,5,6,7],"e":true},"t":{"w":"detail","s":"tail","c":{},"d":[2,5,6,7],"e":true},"l":{"w":"delete","s":"lete","c":{"d":{"w":"deleted","s":"d","c":{"_":{"w":"deleted_","s":"_","c":{"u":{"w":"deleted_uploads","s":"uploads","c":{},"d":[5],"e":true},"p":{"w":"deleted_processed","s":"processed","c":{},"d":[5],"e":true}},"d":[],"e":false}},"d":[7],"e":true},"_":{"w":"delete_file","s":"_file","c":{},"d":[7],"e":true}},"d":[5,7],"e":true}},"d":[],"e":false},"p":{"w":"dpi","s":"pi","c":{"_":{"w":"dpi_value","s":"_value","c":{},"d":[3],"e":true}},"d":[3,4],"e":true},"o":{"w":"download","s":"ownload","c":{"-":{"w":"download-batch","s":"-batch","c":{},"d":[5],"e":true},"_":{"w":"download_batch_images","s":"_batch_images","c":{},"d":[5],"e":true}},"d":[],"e":false},"a":{"w":"datetime","s":"atetime","c":{},"d":[5,6,7],"e":true}},"d":[7],"e":true},"o":{"w":"o","s":"o","c":{"p":{"w":"op","s":"p","c":{"t":{"w":"opti","s":"ti","c":{"o":{"w":"optional","s":"onal","c":{},"d":[2,7],"e":true},"m":{"w":"optimize","s":"mize","c":{},"d":[4],"e":true}},"d":[],"e":false},"e":{"w":"ope","s":"e","c":{"r":{"w":"operation","s":"ration","c":{"r":{"w":"operationrequest","s":"request","c":{},"d":[2,3],"e":true},"s":{"w":"operations","s":"s","c":{},"d":[2,3],"e":true},"_":{"w":"operation_params","s":"_params","c":{},"d":[3],"e":true}},"d":[2,3,4],"e":true},"n":{"w":"open","s":"n","c":{"c":{"w":"opencv","s":"cv","c":{},"d":[8],"e":true}},"d":[2,3,4,6,7,8],"e":true}},"d":[],"e":false},"a":{"w":"opacity","s":"acity","c":{},"d":[3,4],"e":true}},"d":[],"e":false},"s":{"w":"os","s":"s","c":{},"d":[2,5,6],"e":true},"r":{"w":"or","s":"r","c":{"i":{"w":"original","s":"iginal","c":{"_":{"w":"original_","s":"_","c":{"u":{"w":"original_url","s":"url","c":{},"d":[2,3],"e":true},"f":{"w":"original_filename","s":"filename","c":{},"d":[2,3],"e":true},"e":{"w":"original_extension","s":"extension","c":{},"d":[2],"e":true},"i":{"w":"original_image","s":"image","c":{},"d":[3,4],"e":true},"p":{"w":"original_path","s":"path","c":{},"d":[4],"e":true}},"d":[],"e":false}},"d":[2,4],"e":true}},"d":[2],"e":true},"u":{"w":"output_","s":"utput_","c":{"f":{"w":"output_f","s":"f","c":{"o":{"w":"output_format","s":"ormat","c":{},"d":[2],"e":true},"i":{"w":"output_filename","s":"ilename","c":{},"d":[2,3,7],"e":true}},"d":[],"e":false},"e":{"w":"output_extension","s":"extension","c":{},"d":[2,3,4],"e":true},"p":{"w":"output_path","s":"path","c":{},"d":[2,3,4,6,7],"e":true}},"d":[],"e":false},"n":{"w":"only","s":"nly","c":{},"d":[2],"e":true},"v":{"w":"overlay","s":"verlay","c":{"_":{"w":"overlay_with_alpha","s":"_with_alpha","c":{},"d":[3,4],"e":true}},"d":[3],"e":true},"l":{"w":"old","s":"ld","c":{"e":{"w":"older","s":"er","c":{},"d":[5],"e":true}},"d":[5],"e":true}},"d":[],"e":false},"l":{"w":"l","s":"l","c":{"i":{"w":"li","s":"i","c":{"s":{"w":"list","s":"st","c":{},"d":[2,3,5,6,7],"e":true},"b":{"w":"library","s":"brary","c":{},"d":[8],"e":true}},"d":[],"e":false},"o":{"w":"lo","s":"o","c":{"w":{"w":"lower","s":"wer","c":{},"d":[2,3,4],"e":true},"o":{"w":"loop","s":"op","c":{},"d":[3,4,5],"e":true},"c":{"w":"locations","s":"cations","c":{},"d":[7],"e":true}},"d":[],"e":false},"a":{"w":"la","s":"a","c":{"n":{"w":"lanczos","s":"nczos","c":{},"d":[3],"e":true},"m":{"w":"lambda","s":"mbda","c":{},"d":[7],"e":true},"y":{"w":"layout","s":"yout","c":{"_":{"w":"layout_image","s":"_image","c":{},"d":[7],"e":true}},"d":[7],"e":true}},"d":[],"e":false},"e":{"w":"len","s":"en","c":{},"d":[5,6,7],"e":true}},"d":[3],"e":true},"z":{"w":"zip","s":"zip","c":{"f":{"w":"zipfile","s":"file","c":{},"d":[2,5],"e":true},"_":{"w":"zip_","s":"_","c":{"b":{"w":"zip_buffer","s":"buffer","c":{},"d":[5],"e":true},"d":{"w":"zip_deflated","s":"deflated","c":{},"d":[5],"e":true},"f":{"w":"zip_file","s":"file","c":{},"d":[5],"e":true}},"d":[],"e":false}},"d":[5],"e":true},"x":{"w":"x","s":"x","c":{"m":{"w":"xml","s":"ml","c":{},"d":[2,6],"e":true}},"d":[7],"e":true},"e":{"w":"e","s":"e","c":{"t":{"w":"et","s":"t","c":{"r":{"w":"etree","s":"ree","c":{},"d":[2],"e":true}},"d":[2],"e":true},"l":{"w":"el","s":"l","c":{"e":{"w":"elementtree","s":"ementtree","c":{},"d":[2],"e":true},"s":{"w":"else","s":"se","c":{},"d":[2,3,4,6],"e":true},"i":{"w":"elif","s":"if","c":{},"d":[2,3,4,6,7],"e":true}},"d":[],"e":false},"d":{"w":"editor","s":"ditor","c":{},"d":[2,5],"e":true},"x":{"w":"ex","s":"x","c":{"i":{"w":"exi","s":"i","c":{"s":{"w":"exist","s":"st","c":{"_":{"w":"exist_ok","s":"_ok","c":{},"d":[2],"e":true},"s":{"w":"exists","s":"s","c":{},"d":[2,5,6,7],"e":true},"i":{"w":"existing","s":"ing","c":{},"d":[6],"e":true}},"d":[],"e":false},"f":{"w":"exif","s":"f","c":{},"d":[3,4],"e":true}},"d":[],"e":false},"c":{"w":"except","s":"cept","c":{"i":{"w":"exception","s":"ion","c":{},"d":[3,4,5,6,7],"e":true}},"d":[3,4,5,6,7],"e":true},"p":{"w":"expand","s":"pand","c":{},"d":[3],"e":true}},"d":[],"e":false},"r":{"w":"error","s":"rror","c":{"_":{"w":"error_message","s":"_message","c":{},"d":[2,3],"e":true}},"d":[2,3,6],"e":true},"n":{"w":"en","s":"n","c":{"a":{"w":"enablecrop","s":"ablecrop","c":{},"d":[2,3],"e":true},"d":{"w":"endswith","s":"dswith","c":{},"d":[3,4],"e":true},"c":{"w":"encoding","s":"coding","c":{},"d":[6],"e":true}},"d":[],"e":false}},"d":[3,4,5,6,7],"e":true},"v":{"w":"v","s":"v","c":{"e":{"w":"version","s":"ersion","c":{},"d":[2,5],"e":true},"a":{"w":"val","s":"al","c":{"u":{"w":"valueerror","s":"ueerror","c":{},"d":[3],"e":true},"i":{"w":"valid","s":"id","c":{},"d":[7],"e":true}},"d":[],"e":false}},"d":[],"e":false},"g":{"w":"g","s":"g","c":{"e":{"w":"ge","s":"e","c":{"t":{"w":"get","s":"t","c":{"e":{"w":"getexif","s":"exif","c":{},"d":[3,4],"e":true},"_":{"w":"get_","s":"_","c":{"e":{"w":"get_event_loop","s":"event_loop","c":{},"d":[3,4,5],"e":true},"i":{"w":"get_image","s":"image","c":{},"d":[5],"e":true},"u":{"w":"get_uploaded_image","s":"uploaded_image","c":{},"d":[5],"e":true},"s":{"w":"get_s","s":"s","c":{"t":{"w":"get_storage_info","s":"torage_info","c":{},"d":[5],"e":true},"v":{"w":"get_svg","s":"vg","c":{},"d":[6],"e":true}},"d":[],"e":false},"d":{"w":"get_directory_size","s":"directory_size","c":{},"d":[5],"e":true},"p":{"w":"get_prefectures","s":"prefectures","c":{},"d":[6],"e":true},"f":{"w":"get_file_","s":"file_","c":{"l":{"w":"get_file_list","s":"list","c":{},"d":[6],"e":true},"i":{"w":"get_file_info","s":"info","c":{},"d":[7],"e":true}},"d":[],"e":false},"t":{"w":"get_template_config","s":"template_config","c":{},"d":[7],"e":true}},"d":[],"e":false},"d":{"w":"getdata","s":"data","c":{},"d":[3],"e":true}},"d":[2,3,4,5,6,7],"e":true},"n":{"w":"generat","s":"nerat","c":{"e":{"w":"generate","s":"e","c":{"-":{"w":"generate-svg","s":"-svg","c":{},"d":[6],"e":true},"_":{"w":"generate_svg","s":"_svg","c":{},"d":[6],"e":true},"d":{"w":"generated","s":"d","c":{},"d":[6],"e":true}},"d":[],"e":false},"i":{"w":"generation","s":"ion","c":{},"d":[6],"e":true}},"d":[],"e":false}},"d":[],"e":false},"a":{"w":"gaussianblur","s":"aussianblur","c":{},"d":[3,8],"e":true},"r":{"w":"grayscale","s":"rayscale","c":{"_":{"w":"grayscale_image","s":"_image","c":{},"d":[8],"e":true}},"d":[3],"e":true},"l":{"w":"glob","s":"lob","c":{},"d":[5,7],"e":true},"b":{"w":"gb","s":"b","c":{},"d":[5,6],"e":true}},"d":[3],"e":true},"-":{"w":"-","s":"-","c":{"1":{"w":"-1","s":"1","c":{},"d":[2,7],"e":true},"2":{"w":"-2","s":"2","c":{},"d":[6],"e":true},"-":{"w":"-------------------------------","s":"------------------------------","c":{"-":{"w":"-----------------------------------------------","s":"----------------","c":{"-":{"w":"-------------------------------------------------------","s":"--------","c":{},"d":[8],"e":true}},"d":[8],"e":true}},"d":[8],"e":true}},"d":[3,5,6,7],"e":true},"j":{"w":"j","s":"j","c":{"p":{"w":"jp","s":"p","c":{"g":{"w":"jpg","s":"g","c":{"'":{"w":"jpg'","s":"'","c":{},"d":[3,4],"e":true}},"d":[2,7,8],"e":true},"e":{"w":"jpeg'","s":"eg'","c":{},"d":[3,4],"e":true}},"d":[],"e":false},"a":{"w":"japan","s":"apan","c":{"_":{"w":"japan_map_","s":"_map_","c":{},"d":[6],"e":true}},"d":[8],"e":true}},"d":[],"e":false},"w":{"w":"w","s":"w","c":{"i":{"w":"wi","s":"i","c":{"t":{"w":"with","s":"th","c":{},"d":[2,3,4,5,6,7],"e":true},"d":{"w":"width","s":"dth","c":{},"d":[3],"e":true}},"d":[],"e":false},"b":{"w":"wb","s":"b","c":{},"d":[2],"e":true},"r":{"w":"write","s":"rite","c":{},"d":[2,5,6],"e":true},"e":{"w":"web","s":"eb","c":{"p":{"w":"webp","s":"p","c":{"'":{"w":"webp'","s":"'","c":{},"d":[3,4],"e":true}},"d":[2],"e":true}},"d":[8],"e":true},"a":{"w":"warning","s":"arning","c":{},"d":[3,4,6],"e":true},"h":{"w":"while","s":"hile","c":{},"d":[5,6],"e":true}},"d":[5,6],"e":true},"'":{"w":"'","s":"'","c":{"i":{"w":"'icc_profile'","s":"icc_profile'","c":{},"d":[3,4],"e":true},"p":{"w":"'png'","s":"png'","c":{},"d":[3,4],"e":true},"j":{"w":"'jpeg'","s":"jpeg'","c":{},"d":[3,4],"e":true},"w":{"w":"'webp'","s":"webp'","c":{},"d":[3,4],"e":true},"f":{"w":"'format'","s":"format'","c":{},"d":[3,4],"e":true},"d":{"w":"'dpi'","s":"dpi'","c":{},"d":[3,4],"e":true},"o":{"w":"'optimize'","s":"optimize'","c":{},"d":[3,4],"e":true},"q":{"w":"'quality'","s":"quality'","c":{},"d":[3,4],"e":true},"c":{"w":"'compress_level'","s":"compress_level'","c":{},"d":[3,4],"e":true},"e":{"w":"'exif'","s":"exif'","c":{},"d":[3,4],"e":true},"l":{"w":"'l'","s":"l'","c":{},"d":[3,8],"e":true},"r":{"w":"'rgb","s":"rgb","c":{"'":{"w":"'rgb'","s":"'","c":{},"d":[3,4],"e":true},"a":{"w":"'rgba'","s":"a'","c":{},"d":[3,4],"e":true}},"d":[],"e":false}},"d":[3,4,6],"e":true},"q":{"w":"quality","s":"quality","c":{},"d":[4],"e":true},"k":{"w":"k","s":"k","c":{"b":{"w":"kb","s":"b","c":{},"d":[5,6],"e":true},"e":{"w":"key","s":"ey","c":{},"d":[7],"e":true}},"d":[],"e":false},"_":{"w":"_","s":"_","c":{"_":{"w":"__","s":"_","c":{"n":{"w":"__name__","s":"name__","c":{},"d":[7],"e":true},"m":{"w":"__main__","s":"main__","c":{},"d":[7],"e":true}},"d":[],"e":false}},"d":[6],"e":true},"y":{"w":"y-","s":"y-","c":{},"d":[7],"e":true}},"d":[],"e":false},"isArray":false},"embeddingModel":{"type":"Radix","node":{"w":"","s":"","c":{"c":{"w":"copilot-plus-small","s":"copilot-plus-small","c":{},"d":[1,2,3,4,5,6,7,8,9],"e":true}},"d":[],"e":false},"isArray":false},"created_at":{"type":"AVL","node":{"root":{"k":1754014500850,"v":[2],"l":{"k":1754014500848,"v":[6],"l":{"k":0,"v":[],"l":null,"r":null,"h":0},"r":null,"h":2},"r":{"k":1754014500860,"v":[6],"l":{"k":1754014500855,"v":[4],"l":{"k":1754014500853,"v":[3],"l":null,"r":null,"h":0},"r":{"k":1754014500857,"v":[5],"l":null,"r":null,"h":0},"h":1},"r":{"k":1754014500863,"v":[7],"l":null,"r":{"k":1754014500865,"v":[8,9],"l":null,"r":null,"h":0},"h":1},"h":2},"h":3}},"isArray":false},"ctime":{"type":"AVL","node":{"root":{"k":1754014057625,"v":[8],"l":{"k":0,"v":[],"l":null,"r":{"k":1754014057597,"v":[9],"l":null,"r":null,"h":0},"h":1},"r":{"k":1754014057662,"v":[8],"l":null,"r":null,"h":0},"h":2}},"isArray":false},"mtime":{"type":"AVL","node":{"root":{"k":1754014057625,"v":[8],"l":{"k":0,"v":[],"l":null,"r":{"k":1754014057597,"v":[9],"l":null,"r":null,"h":0},"h":1},"r":{"k":1754014057662,"v":[8],"l":null,"r":null,"h":0},"h":2}},"isArray":false},"tags":{"type":"Radix","node":{"w":"","s":"","c":{},"d":[],"e":false},"isArray":true},"extension":{"type":"Radix","node":{"w":"","s":"","c":{"m":{"w":"md","s":"md","c":{},"d":[1,2,3,4,5,6,7,8,9],"e":true}},"d":[],"e":false},"isArray":false}},"vectorIndexes":{"embedding":{"size":256,"vectors":{"7b4c3a5f2351e68d3fab702932a69aab":[0.9999999840725705,[0.011612103320658207,-0.0011822800152003765,-0.07534360885620117,-0.01577736996114254,0.045739706605672836,-0.011674323119223118,0.03944488987326622,-0.021043282002210617,0.02258147858083248,0.04752274975180626,0.07492959499359131,0.01255611889064312,0.06287488341331482,-0.09403213858604431,0.03789662569761276,0.026482563465833664,0.012898876331746578,-0.08263283967971802,0.09865418821573257,0.11030473560094833,0.024911943823099136,-0.05934242904186249,-0.06820425391197205,-0.07226164638996124,0.08287546038627625,-0.001275463029742241,-0.01637454517185688,0.037791404873132706,0.07062132656574249,0.039205607026815414,-0.04758334904909134,-0.08585456013679504,-0.045196641236543655,0.08945898711681366,-0.07698230445384979,0.09185955673456192,0.13679568469524384,0.05639876425266266,0.11848435550928116,-0.09838143736124039,-0.12029191851615906,-0.008582339622080326,-0.07267630100250244,-0.039785195142030716,0.0930819883942604,-0.04937835410237312,-0.009207741357386112,0.06974160671234131,0.00798895675688982,-0.06522854417562485,-0.10716334730386734,0.01964573562145233,-0.07626038044691086,0.05662716180086136,0.00038604100700467825,0.0317845344543457,-0.027653768658638,-0.01650017313659191,0.06058117747306824,0.08460398763418198,-0.03000262752175331,-0.01725228689610958,-0.052377987653017044,0.07479159533977509,0.05958108231425285,0.06146743521094322,0.050419725477695465,-0.00825952086597681,0.03374217078089714,0.01727975159883499,-0.027637479826807976,0.013540261425077915,0.04419426992535591,0.013509799726307392,-0.0323764830827713,0.1176234632730484,0.049012377858161926,0.10774937272071838,-0.043245214968919754,-0.05977664515376091,-0.0241787601262331,0.031758569180965424,0.04358730465173721,-0.04631511867046356,0.0019522550282999873,-0.0246098842471838,0.025728687644004822,-0.08317682892084122,0.016024144366383553,-0.05406675860285759,0.08543485403060913,0.04065857082605362,-0.04970730468630791,-0.18573878705501556,0.03261207416653633,0.0838395357131958,0.05133182555437088,-0.016544252634048462,-0.000887693022377789,-0.04318900406360626,-0.0013197279768064618,0.0759957954287529,0.0056588491424918175,-0.050283536314964294,-0.030374474823474884,-0.02033447101712227,0.08276056498289108,0.032190654426813126,0.10064388811588287,0.003728956915438175,0.10724415630102158,-0.02427934855222702,-0.2242278754711151,0.001304088975302875,-0.023248743265867233,-0.0030611250549554825,0.06984330713748932,0.04405134543776512,-0.05335630849003792,0.036065418273210526,0.029940830543637276,0.013917206786572933,-0.05453876778483391,0.008590481244027615,-0.16393128037452698,-0.02791140414774418,-0.1378859132528305,0.11559205502271652,-0.051989588886499405,-0.05203889682888985,-0.049318380653858185,0.00365624506957829,0.0529678575694561,0.020498352125287056,0.02083425782620907,0.1274396777153015,0.046119362115859985,0.01856997236609459,0.052558690309524536,-0.07025182992219925,-0.07955639064311981,-0.005634626839309931,0.04356458783149719,-0.008206197991967201,0.10660935193300247,0.09541735053062439,0.09757056087255478,-0.00006706800195388496,0.05718109384179115,-0.05366230383515358,-0.019304810091853142,0.11582787334918976,0.02039388194680214,-0.0892147645354271,-0.07385305315256119,-0.05072743073105812,0.08153043687343597,-0.02977944351732731,-0.016650337725877762,0.04338465631008148,0.08172457665205002,-0.01920686475932598,-0.02227884531021118,-0.05656437575817108,0.0322924368083477,0.0007559949881397188,-0.026787107810378075,-0.10637110471725464,-0.03700455278158188,-0.03565166890621185,-0.08093057572841644,-0.03465324640274048,-0.06515423953533173,0.018204331398010254,-0.11724190413951874,-0.0796436071395874,0.13176283240318298,0.11577394604682922,-0.04878579080104828,-0.09008460491895676,0.03251853585243225,-0.03919053450226784,0.07668337225914001,0.15247894823551178,0.04198318347334862,0.03749001398682594,-0.027346109971404076,-0.007369211874902248,-0.06891928613185883,0.15330952405929565,-0.008283049799501896,0.020245790481567383,-0.039238546043634415,-0.048563942313194275,0.007612837944179773,-0.06932129710912704,0.10206935554742813,0.0397086963057518,-0.04473486542701721,-0.013630877248942852,0.12738686800003052,-0.059995755553245544,0.12021336704492569,-0.002558426931500435,0.0017764730146154761,-0.0005593710229732096,0.05085192248225212,-0.03939702361822128,-0.006783952005207539,-0.034911464899778366,0.005063103046268225,-0.025969242677092552,0.06261660903692245,-0.03812876716256142,-0.003249994944781065,-0.10460439324378967,-0.015637777745723724,-0.020193494856357574,-0.016372667625546455,0.11547552794218063,-0.026630979031324387,-0.03193731606006622,-0.06025092676281929,0.003274539951235056,0.020328035578131676,-0.01600802317261696,0.08735199272632599,0.028448034077882767,-0.001471707015298307,0.005944874137639999,0.06220715865492821,-0.05862417072057724,0.002763794967904687,-0.05331508070230484,-0.019526928663253784,0.08018498867750168,-0.028832990676164627,0.024393077939748764,0.0010215949732810259,0.006306921131908894,-0.06994426250457764,-0.012109567411243916,-0.035769421607255936,-0.07441289722919464,0.035644955933094025,0.03774040564894676,0.07494498044252396,0.03227738291025162,0.04575980454683304,-0.07573956251144409,-0.016376646235585213,-0.04340251162648201,0.03597968444228172,-0.017320919781923294,-0.013692361302673817,-0.08043397217988968]],"1f18119a228357d4a4d1ad176766099e":[0.9999999621459603,[-0.04187353327870369,0.020602969452738762,-0.08926047384738922,0.025018300861120224,0.0318581722676754,-0.018569502979516983,-0.05270786210894585,-0.03838645666837692,0.04752543196082115,0.12776362895965576,0.06285934150218964,0.07823815196752548,0.04655316844582558,-0.15225692093372345,0.03457823023200035,0.05835985019803047,0.06582667678594589,-0.05418920889496803,0.03743061050772667,0.051615290343761444,0.007191181182861328,-0.07610727101564407,-0.07223008573055267,-0.019067082554101944,0.08858382701873779,-0.008597580716013908,-0.03301548585295677,-0.10410787910223007,0.04441075772047043,0.0797639787197113,-0.08281474560499191,-0.11036895960569382,-0.05936606600880623,0.027694661170244217,-0.018837375566363335,0.097102589905262,0.11460651457309723,0.08033737540245056,0.11954986304044724,-0.08989181369543076,-0.12697912752628326,0.08107102662324905,-0.01958310417830944,-0.03956978768110275,0.08832637965679169,-0.021755065768957138,-0.04248722642660141,0.04292651265859604,-0.0009495830163359642,-0.031051114201545715,-0.08600889891386032,0.04846874251961708,-0.0706610232591629,0.09488147497177124,0.027833018451929092,0.021795427426695824,0.02686094492673874,0.04015952721238136,0.09415125846862793,0.05084410309791565,-0.07289963215589523,0.015656789764761925,-0.01619808003306389,0.0761539414525032,0.0023126481100916862,0.06120814010500908,-0.0010641419794410467,0.04456989839673042,0.049839604645967484,0.005978048779070377,-0.03627823293209076,0.012644991278648376,0.04928498715162277,0.012734378688037395,-0.00357997789978981,0.11068254709243774,0.07737355679273605,-0.01369665376842022,-0.03693549335002899,-0.1008293405175209,-0.11788298189640045,0.003628131002187729,0.026519110426306725,-0.059981752187013626,-0.012087027542293072,-0.02233203873038292,0.023712385445833206,-0.026193007826805115,0.05639345198869705,-0.0567844994366169,0.017424993216991425,0.053039614111185074,-0.01657840982079506,-0.12852273881435394,0.020401932299137115,0.043720755726099014,0.010195394977927208,0.0023015779443085194,0.019723283126950264,-0.010745290666818619,0.0634639710187912,0.057138822972774506,-0.06510971486568451,0.021392500028014183,0.017641831189393997,-0.058494485914707184,0.052158381789922714,0.030833519995212555,0.09778639674186707,0.02495681308209896,0.15874740481376648,0.03296356648206711,-0.15255874395370483,-0.03718852996826172,0.002516231033951044,0.01625332422554493,-0.0007444809889420867,0.020629001781344414,-0.004547454882413149,-0.048021264374256134,-0.01983255334198475,-0.03432702645659447,-0.06534683704376221,0.053035613149404526,-0.1703602373600006,-0.004527105949819088,-0.12648418545722961,0.1098928228020668,0.009018759243190289,0.02845022641122341,0.010314244776964188,0.00145508605055511,0.012136928737163544,0.0331476591527462,0.004374300129711628,0.05508717522025108,0.028544455766677856,0.005947829224169254,0.01463131420314312,-0.053146593272686005,-0.03977295383810997,0.058281026780605316,0.035970017313957214,0.0016152240568771958,0.13454602658748627,0.07684183120727539,0.07447711378335953,-0.028241977095603943,0.07502429932355881,-0.08776511996984482,0.015298132784664631,0.09081385284662247,0.029931090772151947,-0.045704107731580734,-0.07716725021600723,0.03949841856956482,0.014040539041161537,-0.09887225925922394,-0.10712441056966782,0.049556005746126175,0.02964307740330696,0.04059375450015068,0.01227634772658348,-0.0692618116736412,0.027664102613925934,-0.015481632202863693,-0.05626911669969559,-0.04156765341758728,-0.025774752721190453,0.05243109166622162,-0.02723531238734722,-0.061316002160310745,-0.03627442941069603,0.07236851751804352,-0.13373874127864838,-0.03452910855412483,0.12079023569822311,0.05989907681941986,-0.04029711335897446,-0.06689716875553131,0.03532882034778595,-0.10520892590284348,0.08846282213926315,0.09149108082056046,0.05951067432761192,0.05756337568163872,-0.050197821110486984,-0.040742773562669754,-0.03213920816779137,0.19604599475860596,0.007590975146740675,0.023479515686631203,-0.04031853750348091,0.030666479840874672,0.03835024684667587,-0.06295163929462433,0.1624716967344284,0.015484817326068878,-0.07961980253458023,-0.009328644722700119,0.17536507546901703,-0.08469777554273605,0.04924449324607849,-0.020441830158233643,0.055156901478767395,0.03940713778138161,0.06405746191740036,-0.08067946881055832,-0.008823592215776443,-0.0704430341720581,0.046480968594551086,-0.018083730712532997,0.09318409115076065,-0.0430198609828949,0.06082426756620407,-0.08304112404584885,0.015736015513539314,-0.009473109617829323,-0.03610437363386154,0.053784266114234924,-0.0012627680553123355,-0.0014459319645538926,-0.028515227138996124,0.02142053097486496,-0.017857128754258156,0.01568036712706089,-0.013625828549265862,0.015395570546388626,0.019426075741648674,-0.014524687081575394,-0.02754347398877144,-0.05899561941623688,-0.023688549175858498,-0.016743110492825508,-0.024953432381153107,0.05313163995742798,-0.08517825603485107,-0.004395452793687582,-0.023437820374965668,0.007879777811467648,-0.08971983194351196,-0.013291611336171627,-0.018305059522390366,-0.0731494203209877,0.03138056397438049,0.18050414323806763,0.04590627923607826,-0.01582648605108261,0.08576004952192307,-0.07029278576374054,-0.004964555148035288,-0.006680184043943882,0.06326516717672348,-0.0070893168449401855,-0.037930212914943695,-0.006966885179281235]],"fdf9b5ff709a96f1f4b2f9548042e2e9":[1.0000000006556802,[-0.04506051912903786,0.04258829355239868,-0.045775413513183594,0.029112717136740685,0.033778198063373566,-0.03844926133751869,-0.05628833547234535,-0.022393209859728813,0.028377369046211243,0.10140430927276611,0.1206076443195343,0.0318748913705349,0.05213426426053047,-0.11741891503334045,-0.01297726295888424,0.04768308624625206,0.11920614540576935,-0.06009914353489876,0.0053979819640517235,0.04335908591747284,0.028839142993092537,-0.019121460616588593,-0.05493208393454552,-0.0068719950504601,0.03299768269062042,-0.042075857520103455,-0.0069160861894488335,-0.11166670173406601,0.08610393106937408,0.04229255020618439,-0.1206749901175499,-0.08101298660039902,-0.07591458410024643,-0.023669766262173653,-0.02139841392636299,0.16382132470607758,0.10001441836357117,0.13512974977493286,0.09066391736268997,-0.08337884396314621,-0.08210156112909317,0.10236124694347382,0.008462520316243172,-0.021510299295186996,0.07548385113477707,-0.0774623304605484,-0.003954630810767412,0.0028173059690743685,0.01599423587322235,-0.07810718566179276,-0.01968187838792801,0.03559843823313713,-0.04329749196767807,0.038562748581171036,-0.0202607661485672,0.016542237251996994,0.00031392500386573374,0.017685825005173683,0.10266392678022385,0.02547513134777546,-0.05211424082517624,-0.017078407108783722,0.0010190110187977552,0.08798857033252716,0.005283927079290152,0.05466247722506523,0.014196054078638554,0.0017187140183523297,-0.0313665047287941,-0.01085907407104969,-0.019332727417349815,0.08260384202003479,0.06581529229879379,0.06547406315803528,0.03133898228406906,0.11071263998746872,0.07590882480144501,-0.024595685303211212,0.018831679597496986,-0.08791204541921616,-0.12545746564865112,0.0019154089968651533,-0.019760029390454292,-0.01509582344442606,-0.0532255545258522,0.020632002502679825,-0.04535051807761192,-0.08138439059257507,0.06294561922550201,-0.07717390358448029,0.044992126524448395,0.03910434991121292,-0.04870365187525749,-0.09445890039205551,0.05091496929526329,0.025472626090049744,0.053437668830156326,-0.004921753890812397,0.023605952039361,-0.03310520201921463,0.022682221606373787,0.017903119325637817,-0.03731057792901993,-0.011256212368607521,0.014625689946115017,-0.07706575095653534,0.08720420300960541,-0.01630259118974209,0.10875053703784943,-0.0030856190714985132,0.0968351811170578,0.0763101652264595,-0.11757350713014603,-0.002639296930283308,-0.041912030428647995,-0.012416861020028591,0.006620925851166248,-0.008592729456722736,-0.01432924997061491,-0.08209632337093353,-0.020714174956083298,-0.06311347335577011,-0.07419468462467194,0.1207464337348938,-0.17949220538139343,-0.0061574578285217285,-0.0715842917561531,0.04036382958292961,0.011510655283927917,0.002216164954006672,-0.03460124135017395,0.008073900826275349,-0.03922112658619881,0.07727048546075821,-0.011903192847967148,0.035597871989011765,-0.0009115649736486375,0.015462497249245644,-0.06754271686077118,-0.01850588619709015,-0.04495258256793022,-0.018438924103975296,0.059027448296546936,-0.010833597742021084,0.1489861011505127,0.11307881772518158,0.061721593141555786,-0.04117308929562569,0.09137066453695297,-0.06637433916330338,-0.0007484569796361029,0.05186488851904869,0.029177803546190262,0.0037083590868860483,-0.11082501709461212,0.06526163965463638,-0.03846585005521774,-0.07304348796606064,-0.07152297347784042,0.03177530691027641,-0.004017240833491087,-0.033067259937524796,0.02141808345913887,-0.04689647629857063,0.03119993396103382,0.032111503183841705,-0.062127575278282166,-0.029811277985572815,0.019531676545739174,0.015512293204665184,-0.098078653216362,-0.03263212740421295,-0.10948365181684494,0.03207555040717125,-0.12557926774024963,-0.006206313148140907,0.06815086305141449,0.12179409712553024,-0.10824739187955856,-0.03707527369260788,0.028321968391537666,-0.07634871453046799,0.08746975660324097,0.09845927357673645,0.019186807796359062,0.055998463183641434,-0.011038239113986492,-0.042677074670791626,0.010731262154877186,0.19514793157577515,-0.05836109071969986,-0.0022875999566167593,-0.0012075729900971055,0.05602654814720154,0.007439751178026199,-0.054312802851200104,0.1810651272535324,0.005686564836651087,-0.013488450087606907,0.03205733001232147,0.11790009588003159,-0.06634808331727982,0.058554258197546005,-0.015457738190889359,0.030576087534427643,0.07332240045070648,0.08589020371437073,-0.06362313032150269,-0.006345339119434357,-0.04822184890508652,0.05354274436831474,-0.028560133650898933,0.11395610123872757,-0.010203959420323372,0.028947293758392334,-0.04930544272065163,0.12572255730628967,0.012619725428521633,-0.04045562446117401,0.09085273742675781,-0.0176274161785841,-0.06363843381404877,-0.04467832297086716,0.013052530586719513,0.01727152429521084,0.010573397390544415,-0.02693355455994606,0.03712156042456627,0.020782139152288437,-0.07163401693105698,-0.01862901635468006,-0.03817274793982506,-0.00006259200017666444,0.03314679116010666,0.022977536544203758,0.020612269639968872,-0.054407428950071335,-0.05753306671977043,0.00624846899881959,-0.01021225843578577,-0.0667266696691513,-0.0660494938492775,-0.04113103076815605,-0.09505482763051987,0.03637475520372391,0.1572536826133728,0.037410005927085876,-0.03880501911044121,0.06372372806072235,-0.1296430379152298,-0.02197526954114437,-0.03420696407556534,0.05263015627861023,-0.051585063338279724,-0.03044908493757248,0.006852760910987854]],"9ca9b5355017a0ddced116c218340237":[1.000000026874388,[-0.06352227926254272,0.06869495660066605,-0.02158040925860405,0.004836364183574915,0.042344216257333755,-0.037926048040390015,-0.03886937350034714,-0.018525253981351852,0.013455534353852272,0.09383317083120346,0.11080832034349442,0.0569150373339653,0.06762085109949112,-0.13307979702949524,0.005302795208990574,0.05252176895737648,0.10627949982881546,-0.03601433336734772,0.012818446382880211,0.039986930787563324,0.02909591607749462,-0.0394766628742218,-0.08146405220031738,-0.026297222822904587,-0.0009414699743501842,-0.03760349750518799,-0.015145947225391865,-0.0965312272310257,0.07624074071645737,0.07803180068731308,-0.15490028262138367,-0.08801272511482239,-0.0463908389210701,-0.056754257529973984,0.01014623697847128,0.1379026174545288,0.10847967118024826,0.12766002118587494,0.05185367912054062,-0.07737739384174347,-0.07545394450426102,0.05884101614356041,0.015797149389982224,-0.025807823985815048,0.06298304349184036,-0.07597087323665619,0.005433449987322092,0.029831653460860252,-0.020373309031128883,-0.1108337864279747,-0.000640068028587848,0.043580543249845505,-0.026161259040236473,0.04626786336302757,-0.02041022665798664,-0.002242637099698186,0.005275922827422619,-0.00036660299520008266,0.09618859738111496,0.055006224662065506,-0.036942001432180405,-0.023869799450039864,-0.00200758408755064,0.08415504544973373,-0.022579925134778023,0.0455893911421299,0.0025054619181901217,-0.02558816410601139,-0.029645340517163277,-0.02041005901992321,-0.01957240328192711,0.07753360271453857,0.08502446860074997,0.039091140031814575,-0.0134864067658782,0.08951976895332336,0.056745417416095734,-0.020233888179063797,0.019687892869114876,-0.06504412740468979,-0.10612030327320099,0.02204747498035431,-0.05407387390732765,-0.002295274054631591,-0.044959068298339844,0.030876126140356064,-0.013028238900005817,-0.07961209863424301,0.04314035549759865,-0.062571682035923,0.03215452656149864,0.03256496042013168,-0.0777607411146164,-0.10597267746925354,0.0640643835067749,0.025190526619553566,0.05422210693359375,-0.030402809381484985,0.032879848033189774,-0.04103655368089676,-0.027363095432519913,-0.0011087519815191627,-0.04077860340476036,-0.030529357492923737,-0.02227548137307167,-0.07453090697526932,0.10335889458656311,0.002087977947667241,0.11129134893417358,-0.04402996972203255,0.09596522152423859,0.06457220762968063,-0.13107085227966309,-0.019312135875225067,-0.043798282742500305,0.0169631727039814,0.028928883373737335,-0.03145461529493332,-0.0034700180403888226,-0.025092992931604385,-0.03916292265057564,-0.0600467212498188,-0.10140760987997055,0.1472456455230713,-0.17457959055900574,-0.010004740208387375,-0.08283573389053345,0.04225422814488411,-0.012966400012373924,0.0014691180549561977,-0.021520977839827538,0.0018550179665908217,0.002283531939610839,0.07383984327316284,0.009185580536723137,0.028500335291028023,-0.003449033945798874,0.0029742619954049587,-0.07177112996578217,-0.030255308374762535,-0.04564465582370758,-0.011346685700118542,0.05495648458600044,0.01335966307669878,0.1373698115348816,0.1376756876707077,0.08232004940509796,-0.07800718396902084,0.09607774764299393,-0.06434980779886246,0.012917484156787395,0.03874819725751877,0.027521656826138496,-0.002860856940969825,-0.12325496226549149,0.046110574156045914,-0.03316732123494148,-0.10079474002122879,-0.06982219964265823,0.038068901747465134,0.03606085851788521,-0.05486850440502167,-0.004703837912529707,-0.03274686262011528,0.03708413243293762,0.03513442724943161,-0.0489194318652153,-0.05244889482855797,0.02794034406542778,0.020793301984667778,-0.0912567749619484,0.005800032056868076,-0.13282915949821472,0.04650481045246124,-0.08557093888521194,-0.03403018042445183,0.08469364792108536,0.1075577437877655,-0.12012545764446259,-0.03451760485768318,0.0037217470817267895,-0.05399395897984505,0.09101120382547379,0.07791459560394287,0.01377835962921381,0.03323742002248764,-0.014471174217760563,-0.06599734723567963,0.019728239625692368,0.2108275294303894,-0.006815159227699041,-0.0067079379223287106,0.010691485367715359,0.047781892120838165,0.01474654022604227,-0.08891984075307846,0.16487173736095428,0.01593402400612831,0.013228574767708778,0.04230755567550659,0.08516889065504074,-0.09227090328931808,0.06990158557891846,-0.01471493486315012,0.0167250856757164,0.08051805943250656,0.03335113450884819,-0.09220472723245621,-0.05549975857138634,-0.060625094920396805,0.04242606461048126,-0.017418742179870605,0.08716391772031784,-0.014741797000169754,0.0032426980324089527,-0.0407055988907814,0.11972807347774506,-0.011128607206046581,-0.06997665017843246,0.07641694694757462,-0.021057991310954094,-0.06545305997133255,-0.02085263468325138,-0.002900491002947092,0.003819673089310527,-0.008563165552914143,-0.021020865067839622,0.019147204235196114,-0.023474907502532005,-0.07231955230236053,-0.0027335509657859802,-0.02967338263988495,-0.00915701873600483,0.03146424889564514,0.03190840780735016,0.03797168284654617,-0.0535542257130146,-0.026516590267419815,-0.023054243996739388,0.0011586439795792103,-0.04104399308562279,-0.04416286200284958,-0.0019143619574606419,-0.13061442971229553,0.025745222344994545,0.1680082529783249,0.01123203244060278,-0.020462211221456528,0.06794168800115585,-0.1426306664943695,0.002178170019760728,-0.02418801188468933,0.034420982003211975,-0.028355980291962624,-0.025683807209134102,-0.019010934978723526]],"80f7a1dbcb9542d4724e15cc1ec5e830":[0.9999999945308031,[-0.01076595764607191,0.026315176859498024,-0.027664078399538994,0.025909792631864548,0.003352842992171645,-0.0880967304110527,-0.024647317826747894,-0.026999456807971,0.05688167363405228,0.11554893851280212,0.08957383036613464,0.08765134960412979,0.06958158314228058,-0.18002375960350037,0.009046078659594059,0.04364270716905594,0.016462571918964386,-0.022010141983628273,0.008492669090628624,0.026441726833581924,0.021021444350481033,-0.10770436376333237,-0.08705312758684158,-0.06684502214193344,0.0672716572880745,-0.030260853469371796,-0.041452549397945404,-0.1096874326467514,-0.02071080543100834,0.055586107075214386,-0.12106025218963623,-0.10950838774442673,-0.051593150943517685,-0.046127572655677795,0.0029510429594665766,0.12182042002677917,0.12851232290267944,0.06096964329481125,0.0709291622042656,-0.12172651290893555,-0.08681049197912216,0.03993181511759758,0.010721075348556042,0.0024707179982215166,0.04912243410944939,-0.020245682448148727,-0.05826494097709656,-0.034988559782505035,-0.04179557412862778,-0.0691613107919693,-0.06649252027273178,0.009573835879564285,-0.02871442213654518,0.07999739050865173,-0.05846152827143669,0.0792422741651535,-0.012121416628360748,0.03787776827812195,0.0759272649884224,0.05209203436970711,-0.021587830036878586,0.011405752040445805,-0.04641782119870186,0.07096295058727264,-0.019251860678195953,0.040404416620731354,-0.018520738929510117,0.01810716837644577,0.03730764612555504,-0.024447523057460785,-0.051538802683353424,-0.047983575612306595,0.0424850694835186,0.010767272673547268,0.008888537995517254,0.0725618451833725,0.03822891041636467,0.005037484224885702,-0.009093450382351875,-0.09381299465894699,-0.08928848803043365,0.027215691283345222,0.008832631632685661,-0.043685637414455414,-0.05644764006137848,-0.07341887801885605,0.07037260383367538,-0.016669753938913345,0.06335731595754623,-0.08118800818920135,0.013441470451653004,0.03986738622188568,-0.013388203456997871,-0.11689943075180054,0.0009084810153581202,0.023646892979741096,0.05205544829368591,-0.03799322247505188,0.06646016985177994,-0.028948891907930374,0.041597966104745865,0.08614761382341385,-0.12328537553548813,0.015947790816426277,-0.004767017904669046,-0.08427916467189789,0.07405416667461395,0.018995754420757294,0.11683212220668793,0.027306940406560898,0.13168781995773315,0.06068829074501991,-0.11873290687799454,-0.0625077560544014,0.00791164766997099,0.04295513406395912,0.046743810176849365,-0.0024521721061319113,0.0093284472823143,-0.033344343304634094,-0.047823216766119,0.03633519634604454,-0.07065483927726746,0.11012084037065506,-0.13705234229564667,-0.007971647195518017,-0.0587589256465435,0.056430742144584656,0.05984331667423248,0.005379347130656242,0.010979865677654743,-0.030404187738895416,0.016323132440447807,0.07821868360042572,-0.012408740818500519,0.04513315111398697,0.07858079671859741,0.00040816899854689837,0.046751897782087326,-0.08624611794948578,0.016766589134931564,0.0695275217294693,0.039895836263895035,0.00976814515888691,0.11460233479738235,0.05729677155613899,0.07013426721096039,-0.010829203762114048,0.06773088872432709,-0.03778097778558731,-0.02974480576813221,0.00651903823018074,-0.004176708869636059,-0.040807969868183136,-0.09763101488351822,0.0007361909956671298,-0.02292553149163723,-0.10873875766992569,-0.059708014130592346,0.05023209750652313,-0.0012986829970031977,0.02469487302005291,0.01874164678156376,-0.0862155556678772,0.01575949229300022,0.0028171660378575325,-0.05512237548828125,-0.046036817133426666,0.0018615430453792214,0.020903639495372772,-0.051385339349508286,-0.06853729486465454,-0.07493319362401962,0.0347636379301548,-0.09643196314573288,-0.05317893996834755,0.14119704067707062,0.08772905170917511,-0.04349265247583389,-0.01438507903367281,0.011983360163867474,-0.06361500918865204,0.10545378178358078,0.1659984588623047,0.0589563213288784,0.03284968063235283,-0.09397000819444656,-0.06547165662050247,-0.0516132228076458,0.21911011636257172,0.011816798709332943,0.01036487054079771,-0.053186409175395966,0.025895899161696434,0.039016373455524445,-0.0670490711927414,0.1290307641029358,-0.0069717830047011375,-0.08652375638484955,-0.0007591749890707433,0.10619403421878815,-0.09994737058877945,0.04821278154850006,0.02222364768385887,0.06376900523900986,0.03698479011654854,0.08022302389144897,-0.04485335573554039,0.010396575555205345,-0.054122019559144974,0.049648866057395935,0.00148519198410213,0.1174202635884285,-0.03334273770451546,0.021701838821172714,-0.09929011017084122,0.01843700185418129,-0.033175550401210785,-0.03697419539093971,0.08700496703386307,-0.012574552558362484,-0.08198733627796173,-0.029757168143987656,0.04297437518835068,-0.04989762231707573,-0.029656589031219482,0.005215430166572332,-0.018474631011486053,0.006605634931474924,-0.03508639708161354,0.012494835071265697,-0.05753745883703232,-0.00020381899958010763,0.03313448280096054,-0.030734408646821976,0.02002565748989582,-0.021901143714785576,-0.025691917166113853,-0.07172182202339172,0.06787634640932083,-0.0731375440955162,0.02903706394135952,-0.035772379487752914,-0.0900120884180069,0.001106722978875041,0.17673148214817047,0.055533409118652344,-0.012846512719988823,0.10624692589044571,-0.05636526644229889,0.02420947328209877,-0.00039713599835522473,0.037789806723594666,-0.03583109378814697,-0.03563375771045685,0.023493444547057152]],"e23a8f2b97eb4b4ce2c21dbf16b77f2c":[0.9999999694061263,[0.01907537132501602,0.04801199212670326,-0.045238152146339417,0.009219806641340256,0.08120504021644592,-0.04569428414106369,0.02388487569987774,-0.010889282450079918,0.04858207702636719,0.09553346037864685,0.0963396430015564,0.134295254945755,0.02046225592494011,-0.1726287603378296,0.03561114892363548,0.0014042139519006014,0.011660679243505001,-0.0024298580829054117,-0.00862045492976904,0.022183923050761223,0.03386032581329346,-0.11701173335313797,-0.058110229671001434,-0.03716324269771576,0.019182955846190453,-0.02538057416677475,-0.024375734850764275,-0.041063666343688965,-0.013599884696304798,0.0945683941245079,-0.1420382857322693,-0.14127172529697418,-0.053780697286129,-0.049713268876075745,0.013610804453492165,0.08180751651525497,0.12403113394975662,0.06429518759250641,0.07257363200187683,-0.05583537369966507,-0.10980430245399475,0.07103534042835236,0.026681862771511078,0.06068871542811394,0.027410117909312248,-0.05657856911420822,-0.007084769196808338,0.04278123751282692,-0.019400883466005325,-0.07034958899021149,-0.00959389004856348,0.010332080535590649,-0.003587692975997925,0.06846646219491959,0.017056718468666077,0.057953789830207825,-0.01848761737346649,0.0447143018245697,0.06442227214574814,0.06740539520978928,-0.06501203775405884,-0.007403586991131306,0.0003714869963005185,0.13623423874378204,-0.03618746995925903,0.04071580991148949,-0.07561328262090683,0.04245765134692192,0.04850521311163902,-0.04734649881720543,-0.07102490961551666,0.0300812516361475,0.05517960712313652,0.0075250910595059395,0.017931975424289703,0.10222955793142319,0.09579149633646011,-0.0170668363571167,-0.05712094157934189,-0.08701629191637039,-0.11761283129453659,0.027093155309557915,-0.027744555845856667,-0.0644877478480339,-0.028366409242153168,-0.028509119525551796,0.09356027841567993,-0.022314129397273064,0.05469133332371712,-0.030038833618164062,-0.003331840969622135,0.021402012556791306,-0.008866296149790287,-0.141278475522995,-0.02338993363082409,0.025940556079149246,0.00767860421910882,-0.019724776968359947,-0.01943785324692726,-0.015527735464274883,0.05459114536643028,0.02045191079378128,-0.08795923739671707,0.042896855622529984,-0.00720539316534996,-0.06515531986951828,0.042438749223947525,0.0673697292804718,0.11915645003318787,0.017598113045096397,0.09880885481834412,0.012445916421711445,-0.1144702136516571,-0.06245721876621246,-0.044523369520902634,0.04400239884853363,0.0339726023375988,-0.003859590971842408,-0.07121835649013519,0.0006230589933693409,-0.029319362714886665,0.01761757768690586,-0.08004774898290634,0.07010917365550995,-0.13619138300418854,-0.023159127682447433,-0.08361506462097168,0.08154800534248352,0.009263844229280949,0.11096467077732086,-0.042531877756118774,-0.013367901556193829,0.04483136907219887,0.0611175000667572,-0.003248451976105571,0.0360570028424263,0.0699487030506134,-0.050703100860118866,0.061023421585559845,-0.02723591960966587,-0.029950035735964775,0.06003515422344208,0.11722749471664429,0.03474089503288269,0.1770782619714737,0.0964527279138565,0.07467519491910934,0.001118078944273293,0.0593726821243763,-0.05314955115318298,-0.05049271136522293,-0.035244692116975784,0.03061033971607685,-0.03783640265464783,-0.06622348725795746,-0.011725394055247307,0.05323098227381706,-0.10940634459257126,-0.004572153091430664,0.0644281879067421,0.05978189408779144,0.007018622942268848,0.005882441997528076,-0.05447351932525635,-0.015954673290252686,-0.02832006849348545,0.018337734043598175,-0.06736204773187637,0.005699689034372568,0.018944965675473213,-0.008803405798971653,-0.035481005907058716,-0.07164332270622253,0.08529005944728851,-0.08432933688163757,-0.05444594845175743,0.14750146865844727,0.05205833911895752,-0.09111498296260834,-0.0183827206492424,-0.00915873795747757,-0.09117458015680313,0.1111566573381424,0.13275915384292603,-0.003420830937102437,-0.014109666459262371,-0.06415443867444992,-0.03019477240741253,-0.0011348630068823695,0.19280314445495605,0.07694407552480698,0.021728066727519035,0.014437148347496986,0.017637211829423904,-0.00017961999401450157,-0.015476872213184834,0.15384948253631592,0.046044446527957916,-0.11063435673713684,-0.03665003553032875,0.13365256786346436,-0.09762217104434967,0.039514150470495224,-0.02498854696750641,0.0396699421107769,0.03800400719046593,0.05442584678530693,-0.05666071176528931,-0.0412839911878109,-0.018240615725517273,-0.020007017999887466,-0.016397638246417046,0.10330724716186523,-0.012588250450789928,-0.00813118927180767,-0.09238604456186295,0.07246360182762146,0.024697627872228622,-0.0587301142513752,0.08036044985055923,0.001124960952438414,-0.015510348603129387,-0.08828234672546387,-0.007641077972948551,-0.09028566628694534,-0.01901085115969181,0.035323575139045715,-0.0005703800125047565,0.026139967143535614,-0.026253463700413704,0.0012952069519087672,-0.054536402225494385,-0.034052103757858276,-0.007145266979932785,-0.008604032918810844,0.018425362184643745,-0.0670933723449707,0.02098611742258072,-0.04069751873612404,-0.025060081854462624,0.027651790529489517,0.0010403880150988698,-0.026793768629431725,-0.09474585950374603,-0.037118472158908844,0.15270306169986725,0.05166557431221008,-0.03961625695228577,0.07959522306919098,-0.06892361491918564,0.037826307117938995,-0.04418789595365524,-0.013185939751565456,0.004921282175928354,-0.023313969373703003,0.013428723439574242]],"e68c06e6749a791ef6819b56d7359187":[1.0000000126099733,[-0.011618695221841335,0.02394409477710724,-0.04969325289130211,-0.0062828161753714085,0.04352469742298126,-0.06759512424468994,-0.030613325536251068,-0.025416838005185127,0.05245434120297432,0.12071194499731064,0.06652235984802246,0.058485839515924454,-0.017060380429029465,-0.13692453503608704,0.04284925386309624,0.0393475741147995,0.005160070955753326,-0.04607061669230461,-0.03328002616763115,0.012643735855817795,0.034074604511260986,-0.04829786717891693,-0.10280017554759979,-0.03491736575961113,0.020806599408388138,0.020057857036590576,-0.08763384073972702,-0.09556304663419724,0.021594513207674026,0.05216183140873909,-0.09536592662334442,-0.09664950519800186,-0.06844368577003479,-0.015988042578101158,-0.007055481895804405,0.06872989237308502,0.09326779097318649,0.05759352445602417,0.10518694669008255,-0.1384907364845276,-0.07592461258172989,0.08728078752756119,-0.0013340059667825699,0.004282587207853794,0.047784801572561264,-0.034728970378637314,-0.0526275560259819,-0.007628750056028366,-0.010965967550873756,-0.08487845212221146,-0.10750775784254074,0.044096823781728745,-0.045073170214891434,0.0896705761551857,-0.019284972921013832,0.011895578354597092,0.0031639630906283855,0.05036740005016327,0.06384022533893585,0.023764794692397118,-0.04098516330122948,0.008803713135421276,-0.02152038738131523,0.08377497643232346,-0.036595091223716736,0.049844227731227875,-0.023837966844439507,0.018577029928565025,0.04723925516009331,-0.024219196289777756,-0.04692460596561432,-0.06118383631110191,0.017694180831313133,-0.036160215735435486,0.0037572660949081182,0.05389780178666115,0.05893796682357788,-0.011937327682971954,-0.0292277242988348,-0.08269556611776352,-0.06905976682901382,0.008848335593938828,0.0010673539945855737,-0.05082441866397858,-0.02057686261832714,-0.0438971109688282,0.06280820816755295,-0.014236526563763618,0.05426760017871857,-0.04096657782793045,0.017308969050645828,0.04942552000284195,-0.03367402404546738,-0.06847884505987167,-0.009963499382138252,0.07725666463375092,0.005855081137269735,-0.027136851102113724,0.004168426152318716,-0.04738989472389221,0.05070078745484352,0.11049680411815643,-0.08597905933856964,0.017647981643676758,-0.009479883126914501,-0.05345669761300087,0.06493925303220749,0.030975282192230225,0.08671202510595322,0.05110122635960579,0.09957998245954514,0.08986691385507584,-0.17714858055114746,-0.08384722471237183,-0.02696947753429413,0.015874749049544334,0.056313492357730865,-0.004887533839792013,0.012571713887155056,-0.010175708681344986,-0.04810255765914917,0.022085191681981087,-0.036964427679777145,0.06965256482362747,-0.22112178802490234,0.012122329324483871,-0.07679847627878189,0.0794072151184082,0.053395144641399384,0.04792983829975128,0.00489011500030756,-0.05208958312869072,0.03739446401596069,0.09751646965742111,0.04455769434571266,0.04182938486337662,0.01255642157047987,0.014210416004061699,0.03368506580591202,-0.07340102642774582,-0.023604104295372963,0.0836644396185875,0.04378773644566536,-0.001468110946007073,0.14245480298995972,0.06003222614526749,0.1113482117652893,-0.0009651909931562841,0.08099409937858582,-0.02522398717701435,-0.05868205428123474,0.014704775996506214,0.05420264974236488,-0.03809709474444389,-0.08461064100265503,0.03663557395339012,-0.02295542322099209,-0.09294687211513519,-0.06314738094806671,0.08763018250465393,0.030050886794924736,-0.01913084089756012,-0.014788951724767685,-0.05802420526742935,0.012064057402312756,-0.01115365419536829,-0.012036624364554882,-0.08049314469099045,-0.05315030738711357,0.011665568687021732,-0.019160112366080284,-0.06735216826200485,-0.024890020489692688,0.13231487572193146,-0.10173247009515762,-0.08280738443136215,0.13393384218215942,0.08623247593641281,-0.02912634052336216,-0.04936210438609123,0.04355707764625549,-0.054327063262462616,0.11636818200349808,0.16461271047592163,0.05061876028776169,0.049332793802022934,-0.05013089254498482,-0.01696375384926796,-0.009796087630093098,0.23056761920452118,0.03700371831655502,0.023977022618055344,-0.0593252032995224,0.027647780254483223,0.011291516944766045,-0.027002204209566116,0.13237255811691284,0.004933505784720182,-0.08370842039585114,-0.04018068686127663,0.15359032154083252,-0.11826393008232117,0.05972527712583542,0.0015847909962758422,0.07346887141466141,0.015002072788774967,0.05930386483669281,-0.05645442008972168,0.010024312883615494,-0.028498677536845207,0.06818881630897522,0.005077218171209097,0.08545666933059692,-0.005642925854772329,0.07895203679800034,-0.07130042463541031,0.08105188608169556,-0.010388695634901524,-0.06172407791018486,0.021867303177714348,-0.00462214695289731,-0.037711165845394135,-0.05740506947040558,-0.011672100983560085,-0.04380161687731743,-0.0019687400199472904,0.049233730882406235,-0.032682545483112335,-0.0013055159943178296,-0.07970809936523438,-0.030541319400072098,-0.0724089965224266,0.018919209018349648,0.036719124764204025,-0.024743154644966125,0.05638449639081955,-0.07843898236751556,0.011535761877894402,-0.07995450496673584,0.038595329970121384,-0.02559865079820156,-0.004212061874568462,-0.007749911863356829,-0.08822429180145264,-0.005558701232075691,0.1377881020307541,0.0769491121172905,-0.02535456046462059,0.10945097357034683,-0.003059525042772293,0.03572702780365944,-0.007763190194964409,0.03981642425060272,-0.0008287549717351794,-0.04617764800786972,0.02760707028210163]],"1e58243d8b3345b7f61176cbddfbc364":[1.0000000508883737,[0.0014265320496633649,0.12440165132284164,-0.10021265596151352,0.014048170298337936,0.02635391615331173,-0.024016598239541054,-0.0020623940508812666,-0.027058295905590057,0.07995022088289261,0.12270965427160263,0.1283513754606247,0.043437447398900986,-0.009573593735694885,-0.1210770234465599,0.003112745936959982,0.08285266906023026,0.09023385494947433,-0.058489564806222916,0.011722448281943798,0.05809656158089638,0.019054142758250237,-0.007011984009295702,-0.05866120010614395,-0.010695554316043854,0.00486089987680316,-0.06870624423027039,-0.0039440058171749115,-0.08197586238384247,0.04800909385085106,0.0428529754281044,-0.13503392040729523,-0.10835970193147659,-0.053804684430360794,-0.014962602406740189,-0.011276833713054657,0.13540582358837128,0.15764088928699493,0.10967908799648285,0.12935350835323334,-0.10888314247131348,-0.0458320677280426,0.13147859275341034,0.05098558962345123,-0.05015651881694794,0.07399281114339828,-0.09424780309200287,-0.038352396339178085,0.028143877163529396,-0.03584373742341995,-0.10112372785806656,-0.04706481099128723,0.014749349094927311,-0.04824608564376831,0.0396316833794117,-0.025346780195832253,0.04832866042852402,0.027207301929593086,0.003574186936020851,0.09778430312871933,0.052563272416591644,-0.053518012166023254,-0.032437872141599655,-0.029101219028234482,0.0876430794596672,-0.009689448401331902,0.06796117126941681,0.00614496786147356,-0.0195396039634943,-0.008413005620241165,-0.04308117553591728,-0.02058529667556286,0.08675532788038254,0.052379459142684937,0.030429670587182045,0.04391004145145416,0.11760598421096802,0.09115765243768692,0.03829612210392952,-0.008676036261022091,-0.019150158390402794,-0.0932658389210701,0.025482406839728355,-0.04890773817896843,-0.028521394357085228,-0.017691630870103836,0.0048991418443620205,-0.0631255954504013,-0.07445677369832993,0.0579390786588192,-0.01717372052371502,0.03509942442178726,0.017947668209671974,-0.0432409793138504,-0.05773375555872917,0.06686791032552719,0.06764090061187744,0.03330086171627045,-0.024452928453683853,0.027362892404198647,-0.03599252551794052,-0.022897250950336456,0.00047403000644408166,-0.022662261500954628,-0.043698620051145554,0.009963010437786579,-0.08125186711549759,0.04554441571235657,-0.007345831952989101,0.10952208191156387,-0.005206285044550896,0.11857988685369492,0.043907489627599716,-0.1097400113940239,-0.000918070029001683,-0.04194970428943634,-0.02706236019730568,-0.00004706799882114865,0.012102557346224785,-0.053039610385894775,-0.04376716539263725,0.002823188900947571,-0.07568713277578354,-0.08679939061403275,0.05271458625793457,-0.18888920545578003,-0.005312336143106222,-0.0969940721988678,0.0467812679708004,0.006678979843854904,0.026782145723700523,-0.07553955167531967,0.021925419569015503,-0.08493874967098236,0.09492076933383942,-0.03540379926562309,0.05548291653394699,0.011730601079761982,0.025707758963108063,-0.04513595625758171,-0.02686501480638981,-0.02168772555887699,-0.033758606761693954,0.039380162954330444,-0.0355692058801651,0.09472742676734924,0.11064509302377701,0.11383248120546341,-0.033270057290792465,0.08385180681943893,-0.04757115617394447,-0.057726431638002396,0.06014559045433998,0.0853528156876564,-0.03799313306808472,-0.11574825644493103,0.030156895518302917,-0.011791585013270378,-0.0799841657280922,-0.05712803453207016,0.04101308435201645,0.01591867208480835,-0.06105538457632065,0.03485206887125969,0.015224473550915718,0.018460042774677277,0.03762488439679146,-0.04375036060810089,-0.06431590765714645,-0.02119639329612255,0.013232246972620487,-0.1042109951376915,-0.014082102105021477,-0.009003336541354656,0.039538878947496414,-0.10497292131185532,-0.007843186147511005,0.036864105612039566,0.14009113609790802,-0.1403782069683075,-0.02470252849161625,0.022261325269937515,-0.016963733360171318,0.08599284291267395,0.08462775498628616,0.0878196731209755,0.057446740567684174,0.034928593784570694,-0.009191030636429787,0.006612495984882116,0.17350080609321594,0.015773605555295944,0.0288399588316679,-0.0032259749714285135,0.017906349152326584,0.04519980773329735,-0.014787061139941216,0.1432168185710907,0.02408057264983654,-0.026598429307341576,0.02137179486453533,0.07195264846086502,-0.06369081139564514,0.0679590106010437,-0.003076004097238183,0.04865972325205803,0.07212013006210327,0.07078811526298523,-0.0776921957731247,0.014257526025176048,-0.03372379392385483,0.04825316742062569,-0.06984864175319672,0.07889550179243088,-0.05472945421934128,0.056982994079589844,-0.04893018305301666,0.11121835559606552,-0.03590153157711029,-0.07446140795946121,0.09970209747552872,-0.06680528074502945,-0.09573973715305328,-0.030167486518621445,0.024464266374707222,-0.020405860617756844,0.010783117264509201,0.029291801154613495,0.04502987116575241,-0.01634221337735653,-0.08077061921358109,-0.010066411457955837,-0.019349953159689903,0.0020070380996912718,0.02331683598458767,0.05175749957561493,0.020638590678572655,-0.0835973471403122,0.001626109005883336,-0.013473966158926487,-0.01944071054458618,-0.03669160231947899,-0.07049694657325745,-0.026282867416739464,-0.07575200498104095,0.029484102502465248,0.07890330255031586,0.050158336758613586,0.007515865843743086,0.03844766691327095,-0.14809872210025787,-0.027888640761375427,-0.0388353168964386,0.0069388458505272865,-0.05628100037574768,-0.008859786204993725,0.03440847247838974]],"2222116f6465647400989b362ca33dce":[0.999999995796106,[0.07830538600683212,0.08775249868631363,-0.014230445958673954,0.018758544698357582,0.05277426913380623,-0.049631308764219284,-0.02127762883901596,-0.06162985414266586,0.046163756400346756,0.007550098933279514,0.041544608771800995,0.0022943520452827215,0.10834170132875443,-0.09619840979576111,0.013282118365168571,-0.07595806568861008,0.03171956166625023,-0.020513659343123436,0.011276481673121452,0.010997106321156025,-0.001586994039826095,-0.06602328270673752,-0.03211180120706558,-0.023290855810046196,0.004683870822191238,-0.06231067329645157,0.022476838901638985,-0.049501094967126846,0.04432784393429756,0.03915836662054062,-0.1288173645734787,-0.04388919100165367,-0.011110272258520126,-0.0120945880189538,0.030588863417506218,0.06751611828804016,0.043522220104932785,0.019522028043866158,0.11105158179998398,-0.09544779360294342,0.03253067284822464,-0.030541641637682915,-0.04095328971743584,0.037156399339437485,0.10963743180036545,-0.13821759819984436,0.0027463471051305532,0.006826512981206179,-0.07449353486299515,-0.029618361964821815,-0.009171434678137302,0.08600669354200363,-0.04023228958249092,0.10400108993053436,-0.08701369911432266,0.032550208270549774,0.051771633327007294,0.0026371011044830084,0.06436697393655777,0.10531920194625854,-0.08892304450273514,-0.0670013576745987,0.03556200489401817,0.03777614235877991,0.02384869009256363,-0.009164394810795784,-0.012468785978853703,0.022475147619843483,0.09468488395214081,0.02870333380997181,-0.051375288516283035,0.06232087314128876,-0.016472335904836655,-0.027583979070186615,-0.02626325935125351,0.09310147911310196,-0.010891285724937916,0.042140644043684006,-0.04847698286175728,-0.06833924353122711,-0.11928074061870575,0.090532086789608,-0.041467707604169846,-0.07732661068439484,-0.015732862055301666,0.00894080474972725,0.04884227365255356,-0.13136468827724457,0.049332376569509506,-0.015754925087094307,0.032737668603658676,0.017226818948984146,-0.13311566412448883,-0.18461483716964722,-0.0028878028970211744,0.05992347374558449,0.02993643470108509,-0.04805932939052582,-0.039209768176078796,-0.13986141979694366,0.027452927082777023,0.048342831432819366,-0.01001735683530569,0.04192603752017021,-0.035787418484687805,-0.06884310394525528,0.0045908731408417225,0.02729128673672676,0.05172033607959747,0.09546048194169998,0.0851205587387085,-0.044901832938194275,-0.19157962501049042,0.004300657194107771,-0.07231786847114563,0.10136154294013977,0.11490056663751602,-0.03633886203169823,0.04848596081137657,0.01350001897662878,0.016258789226412773,0.017113883048295975,-0.04703345522284508,0.009690333157777786,-0.13916249573230743,-0.06030459702014923,-0.1524336338043213,0.03905604034662247,0.03549624979496002,0.07374803721904755,-0.015857649967074394,-0.011760647408664227,0.07245124131441116,0.08025453239679337,0.0051119220443069935,-0.0014977060491219163,0.01515156775712967,0.007043614983558655,0.008343472145497799,-0.028497345745563507,-0.06309285759925842,0.07001838088035583,0.04530242457985878,-0.026361895725131035,0.12287919223308563,0.08008953928947449,0.15451094508171082,0.009009220637381077,0.1097855269908905,-0.009318333119153976,-0.039148204028606415,0.041142478585243225,0.02275509014725685,-0.014299365691840649,-0.04780483990907669,0.02545248344540596,-0.023692375048995018,-0.11455201357603073,0.073500856757164,0.03232245147228241,0.08474872261285782,-0.0762585774064064,-0.06451157480478287,-0.01832723058760166,0.06189439073204994,-0.04144567623734474,-0.04632889851927757,-0.1106756255030632,-0.024795260280370712,0.0655955821275711,0.026007579639554024,-0.07063990831375122,-0.10491295903921127,0.06777303665876389,-0.023317616432905197,-0.07056145370006561,0.09861848503351212,0.1142299473285675,0.01867947168648243,-0.02733207307755947,-0.062180690467357635,0.017964866012334824,0.15462905168533325,0.1556798815727234,0.11145736277103424,0.06453561782836914,-0.010526676662266254,0.030208613723516464,-0.011553286574780941,0.11927199363708496,0.06245313957333565,-0.006215557921677828,0.020295394584536552,-0.0793723464012146,-0.016557911410927773,-0.040377795696258545,0.10333199054002762,0.0008974350057542324,-0.019192064180970192,-0.020774492993950844,0.08853069692850113,-0.07616308331489563,0.040594153106212616,0.027575472369790077,-0.011079715564846992,-0.042020708322525024,0.12516959011554718,-0.044881876558065414,0.02272971160709858,-0.030384717509150505,-0.008207553066313267,-0.03132314234972,0.021054141223430634,-0.007166692987084389,0.0387696698307991,-0.051232513040304184,0.0958002433180809,-0.008482332341372967,-0.004614922218024731,0.05860400199890137,0.02639760635793209,-0.06722083687782288,-0.10506836324930191,0.0034925169311463833,0.03008076176047325,0.029522471129894257,-0.010105712339282036,-0.015393612906336784,-0.08286456018686295,-0.005954409949481487,0.05837584286928177,-0.06071433797478676,-0.0220294501632452,-0.01823270134627819,-0.009299857541918755,0.012104442343115807,-0.0534936860203743,-0.03830490633845329,-0.0710582509636879,0.001959803979843855,-0.04739974066615105,-0.01945328712463379,-0.04393515735864639,-0.0186644047498703,0.022397445514798164,0.08153092861175537,0.06550395488739014,-0.05992865189909935,0.05496855825185776,-0.06559527665376663,-0.03211560472846031,0.012137699872255325,0.011536715552210808,0.01161749754101038,-0.019817745313048363,-0.08176381140947342]]}}},"searchableProperties":["id","title","path","content","embedding","embeddingModel","created_at","ctime","mtime","tags","extension"],"searchablePropertiesWithTypes":{"id":"string","title":"string","path":"string","content":"string","embedding":"vector[256]","embeddingModel":"string","created_at":"number","ctime":"number","mtime":"number","tags":"string[]","extension":"string"},"frequencies":{"id":{"1":{"7b4c3a5f2351e68d3fab702932a69aab":1},"2":{"1f18119a228357d4a4d1ad176766099e":1},"3":{"fdf9b5ff709a96f1f4b2f9548042e2e9":1},"4":{"9ca9b5355017a0ddced116c218340237":1},"5":{"80f7a1dbcb9542d4724e15cc1ec5e830":1},"6":{"e23a8f2b97eb4b4ce2c21dbf16b77f2c":1},"7":{"e68c06e6749a791ef6819b56d7359187":1},"8":{"1e58243d8b3345b7f61176cbddfbc364":1},"9":{"2222116f6465647400989b362ca33dce":1}},"title":{"1":{"requirements":1},"2":{"main":1},"3":{"main":1},"4":{"main":1},"5":{"main":1},"6":{"main":1},"7":{"main":1},"8":{"python":0.5,"pillow":0.5},"9":{"readme":1}},"path":{"1":{"source":0.25,"image-editor":0.25,"requirements":0.25,"md":0.25},"2":{"source":0.25,"image-editor":0.25,"main":0.25,"md":0.25},"3":{"source":0.25,"image-editor":0.25,"main":0.25,"md":0.25},"4":{"source":0.25,"image-editor":0.25,"main":0.25,"md":0.25},"5":{"source":0.25,"image-editor":0.25,"main":0.25,"md":0.25},"6":{"source":0.25,"image-editor":0.25,"main":0.25,"md":0.25},"7":{"source":0.25,"image-editor":0.25,"main":0.25,"md":0.25},"8":{"python":0.3333333333333333,"pillow":0.3333333333333333,"md":0.3333333333333333},"9":{"readme":0.5,"md":0.5}},"content":{"1":{"0":0.022727272727272728,"1":0.022727272727272728,"2":0.022727272727272728,"3":0.022727272727272728,"4":0.022727272727272728,"5":0.022727272727272728,"6":0.022727272727272728,"7":0.022727272727272728,"10":0.022727272727272728,"11":0.022727272727272728,"13":0.022727272727272728,"23":0.022727272727272728,"24":0.022727272727272728,"26":0.022727272727272728,"31":0.022727272727272728,"37":0.022727272727272728,"104":0.022727272727272728,"2025":0.022727272727272728,"note":0.022727272727272728,"title":0.022727272727272728,"requirements":0.022727272727272728,"metadata":0.022727272727272728,"created":0.022727272727272728,"08":0.022727272727272728,"01":0.022727272727272728,"07":0.022727272727272728,"modified":0.022727272727272728,"block":0.022727272727272728,"content":0.022727272727272728,"fastapi":0.022727272727272728,"uvicorn":0.022727272727272728,"standard":0.022727272727272728,"python-multipart":0.022727272727272728,"pillow":0.022727272727272728,"pydantic":0.022727272727272728,"python-jose":0.022727272727272728,"cryptography":0.022727272727272728,"passlib":0.022727272727272728,"bcrypt":0.022727272727272728,"aiofiles":0.022727272727272728,"numpy":0.022727272727272728,"scikit-image":0.022727272727272728,"scipy":0.022727272727272728,"requests":0.022727272727272728},"2":{"0":0.0058823529411764705,"1":0.0058823529411764705,"11":0.0058823529411764705,"37":0.0058823529411764705,"400":0.0058823529411764705,"2025":0.0058823529411764705,"note":0.0058823529411764705,"title":0.0058823529411764705,"main":0.0058823529411764705,"metadata":0.0058823529411764705,"created":0.0058823529411764705,"08":0.0058823529411764705,"01":0.0058823529411764705,"07":0.0058823529411764705,"modified":0.0058823529411764705,"block":0.0058823529411764705,"content":0.0058823529411764705,"from":0.0058823529411764705,"fastapi":0.0058823529411764705,"import":0.0058823529411764705,"file":0.0058823529411764705,"uploadfile":0.0058823529411764705,"httpexception":0.0058823529411764705,"middleware":0.0058823529411764705,"cors":0.0058823529411764705,"corsmiddleware":0.0058823529411764705,"responses":0.0058823529411764705,"fileresponse":0.0058823529411764705,"streamingresponse":0.0058823529411764705,"staticfiles":0.0058823529411764705,"pydantic":0.0058823529411764705,"basemodel":0.0058823529411764705,"typing":0.0058823529411764705,"dict":0.0058823529411764705,"any":0.0058823529411764705,"optional":0.0058823529411764705,"list":0.0058823529411764705,"os":0.0058823529411764705,"uuid":0.0058823529411764705,"pil":0.0058823529411764705,"image":0.0058823529411764705,"imagefilter":0.0058823529411764705,"imageenhance":0.0058823529411764705,"imageops":0.0058823529411764705,"asyncio":0.0058823529411764705,"pathlib":0.0058823529411764705,"path":0.0058823529411764705,"aiofiles":0.0058823529411764705,"zipfile":0.0058823529411764705,"io":0.0058823529411764705,"xml":0.0058823529411764705,"etree":0.0058823529411764705,"elementtree":0.0058823529411764705,"as":0.0058823529411764705,"et":0.0058823529411764705,"re":0.0058823529411764705,"text_image_replacer":0.0058823529411764705,"textimagereplacer":0.0058823529411764705,"create_template_config":0.0058823529411764705,"app":0.0058823529411764705,"editor":0.0058823529411764705,"api":0.0058823529411764705,"version":0.0058823529411764705,"add_middleware":0.0058823529411764705,"allow_origins":0.0058823529411764705,"allow_credentials":0.0058823529411764705,"true":0.0058823529411764705,"allow_methods":0.0058823529411764705,"allow_headers":0.0058823529411764705,"upload_dir":0.0058823529411764705,"uploads":0.0058823529411764705,"processed_dir":0.0058823529411764705,"processed":0.0058823529411764705,"mkdir":0.0058823529411764705,"exist_ok":0.0058823529411764705,"mount":0.0058823529411764705,"directory":0.0058823529411764705,"name":0.0058823529411764705,"class":0.0058823529411764705,"imageresponse":0.0058823529411764705,"url":0.0058823529411764705,"str":0.0058823529411764705,"filename":0.0058823529411764705,"imagebatchresponse":0.0058823529411764705,"original_url":0.0058823529411764705,"processed_url":0.0058823529411764705,"original_filename":0.0058823529411764705,"processed_filename":0.0058823529411764705,"status":0.0058823529411764705,"error_message":0.0058823529411764705,"none":0.0058823529411764705,"operationrequest":0.0058823529411764705,"id":0.0058823529411764705,"operation":0.0058823529411764705,"parameters":0.0058823529411764705,"float":0.0058823529411764705,"enablecrop":0.0058823529411764705,"bool":0.0058823529411764705,"processbatchrequest":0.0058823529411764705,"image_urls":0.0058823529411764705,"operations":0.0058823529411764705,"output_format":0.0058823529411764705,"original":0.0058823529411764705,"get":0.0058823529411764705,"async":0.0058823529411764705,"def":0.0058823529411764705,"root":0.0058823529411764705,"return":0.0058823529411764705,"message":0.0058823529411764705,"post":0.0058823529411764705,"upload":0.0058823529411764705,"response_model":0.0058823529411764705,"upload_image":0.0058823529411764705,"if":0.0058823529411764705,"not":0.0058823529411764705,"content_type":0.0058823529411764705,"or":0.0058823529411764705,"startswith":0.0058823529411764705,"raise":0.0058823529411764705,"status_code":0.0058823529411764705,"detail":0.0058823529411764705,"invalid":0.0058823529411764705,"type":0.0058823529411764705,"please":0.0058823529411764705,"an":0.0058823529411764705,"file_extension":0.0058823529411764705,"split":0.0058823529411764705,"-1":0.0058823529411764705,"else":0.0058823529411764705,"jpg":0.0058823529411764705,"unique_filename":0.0058823529411764705,"f":0.0058823529411764705,"uuid4":0.0058823529411764705,"file_path":0.0058823529411764705,"with":0.0058823529411764705,"open":0.0058823529411764705,"wb":0.0058823529411764705,"await":0.0058823529411764705,"read":0.0058823529411764705,"write":0.0058823529411764705,"upload-batch":0.0058823529411764705,"upload_batch_images":0.0058823529411764705,"files":0.0058823529411764705,"uploaded_files":0.0058823529411764705,"for":0.0058823529411764705,"in":0.0058823529411764705,"images":0.0058823529411764705,"only":0.0058823529411764705,"append":0.0058823529411764705,"process-batch":0.0058823529411764705,"process_batch_images":0.0058823529411764705,"request":0.0058823529411764705,"results":0.0058823529411764705,"image_url":0.0058823529411764705,"try":0.0058823529411764705,"input_path":0.0058823529411764705,"error":0.0058823529411764705,"continue":0.0058823529411764705,"exists":0.0058823529411764705,"found":0.0058823529411764705,"original_extension":0.0058823529411764705,"lower":0.0058823529411764705,"output_extension":0.0058823529411764705,"elif":0.0058823529411764705,"png":0.0058823529411764705,"webp":0.0058823529411764705,"output_filename":0.0058823529411764705,"processed_":0.0058823529411764705,"output_path":0.0058823529411764705,"process_multiple_operations_async":0.0058823529411764705},"3":{"0":0.005988023952095809,"1":0.005988023952095809,"3":0.005988023952095809,"6":0.005988023952095809,"8":0.005988023952095809,"11":0.005988023952095809,"30":0.005988023952095809,"37":0.005988023952095809,"72":0.005988023952095809,"95":0.005988023952095809,"255":0.005988023952095809,"600":0.005988023952095809,"800":0.005988023952095809,"2025":0.005988023952095809,"note":0.005988023952095809,"title":0.005988023952095809,"main":0.005988023952095809,"metadata":0.005988023952095809,"created":0.005988023952095809,"08":0.005988023952095809,"01":0.005988023952095809,"07":0.005988023952095809,"modified":0.005988023952095809,"block":0.005988023952095809,"content":0.005988023952095809,"cont'd":0.005988023952095809,"await":0.005988023952095809,"process_multiple_operations_async":0.005988023952095809,"input_path":0.005988023952095809,"output_path":0.005988023952095809,"request":0.005988023952095809,"operations":0.005988023952095809,"results":0.005988023952095809,"append":0.005988023952095809,"imagebatchresponse":0.005988023952095809,"original_url":0.005988023952095809,"image_url":0.005988023952095809,"processed_url":0.005988023952095809,"f":0.005988023952095809,"processed":0.005988023952095809,"output_filename":0.005988023952095809,"original_filename":0.005988023952095809,"filename":0.005988023952095809,"processed_filename":0.005988023952095809,"status":0.005988023952095809,"success":0.005988023952095809,"error_message":0.005988023952095809,"none":0.005988023952095809,"except":0.005988023952095809,"exception":0.005988023952095809,"as":0.005988023952095809,"e":0.005988023952095809,"error":0.005988023952095809,"str":0.005988023952095809,"return":0.005988023952095809,"async":0.005988023952095809,"def":0.005988023952095809,"path":0.005988023952095809,"list":0.005988023952095809,"operationrequest":0.005988023952095809,"pil":0.005988023952095809,"if":0.005988023952095809,"not":0.005988023952095809,"raise":0.005988023952095809,"valueerror":0.005988023952095809,"process_sync":0.005988023952095809,"with":0.005988023952095809,"image":0.005988023952095809,"open":0.005988023952095809,"original_image":0.005988023952095809,"copy":0.005988023952095809,"dpi":0.005988023952095809,"dpi_value":0.005988023952095809,"for":0.005988023952095809,"operation":0.005988023952095809,"in":0.005988023952095809,"int":0.005988023952095809,"parameters":0.005988023952095809,"get":0.005988023952095809,"operation_params":0.005988023952095809,"resize":0.005988023952095809,"and":0.005988023952095809,"enablecrop":0.005988023952095809,"is":0.005988023952095809,"crop":0.005988023952095809,"else":0.005988023952095809,"apply_pil_operation":0.005988023952095809,"try":0.005988023952095809,"exif":0.005988023952095809,"getexif":0.005988023952095809,"icc_profile":0.005988023952095809,"info":0.005988023952095809,"'icc_profile'":0.005988023952095809,"output_extension":0.005988023952095809,"lower":0.005988023952095809,"endswith":0.005988023952095809,"'":0.005988023952095809,"png'":0.005988023952095809,"save_format":0.005988023952095809,"'png'":0.005988023952095809,"elif":0.005988023952095809,"jpg'":0.005988023952095809,"jpeg'":0.005988023952095809,"'jpeg'":0.005988023952095809,"webp'":0.005988023952095809,"'webp'":0.005988023952095809,"save_kwargs":0.005988023952095809,"'format'":0.005988023952095809,"'dpi'":0.005988023952095809,"'optimize'":0.005988023952095809,"true":0.005988023952095809,"'quality'":0.005988023952095809,"'compress_level'":0.005988023952095809,"'exif'":0.005988023952095809,"icc":0.005988023952095809,"save":0.005988023952095809,"print":0.005988023952095809,"warning":0.005988023952095809,"could":0.005988023952095809,"preserve_image_metadata_and_save":0.005988023952095809,"cpu":0.005988023952095809,"loop":0.005988023952095809,"asyncio":0.005988023952095809,"get_event_loop":0.005988023952095809,"run_in_executor":0.005988023952095809,"dict":0.005988023952095809,"float":0.005988023952095809,"-":0.005988023952095809,"width":0.005988023952095809,"height":0.005988023952095809,"imageops":0.005988023952095809,"fit":0.005988023952095809,"resampling":0.005988023952095809,"lanczos":0.005988023952095809,"rotate":0.005988023952095809,"angle":0.005988023952095809,"resample":0.005988023952095809,"bicubic":0.005988023952095809,"expand":0.005988023952095809,"blur":0.005988023952095809,"sigma":0.005988023952095809,"filter":0.005988023952095809,"imagefilter":0.005988023952095809,"gaussianblur":0.005988023952095809,"radius":0.005988023952095809,"grayscale":0.005988023952095809,"l":0.005988023952095809,"rgb":0.005988023952095809,"convert":0.005988023952095809,"'l'":0.005988023952095809,"'rgb'":0.005988023952095809,"sepia":0.005988023952095809,"new":0.005988023952095809,"size":0.005988023952095809,"sepia_pixels":0.005988023952095809,"pixel":0.005988023952095809,"getdata":0.005988023952095809,"r":0.005988023952095809,"min":0.005988023952095809,"g":0.005988023952095809,"b":0.005988023952095809,"putdata":0.005988023952095809,"overlay":0.005988023952095809,"opacity":0.005988023952095809,"alpha":0.005988023952095809,"overlay_with_alpha":0.005988023952095809,"'rgba'":0.005988023952095809},"4":{"0":0.008333333333333333,"1":0.008333333333333333,"11":0.008333333333333333,"37":0.008333333333333333,"72":0.008333333333333333,"95":0.008333333333333333,"255":0.008333333333333333,"2025":0.008333333333333333,"note":0.008333333333333333,"title":0.008333333333333333,"main":0.008333333333333333,"metadata":0.008333333333333333,"created":0.008333333333333333,"08":0.008333333333333333,"01":0.008333333333333333,"07":0.008333333333333333,"modified":0.008333333333333333,"block":0.008333333333333333,"content":0.008333333333333333,"cont'd":0.008333333333333333,"alpha":0.008333333333333333,"int":0.008333333333333333,"opacity":0.008333333333333333,"overlay_with_alpha":0.008333333333333333,"image":0.008333333333333333,"new":0.008333333333333333,"'rgba'":0.008333333333333333,"size":0.008333333333333333,"rgba":0.008333333333333333,"if":0.008333333333333333,"mode":0.008333333333333333,"image_rgba":0.008333333333333333,"convert":0.008333333333333333,"else":0.008333333333333333,"alpha_composite":0.008333333333333333,"rgb":0.008333333333333333,"'rgb'":0.008333333333333333,"elif":0.008333333333333333,"operation":0.008333333333333333,"dpi":0.008333333333333333,"pass":0.008333333333333333,"return":0.008333333333333333,"def":0.008333333333333333,"preserve_image_metadata_and_save":0.008333333333333333,"original_path":0.008333333333333333,"path":0.008333333333333333,"output_path":0.008333333333333333,"processed_image":0.008333333333333333,"exif":0.008333333333333333,"try":0.008333333333333333,"with":0.008333333333333333,"open":0.008333333333333333,"str":0.008333333333333333,"as":0.008333333333333333,"original":0.008333333333333333,"getexif":0.008333333333333333,"icc":0.008333333333333333,"profile":0.008333333333333333,"icc_profile":0.008333333333333333,"info":0.008333333333333333,"get":0.008333333333333333,"'icc_profile'":0.008333333333333333,"copy":0.008333333333333333,"output_extension":0.008333333333333333,"lower":0.008333333333333333,"endswith":0.008333333333333333,"'":0.008333333333333333,"png'":0.008333333333333333,"save_format":0.008333333333333333,"'png'":0.008333333333333333,"jpg'":0.008333333333333333,"jpeg'":0.008333333333333333,"'jpeg'":0.008333333333333333,"webp'":0.008333333333333333,"'webp'":0.008333333333333333,"save_kwargs":0.008333333333333333,"'format'":0.008333333333333333,"'optimize'":0.008333333333333333,"true":0.008333333333333333,"in":0.008333333333333333,"'quality'":0.008333333333333333,"'compress_level'":0.008333333333333333,"and":0.008333333333333333,"'exif'":0.008333333333333333,"'dpi'":0.008333333333333333,"save":0.008333333333333333,"print":0.008333333333333333,"f":0.008333333333333333,"saved":0.008333333333333333,"preservation":0.008333333333333333,"except":0.008333333333333333,"exception":0.008333333333333333,"e":0.008333333333333333,"warning":0.008333333333333333,"could":0.008333333333333333,"not":0.008333333333333333,"preserve":0.008333333333333333,"format":0.008333333333333333,"compress_level":0.008333333333333333,"quality":0.008333333333333333,"optimize":0.008333333333333333,"async":0.008333333333333333,"process_image_async":0.008333333333333333,"input_path":0.008333333333333333,"parameters":0.008333333333333333,"dict":0.008333333333333333,"float":0.008333333333333333,"pil":0.008333333333333333,"process_sync":0.008333333333333333,"original_image":0.008333333333333333,"apply_pil_operation":0.008333333333333333,"processed":0.008333333333333333,"successfully":0.008333333333333333,"cpu":0.008333333333333333,"loop":0.008333333333333333,"asyncio":0.008333333333333333,"get_event_loop":0.008333333333333333,"await":0.008333333333333333,"run_in_executor":0.008333333333333333,"none":0.008333333333333333},"5":{"0":0.005747126436781609,"1":0.005747126436781609,"11":0.005747126436781609,"24":0.005747126436781609,"37":0.005747126436781609,"400":0.005747126436781609,"404":0.005747126436781609,"500":0.005747126436781609,"1024":0.005747126436781609,"2025":0.005747126436781609,"3600":0.005747126436781609,"note":0.005747126436781609,"title":0.005747126436781609,"main":0.005747126436781609,"metadata":0.005747126436781609,"created":0.005747126436781609,"08":0.005747126436781609,"01":0.005747126436781609,"07":0.005747126436781609,"modified":0.005747126436781609,"block":0.005747126436781609,"content":0.005747126436781609,"cont'd":0.005747126436781609,"cpu":0.005747126436781609,"loop":0.005747126436781609,"asyncio":0.005747126436781609,"get_event_loop":0.005747126436781609,"await":0.005747126436781609,"run_in_executor":0.005747126436781609,"none":0.005747126436781609,"process_sync":0.005747126436781609,"app":0.005747126436781609,"get":0.005747126436781609,"api":0.005747126436781609,"images":0.005747126436781609,"filename":0.005747126436781609,"async":0.005747126436781609,"def":0.005747126436781609,"get_image":0.005747126436781609,"str":0.005747126436781609,"file_path":0.005747126436781609,"processed_dir":0.005747126436781609,"if":0.005747126436781609,"not":0.005747126436781609,"exists":0.005747126436781609,"raise":0.005747126436781609,"httpexception":0.005747126436781609,"status_code":0.005747126436781609,"detail":0.005747126436781609,"image":0.005747126436781609,"found":0.005747126436781609,"return":0.005747126436781609,"fileresponse":0.005747126436781609,"path":0.005747126436781609,"media_type":0.005747126436781609,"png":0.005747126436781609,"uploads":0.005747126436781609,"get_uploaded_image":0.005747126436781609,"upload_dir":0.005747126436781609,"post":0.005747126436781609,"download-batch":0.005747126436781609,"download_batch_images":0.005747126436781609,"filenames":0.005747126436781609,"list":0.005747126436781609,"zip":0.005747126436781609,"no":0.005747126436781609,"files":0.005747126436781609,"specified":0.005747126436781609,"zip_buffer":0.005747126436781609,"io":0.005747126436781609,"bytesio":0.005747126436781609,"with":0.005747126436781609,"zipfile":0.005747126436781609,"w":0.005747126436781609,"zip_deflated":0.005747126436781609,"as":0.005747126436781609,"zip_file":0.005747126436781609,"for":0.005747126436781609,"in":0.005747126436781609,"write":0.005747126436781609,"seek":0.005747126436781609,"streamingresponse":0.005747126436781609,"read":0.005747126436781609,"application":0.005747126436781609,"headers":0.005747126436781609,"content-disposition":0.005747126436781609,"attachment":0.005747126436781609,"processed_images":0.005747126436781609,"delete":0.005747126436781609,"clear-files":0.005747126436781609,"clear_files":0.005747126436781609,"try":0.005747126436781609,"upload_files":0.005747126436781609,"glob":0.005747126436781609,"processed_files":0.005747126436781609,"is_file":0.005747126436781609,"unlink":0.005747126436781609,"message":0.005747126436781609,"cleared":0.005747126436781609,"successfully":0.005747126436781609,"deleted_uploads":0.005747126436781609,"len":0.005747126436781609,"deleted_processed":0.005747126436781609,"total_deleted":0.005747126436781609,"except":0.005747126436781609,"exception":0.005747126436781609,"e":0.005747126436781609,"f":0.005747126436781609,"failed":0.005747126436781609,"to":0.005747126436781609,"clear":0.005747126436781609,"clear-old-files":0.005747126436781609,"clear_old_files":0.005747126436781609,"hours":0.005747126436781609,"int":0.005747126436781609,"import":0.005747126436781609,"time":0.005747126436781609,"current_time":0.005747126436781609,"cutoff_time":0.005747126436781609,"-":0.005747126436781609,"and":0.005747126436781609,"stat":0.005747126436781609,"st_mtime":0.005747126436781609,"old":0.005747126436781609,"older":0.005747126436781609,"than":0.005747126436781609,"storage-info":0.005747126436781609,"get_storage_info":0.005747126436781609,"os":0.005747126436781609,"get_directory_size":0.005747126436781609,"total_size":0.005747126436781609,"file_count":0.005747126436781609,"st_size":0.005747126436781609,"upload_size":0.005747126436781609,"upload_count":0.005747126436781609,"processed_size":0.005747126436781609,"processed_count":0.005747126436781609,"format_size":0.005747126436781609,"size_bytes":0.005747126436781609,"b":0.005747126436781609,"size_names":0.005747126436781609,"kb":0.005747126436781609,"mb":0.005747126436781609,"gb":0.005747126436781609,"i":0.005747126436781609,"while":0.005747126436781609,"1f":0.005747126436781609,"size":0.005747126436781609,"size_formatted":0.005747126436781609,"processed":0.005747126436781609,"total":0.005747126436781609,"storage":0.005747126436781609,"info":0.005747126436781609,"health":0.005747126436781609,"health_check":0.005747126436781609,"from":0.005747126436781609,"datetime":0.005747126436781609,"status":0.005747126436781609,"healthy":0.005747126436781609,"timestamp":0.005747126436781609,"now":0.005747126436781609,"isoformat":0.005747126436781609,"version":0.005747126436781609,"api_name":0.005747126436781609,"editor":0.005747126436781609,"svg":0.005747126436781609,"class":0.005747126436781609,"svggeneraterequest":0.005747126436781609,"basemodel":0.005747126436781609,"prefecture":0.005747126436781609,"color":0.005747126436781609,"ff6277":0.005747126436781609,"svgresponse":0.005747126436781609,"svg_content":0.005747126436781609},"6":{"0":0.00625,"1":0.00625,"2":0.00625,"3":0.00625,"8":0.00625,"11":0.00625,"37":0.00625,"404":0.00625,"500":0.00625,"1024":0.00625,"2025":0.00625,"note":0.00625,"title":0.00625,"main":0.00625,"metadata":0.00625,"created":0.00625,"08":0.00625,"01":0.00625,"07":0.00625,"modified":0.00625,"block":0.00625,"content":0.00625,"cont'd":0.00625,"svg":0.00625,"class":0.00625,"svggeneraterequest":0.00625,"basemodel":0.00625,"prefecture":0.00625,"str":0.00625,"color":0.00625,"ff6277":0.00625,"svgresponse":0.00625,"svg_content":0.00625,"filename":0.00625,"id":0.00625,"prefectures":0.00625,"app":0.00625,"get":0.00625,"api":0.00625,"async":0.00625,"def":0.00625,"get_prefectures":0.00625,"return":0.00625,"post":0.00625,"generate-svg":0.00625,"response_model":0.00625,"generate_svg":0.00625,"request":0.00625,"try":0.00625,"svg_path":0.00625,"path":0.00625,"assets":0.00625,"map":0.00625,"if":0.00625,"not":0.00625,"exists":0.00625,"raise":0.00625,"httpexception":0.00625,"status_code":0.00625,"detail":0.00625,"template":0.00625,"found":0.00625,"with":0.00625,"open":0.00625,"r":0.00625,"encoding":0.00625,"utf-8":0.00625,"as":0.00625,"f":0.00625,"read":0.00625,"for":0.00625,"in":0.00625,"reset_ids":0.00625,"elif":0.00625,"-2":0.00625,"else":0.00625,"prefecture_id":0.00625,"pattern1":0.00625,"f'id":0.00625,"fill":0.00625,"'":0.00625,"re":0.00625,"search":0.00625,"replacement1":0.00625,"1fill":0.00625,"fff":0.00625,"sub":0.00625,"prefecture_ids":0.00625,"print":0.00625,"pattern":0.00625,"matched":0.00625,"updated":0.00625,"existing":0.00625,"attribute":0.00625,"continue":0.00625,"style":0.00625,"pattern2":0.00625,"replacement2":0.00625,"1style":0.00625,"2fill":0.00625,"pattern3":0.00625,"replacement3":0.00625,"added":0.00625,"new":0.00625,"warning":0.00625,"no":0.00625,"japan_map_":0.00625,"_":0.00625,"uuid":0.00625,"uuid4":0.00625,"hex":0.00625,"output_path":0.00625,"processed_dir":0.00625,"w":0.00625,"write":0.00625,"generated":0.00625,"successfully":0.00625,"except":0.00625,"exception":0.00625,"e":0.00625,"generation":0.00625,"error":0.00625,"failed":0.00625,"get_svg":0.00625,"file_path":0.00625,"file":0.00625,"fileresponse":0.00625,"media_type":0.00625,"image":0.00625,"xml":0.00625,"fileinfo":0.00625,"size":0.00625,"int":0.00625,"size_formatted":0.00625,"created_at":0.00625,"file_type":0.00625,"filelistresponse":0.00625,"uploads":0.00625,"list":0.00625,"processed":0.00625,"total_count":0.00625,"files":0.00625,"get_file_list":0.00625,"import":0.00625,"os":0.00625,"from":0.00625,"datetime":0.00625,"format_size":0.00625,"size_bytes":0.00625,"b":0.00625,"size_names":0.00625,"kb":0.00625,"mb":0.00625,"gb":0.00625,"i":0.00625,"while":0.00625,"and":0.00625,"len":0.00625,"-":0.00625,"1f":0.00625},"7":{"0":0.005917159763313609,"8":0.005917159763313609,"11":0.005917159763313609,"37":0.005917159763313609,"400":0.005917159763313609,"404":0.005917159763313609,"500":0.005917159763313609,"2025":0.005917159763313609,"8000":0.005917159763313609,"note":0.005917159763313609,"title":0.005917159763313609,"main":0.005917159763313609,"metadata":0.005917159763313609,"created":0.005917159763313609,"08":0.005917159763313609,"01":0.005917159763313609,"07":0.005917159763313609,"modified":0.005917159763313609,"block":0.005917159763313609,"content":0.005917159763313609,"cont'd":0.005917159763313609,"def":0.005917159763313609,"get_file_info":0.005917159763313609,"file_path":0.005917159763313609,"file_type":0.005917159763313609,"stat":0.005917159763313609,"return":0.005917159763313609,"fileinfo":0.005917159763313609,"filename":0.005917159763313609,"name":0.005917159763313609,"size":0.005917159763313609,"st_size":0.005917159763313609,"size_formatted":0.005917159763313609,"format_size":0.005917159763313609,"created_at":0.005917159763313609,"datetime":0.005917159763313609,"fromtimestamp":0.005917159763313609,"st_mtime":0.005917159763313609,"strftime":0.005917159763313609,"y-":0.005917159763313609,"m-":0.005917159763313609,"d":0.005917159763313609,"h":0.005917159763313609,"m":0.005917159763313609,"s":0.005917159763313609,"uploads":0.005917159763313609,"processed":0.005917159763313609,"for":0.005917159763313609,"in":0.005917159763313609,"upload_dir":0.005917159763313609,"glob":0.005917159763313609,"if":0.005917159763313609,"is_file":0.005917159763313609,"append":0.005917159763313609,"upload":0.005917159763313609,"processed_dir":0.005917159763313609,"sort":0.005917159763313609,"key":0.005917159763313609,"lambda":0.005917159763313609,"x":0.005917159763313609,"reverse":0.005917159763313609,"true":0.005917159763313609,"filelistresponse":0.005917159763313609,"total_count":0.005917159763313609,"len":0.005917159763313609,"except":0.005917159763313609,"exception":0.005917159763313609,"as":0.005917159763313609,"e":0.005917159763313609,"raise":0.005917159763313609,"httpexception":0.005917159763313609,"status_code":0.005917159763313609,"detail":0.005917159763313609,"f":0.005917159763313609,"failed":0.005917159763313609,"to":0.005917159763313609,"get":0.005917159763313609,"file":0.005917159763313609,"list":0.005917159763313609,"str":0.005917159763313609,"app":0.005917159763313609,"delete":0.005917159763313609,"api":0.005917159763313609,"files":0.005917159763313609,"async":0.005917159763313609,"delete_file":0.005917159763313609,"try":0.005917159763313609,"upload_path":0.005917159763313609,"processed_path":0.005917159763313609,"deleted":0.005917159763313609,"false":0.005917159763313609,"none":0.005917159763313609,"exists":0.005917159763313609,"unlink":0.005917159763313609,"elif":0.005917159763313609,"not":0.005917159763313609,"found":0.005917159763313609,"message":0.005917159763313609,"successfully":0.005917159763313609,"class":0.005917159763313609,"textreplacerequest":0.005917159763313609,"basemodel":0.005917159763313609,"text_replacements":0.005917159763313609,"dict":0.005917159763313609,"image_replacements":0.005917159763313609,"image_id":0.005917159763313609,"-":0.005917159763313609,"uploaded_image_url":0.005917159763313609,"config":0.005917159763313609,"optional":0.005917159763313609,"post":0.005917159763313609,"replace-text-images":0.005917159763313609,"replace_text_images":0.005917159763313609,"request":0.005917159763313609,"image_url":0.005917159763313609,"items":0.005917159763313609,"image_filename":0.005917159763313609,"split":0.005917159763313609,"-1":0.005917159763313609,"image_path":0.005917159763313609,"with":0.005917159763313609,"image":0.005917159763313609,"open":0.005917159763313609,"replacement_image":0.005917159763313609,"copy":0.005917159763313609,"replacer":0.005917159763313609,"textimagereplacer":0.005917159763313609,"result_image":0.005917159763313609,"create_composite_image":0.005917159763313609,"jpg":0.005917159763313609,"output_filename":0.005917159763313609,"text_replaced_":0.005917159763313609,"uuid":0.005917159763313609,"uuid4":0.005917159763313609,"hex":0.005917159763313609,"output_path":0.005917159763313609,"save_as_jpg":0.005917159763313609,"text":0.005917159763313609,"and":0.005917159763313609,"images":0.005917159763313609,"replaced":0.005917159763313609,"using":0.005917159763313609,"template-based":0.005917159763313609,"approach":0.005917159763313609,"processed_url":0.005917159763313609,"replacement":0.005917159763313609,"create-tourism-layout":0.005917159763313609,"create_tourism_layout":0.005917159763313609,"locations":0.005917159763313609,"image_urls":0.005917159763313609,"img":0.005917159763313609,"no":0.005917159763313609,"valid":0.005917159763313609,"layout_image":0.005917159763313609,"tourism_layout_":0.005917159763313609,"tourism":0.005917159763313609,"layout":0.005917159763313609,"creation":0.005917159763313609,"template-config":0.005917159763313609,"get_template_config":0.005917159763313609,"create_template_config":0.005917159763313609,"__name__":0.005917159763313609,"__main__":0.005917159763313609,"import":0.005917159763313609,"uvicorn":0.005917159763313609,"run":0.005917159763313609,"host":0.005917159763313609,"port":0.005917159763313609,"reload":0.005917159763313609},"8":{"1":0.014492753623188406,"2":0.014492753623188406,"3":0.014492753623188406,"4":0.014492753623188406,"5":0.014492753623188406,"6":0.014492753623188406,"11":0.014492753623188406,"37":0.014492753623188406,"45":0.014492753623188406,"600":0.014492753623188406,"800":0.014492753623188406,"2025":0.014492753623188406,"note":0.014492753623188406,"title":0.014492753623188406,"python":0.014492753623188406,"pillow":0.014492753623188406,"metadata":0.014492753623188406,"created":0.014492753623188406,"08":0.014492753623188406,"01":0.014492753623188406,"07":0.014492753623188406,"modified":0.014492753623188406,"block":0.014492753623188406,"content":0.014492753623188406,"pil":0.014492753623188406,"2025-08-01":0.014492753623188406,"031105":0.014492753623188406,"mp4":0.014492753623188406,"opencv":0.014492753623188406,"bgr":0.014492753623188406,"rgb":0.014492753623188406,"cv2":0.014492753623188406,"cvtcolor":0.014492753623188406,"png":0.014492753623188406,"api":0.014492753623188406,"web":0.014492753623188406,"icc":0.014492753623188406,"japan":0.014492753623188406,"color":0.014492753623188406,"before":0.014492753623188406,"after":0.014492753623188406,"-----------------------------------------------":0.014492753623188406,"-------------------------------------------------------":0.014492753623188406,"img_20250607_192630989_nv_with_profile":0.014492753623188406,"jpg":0.014492753623188406,"processed_a370d39c-dc67-474c-b6b7-d183b6d23194":0.014492753623188406,"-------------------------------":0.014492753623188406,"transcend_with_profile":0.014492753623188406,"processed_587f4226-142a-430a-8dfc-9936203af133":0.014492753623188406,"imaging":0.014492753623188406,"library":0.014492753623188406,"image":0.014492753623188406,"open":0.014492753623188406,"resized_image":0.014492753623188406,"resize":0.014492753623188406,"800px":0.014492753623188406,"600px":0.014492753623188406,"rotated_image":0.014492753623188406,"rotate":0.014492753623188406,"blurred_image":0.014492753623188406,"filter":0.014492753623188406,"imagefilter":0.014492753623188406,"gaussianblur":0.014492753623188406,"radius":0.014492753623188406,"grayscale_image":0.014492753623188406,"convert":0.014492753623188406,"'l'":0.014492753623188406,"save":0.014492753623188406,"pyhon":0.014492753623188406},"9":{"11":0.06666666666666667,"37":0.06666666666666667,"2025":0.06666666666666667,"note":0.06666666666666667,"title":0.06666666666666667,"readme":0.06666666666666667,"metadata":0.06666666666666667,"created":0.06666666666666667,"08":0.06666666666666667,"01":0.06666666666666667,"07":0.06666666666666667,"modified":0.06666666666666667,"block":0.06666666666666667,"content":0.06666666666666667,"study-documents":0.06666666666666667}},"embeddingModel":{"1":{"copilot-plus-small":1},"2":{"copilot-plus-small":1},"3":{"copilot-plus-small":1},"4":{"copilot-plus-small":1},"5":{"copilot-plus-small":1},"6":{"copilot-plus-small":1},"7":{"copilot-plus-small":1},"8":{"copilot-plus-small":1},"9":{"copilot-plus-small":1}},"tags":{},"extension":{"1":{"md":1},"2":{"md":1},"3":{"md":1},"4":{"md":1},"5":{"md":1},"6":{"md":1},"7":{"md":1},"8":{"md":1},"9":{"md":1}}},"tokenOccurrences":{"id":{"7b4c3a5f2351e68d3fab702932a69aab":1,"1f18119a228357d4a4d1ad176766099e":1,"fdf9b5ff709a96f1f4b2f9548042e2e9":1,"9ca9b5355017a0ddced116c218340237":1,"80f7a1dbcb9542d4724e15cc1ec5e830":1,"e23a8f2b97eb4b4ce2c21dbf16b77f2c":1,"e68c06e6749a791ef6819b56d7359187":1,"1e58243d8b3345b7f61176cbddfbc364":1,"2222116f6465647400989b362ca33dce":1},"title":{"requirements":1,"main":6,"python":1,"pillow":1,"readme":1},"path":{"source":7,"image-editor":7,"requirements":1,"md":9,"main":6,"python":1,"pillow":1,"readme":1},"content":{"0":7,"1":7,"2":3,"3":4,"4":2,"5":2,"6":3,"7":1,"8":3,"10":1,"11":9,"13":1,"23":1,"24":2,"26":1,"30":1,"31":1,"37":9,"45":1,"72":2,"95":2,"104":1,"255":2,"400":3,"404":3,"500":3,"600":2,"800":2,"1024":2,"2025":9,"3600":1,"8000":1,"note":9,"title":9,"requirements":1,"metadata":9,"created":9,"08":9,"01":9,"07":9,"modified":9,"block":9,"content":9,"fastapi":2,"uvicorn":2,"standard":1,"python-multipart":1,"pillow":2,"pydantic":2,"python-jose":1,"cryptography":1,"passlib":1,"bcrypt":1,"aiofiles":2,"numpy":1,"scikit-image":1,"scipy":1,"requests":1,"main":6,"from":3,"import":4,"file":3,"uploadfile":1,"httpexception":4,"middleware":1,"cors":1,"corsmiddleware":1,"responses":1,"fileresponse":3,"streamingresponse":2,"staticfiles":1,"basemodel":4,"typing":1,"dict":4,"any":1,"optional":2,"list":5,"os":3,"uuid":3,"pil":4,"image":7,"imagefilter":3,"imageenhance":1,"imageops":2,"asyncio":4,"pathlib":1,"path":5,"zipfile":2,"io":2,"xml":2,"etree":1,"elementtree":1,"as":6,"et":1,"re":2,"text_image_replacer":1,"textimagereplacer":2,"create_template_config":2,"app":4,"editor":2,"api":5,"version":2,"add_middleware":1,"allow_origins":1,"allow_credentials":1,"true":4,"allow_methods":1,"allow_headers":1,"upload_dir":3,"uploads":4,"processed_dir":4,"processed":6,"mkdir":1,"exist_ok":1,"mount":1,"directory":1,"name":2,"class":4,"imageresponse":1,"url":1,"str":6,"filename":5,"imagebatchresponse":2,"original_url":2,"processed_url":3,"original_filename":2,"processed_filename":2,"status":3,"error_message":2,"none":5,"operationrequest":2,"id":2,"operation":3,"parameters":3,"float":3,"enablecrop":2,"bool":1,"processbatchrequest":1,"image_urls":2,"operations":2,"output_format":1,"original":2,"get":6,"async":6,"def":6,"root":1,"return":6,"message":3,"post":4,"upload":2,"response_model":2,"upload_image":1,"if":6,"not":6,"content_type":1,"or":1,"startswith":1,"raise":5,"status_code":4,"detail":4,"invalid":1,"type":1,"please":1,"an":1,"file_extension":1,"split":2,"-1":2,"else":4,"jpg":3,"unique_filename":1,"f":6,"uuid4":3,"file_path":4,"with":6,"open":6,"wb":1,"await":4,"read":3,"write":3,"upload-batch":1,"upload_batch_images":1,"files":4,"uploaded_files":1,"for":5,"in":6,"images":3,"only":1,"append":3,"process-batch":1,"process_batch_images":1,"request":4,"results":2,"image_url":3,"try":6,"input_path":3,"error":3,"continue":2,"exists":4,"found":4,"original_extension":1,"lower":3,"output_extension":3,"elif":5,"png":3,"webp":1,"output_filename":3,"processed_":1,"output_path":5,"process_multiple_operations_async":2,"cont'd":5,"success":1,"except":5,"exception":5,"e":5,"valueerror":1,"process_sync":3,"original_image":2,"copy":3,"dpi":2,"dpi_value":1,"int":4,"operation_params":1,"resize":2,"and":5,"is":1,"crop":1,"apply_pil_operation":2,"exif":2,"getexif":2,"icc_profile":2,"info":3,"'icc_profile'":2,"endswith":2,"'":3,"png'":2,"save_format":2,"'png'":2,"jpg'":2,"jpeg'":2,"'jpeg'":2,"webp'":2,"'webp'":2,"save_kwargs":2,"'format'":2,"'dpi'":2,"'optimize'":2,"'quality'":2,"'compress_level'":2,"'exif'":2,"icc":3,"save":3,"print":3,"warning":3,"could":2,"preserve_image_metadata_and_save":2,"cpu":3,"loop":3,"get_event_loop":3,"run_in_executor":3,"-":4,"width":1,"height":1,"fit":1,"resampling":1,"lanczos":1,"rotate":2,"angle":1,"resample":1,"bicubic":1,"expand":1,"blur":1,"sigma":1,"filter":2,"gaussianblur":2,"radius":2,"grayscale":1,"l":1,"rgb":3,"convert":3,"'l'":2,"'rgb'":2,"sepia":1,"new":3,"size":5,"sepia_pixels":1,"pixel":1,"getdata":1,"r":2,"min":1,"g":1,"b":3,"putdata":1,"overlay":1,"opacity":2,"alpha":2,"overlay_with_alpha":2,"'rgba'":2,"rgba":1,"mode":1,"image_rgba":1,"alpha_composite":1,"pass":1,"original_path":1,"processed_image":1,"profile":1,"saved":1,"preservation":1,"preserve":1,"format":1,"compress_level":1,"quality":1,"optimize":1,"process_image_async":1,"successfully":4,"get_image":1,"media_type":2,"get_uploaded_image":1,"download-batch":1,"download_batch_images":1,"filenames":1,"zip":1,"no":3,"specified":1,"zip_buffer":1,"bytesio":1,"w":2,"zip_deflated":1,"zip_file":1,"seek":1,"application":1,"headers":1,"content-disposition":1,"attachment":1,"processed_images":1,"delete":2,"clear-files":1,"clear_files":1,"upload_files":1,"glob":2,"processed_files":1,"is_file":2,"unlink":2,"cleared":1,"deleted_uploads":1,"len":3,"deleted_processed":1,"total_deleted":1,"failed":3,"to":2,"clear":1,"clear-old-files":1,"clear_old_files":1,"hours":1,"time":1,"current_time":1,"cutoff_time":1,"stat":2,"st_mtime":2,"old":1,"older":1,"than":1,"storage-info":1,"get_storage_info":1,"get_directory_size":1,"total_size":1,"file_count":1,"st_size":2,"upload_size":1,"upload_count":1,"processed_size":1,"processed_count":1,"format_size":3,"size_bytes":2,"size_names":2,"kb":2,"mb":2,"gb":2,"i":2,"while":2,"1f":2,"size_formatted":3,"total":1,"storage":1,"health":1,"health_check":1,"datetime":3,"healthy":1,"timestamp":1,"now":1,"isoformat":1,"api_name":1,"svg":2,"svggeneraterequest":2,"prefecture":2,"color":3,"ff6277":2,"svgresponse":2,"svg_content":2,"prefectures":1,"get_prefectures":1,"generate-svg":1,"generate_svg":1,"svg_path":1,"assets":1,"map":1,"template":1,"encoding":1,"utf-8":1,"reset_ids":1,"-2":1,"prefecture_id":1,"pattern1":1,"f'id":1,"fill":1,"search":1,"replacement1":1,"1fill":1,"fff":1,"sub":1,"prefecture_ids":1,"pattern":1,"matched":1,"updated":1,"existing":1,"attribute":1,"style":1,"pattern2":1,"replacement2":1,"1style":1,"2fill":1,"pattern3":1,"replacement3":1,"added":1,"japan_map_":1,"_":1,"hex":2,"generated":1,"generation":1,"get_svg":1,"fileinfo":2,"created_at":2,"file_type":2,"filelistresponse":2,"total_count":2,"get_file_list":1,"get_file_info":1,"fromtimestamp":1,"strftime":1,"y-":1,"m-":1,"d":1,"h":1,"m":1,"s":1,"sort":1,"key":1,"lambda":1,"x":1,"reverse":1,"delete_file":1,"upload_path":1,"processed_path":1,"deleted":1,"false":1,"textreplacerequest":1,"text_replacements":1,"image_replacements":1,"image_id":1,"uploaded_image_url":1,"config":1,"replace-text-images":1,"replace_text_images":1,"items":1,"image_filename":1,"image_path":1,"replacement_image":1,"replacer":1,"result_image":1,"create_composite_image":1,"text_replaced_":1,"save_as_jpg":1,"text":1,"replaced":1,"using":1,"template-based":1,"approach":1,"replacement":1,"create-tourism-layout":1,"create_tourism_layout":1,"locations":1,"img":1,"valid":1,"layout_image":1,"tourism_layout_":1,"tourism":1,"layout":1,"creation":1,"template-config":1,"get_template_config":1,"__name__":1,"__main__":1,"run":1,"host":1,"port":1,"reload":1,"python":1,"2025-08-01":1,"031105":1,"mp4":1,"opencv":1,"bgr":1,"cv2":1,"cvtcolor":1,"web":1,"japan":1,"before":1,"after":1,"-----------------------------------------------":1,"-------------------------------------------------------":1,"img_20250607_192630989_nv_with_profile":1,"processed_a370d39c-dc67-474c-b6b7-d183b6d23194":1,"-------------------------------":1,"transcend_with_profile":1,"processed_587f4226-142a-430a-8dfc-9936203af133":1,"imaging":1,"library":1,"resized_image":1,"800px":1,"600px":1,"rotated_image":1,"blurred_image":1,"grayscale_image":1,"pyhon":1,"readme":1,"study-documents":1},"embeddingModel":{"copilot-plus-small":9},"tags":{},"extension":{"md":9}},"avgFieldLength":{"id":1,"title":1.1111111111111112,"path":3.6666666666666665,"content":120.88888888888889,"embeddingModel":1,"tags":0,"extension":1},"fieldLengths":{"id":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1},"title":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":2,"9":1},"path":{"1":4,"2":4,"3":4,"4":4,"5":4,"6":4,"7":4,"8":3,"9":2},"content":{"1":44,"2":170,"3":167,"4":120,"5":174,"6":160,"7":169,"8":69,"9":15},"embeddingModel":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1},"tags":{},"extension":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1}}},"docs":{"docs":{"1":{"title":"requirements","path":"勉強会資料/source/image-editor/requirements.md","embeddingModel":"copilot-plus-small","ctime":1754014057662,"mtime":1754014057662,"tags":[],"extension":"md","metadata":{"created":"2025/08/01 11:07:37","modified":"2025/08/01 11:07:37"},"id":"7b4c3a5f2351e68d3fab702932a69aab","content":"\n\nNOTE TITLE: [[requirements]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\n```\nfastapi==0.104.1\nuvicorn[standard]==0.24.0\npython-multipart==0.0.6\nPillow==10.1.0\npydantic==2.5.0\npython-jose[cryptography]==3.3.0\npasslib[bcrypt]==1.7.4\naiofiles==23.2.1\nnumpy==1.26.4\nscikit-image==0.24.0\nscipy==1.13.0\nrequests==2.31.0\n```","embedding":[0.011612103,-0.00118228,-0.075343609,-0.01577737,0.045739707,-0.011674323,0.03944489,-0.021043282,0.022581479,0.04752275,0.074929595,0.012556119,0.062874883,-0.094032139,0.037896626,0.026482563,0.012898876,-0.08263284,0.098654188,0.110304736,0.024911944,-0.059342429,-0.068204254,-0.072261646,0.08287546,-0.001275463,-0.016374545,0.037791405,0.070621327,0.039205607,-0.047583349,-0.08585456,-0.045196641,0.089458987,-0.076982304,0.091859557,0.136795685,0.056398764,0.118484356,-0.098381437,-0.120291919,-0.00858234,-0.072676301,-0.039785195,0.093081988,-0.049378354,-0.009207741,0.069741607,0.007988957,-0.065228544,-0.107163347,0.019645736,-0.07626038,0.056627162,0.000386041,0.031784534,-0.027653769,-0.016500173,0.060581177,0.084603988,-0.030002628,-0.017252287,-0.052377988,0.074791595,0.059581082,0.061467435,0.050419725,-0.008259521,0.033742171,0.017279752,-0.02763748,0.013540261,0.04419427,0.0135098,-0.032376483,0.117623463,0.049012378,0.107749373,-0.043245215,-0.059776645,-0.02417876,0.031758569,0.043587305,-0.046315119,0.001952255,-0.024609884,0.025728688,-0.083176829,0.016024144,-0.054066759,0.085434854,0.040658571,-0.049707305,-0.185738787,0.032612074,0.083839536,0.051331826,-0.016544253,-0.000887693,-0.043189004,-0.001319728,0.075995795,0.005658849,-0.050283536,-0.030374475,-0.020334471,0.082760565,0.032190654,0.100643888,0.003728957,0.107244156,-0.024279349,-0.224227875,0.001304089,-0.023248743,-0.003061125,0.069843307,0.044051345,-0.053356308,0.036065418,0.029940831,0.013917207,-0.054538768,0.008590481,-0.16393128,-0.027911404,-0.137885913,0.115592055,-0.051989589,-0.052038897,-0.049318381,0.003656245,0.052967858,0.020498352,0.020834258,0.127439678,0.046119362,0.018569972,0.05255869,-0.07025183,-0.079556391,-0.005634627,0.043564588,-0.008206198,0.106609352,0.095417351,0.097570561,-0.000067068,0.057181094,-0.053662304,-0.01930481,0.115827873,0.020393882,-0.089214765,-0.073853053,-0.050727431,0.081530437,-0.029779444,-0.016650338,0.043384656,0.081724577,-0.019206865,-0.022278845,-0.056564376,0.032292437,0.000755995,-0.026787108,-0.106371105,-0.037004553,-0.035651669,-0.080930576,-0.034653246,-0.06515424,0.018204331,-0.117241904,-0.079643607,0.131762832,0.115773946,-0.048785791,-0.090084605,0.032518536,-0.039190535,0.076683372,0.152478948,0.041983183,0.037490014,-0.02734611,-0.007369212,-0.068919286,0.153309524,-0.00828305,0.02024579,-0.039238546,-0.048563942,0.007612838,-0.069321297,0.102069356,0.039708696,-0.044734865,-0.013630877,0.127386868,-0.059995756,0.120213367,-0.002558427,0.001776473,-0.000559371,0.050851922,-0.039397024,-0.006783952,-0.034911465,0.005063103,-0.025969243,0.062616609,-0.038128767,-0.003249995,-0.104604393,-0.015637778,-0.020193495,-0.016372668,0.115475528,-0.026630979,-0.031937316,-0.060250927,0.00327454,0.020328036,-0.016008023,0.087351993,0.028448034,-0.001471707,0.005944874,0.062207159,-0.058624171,0.002763795,-0.053315081,-0.019526929,0.080184989,-0.028832991,0.024393078,0.001021595,0.006306921,-0.069944263,-0.012109567,-0.035769422,-0.074412897,0.035644956,0.037740406,0.07494498,0.032277383,0.045759805,-0.075739563,-0.016376646,-0.043402512,0.035979684,-0.01732092,-0.013692361,-0.080433972],"created_at":1754014500848,"nchars":374},"2":{"title":"main","path":"勉強会資料/source/image-editor/main.md","embeddingModel":"copilot-plus-small","ctime":1754014057662,"mtime":1754014057662,"tags":[],"extension":"md","metadata":{"created":"2025/08/01 11:07:37","modified":"2025/08/01 11:07:37"},"id":"1f18119a228357d4a4d1ad176766099e","content":"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\n```\nfrom fastapi import FastAPI, File, UploadFile, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.responses import FileResponse, StreamingResponse\nfrom fastapi.staticfiles import StaticFiles\nfrom pydantic import BaseModel\nfrom typing import Dict, Any, Optional, List\nimport os\nimport uuid\nfrom PIL import Image, ImageFilter, ImageEnhance, ImageOps\nimport asyncio\nfrom pathlib import Path\nimport aiofiles\nimport zipfile\nimport io\nimport xml.etree.ElementTree as ET\nimport re\nfrom text_image_replacer import TextImageReplacer, create_template_config\n\napp = FastAPI(title=\"Image Editor API\", version=\"1.0.0\")\n\n# CORS設定\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# アップロードディレクトリの設定\nUPLOAD_DIR = Path(\"uploads\")\nPROCESSED_DIR = Path(\"processed\")\nUPLOAD_DIR.mkdir(exist_ok=True)\nPROCESSED_DIR.mkdir(exist_ok=True)\n\n# 静的ファイル配信の設定\napp.mount(\"/uploads\", StaticFiles(directory=UPLOAD_DIR), name=\"uploads\")\napp.mount(\"/processed\", StaticFiles(directory=PROCESSED_DIR), name=\"processed\")\n\n\nclass ImageResponse(BaseModel):\n    url: str\n    filename: str\n\n\nclass ImageBatchResponse(BaseModel):\n    original_url: str\n    processed_url: str\n    original_filename: str\n    processed_filename: str\n    status: str\n    error_message: Optional[str] = None\n\n\nclass OperationRequest(BaseModel):\n    id: str\n    operation: str\n    parameters: Dict[str, float]\n    enableCrop: Optional[bool] = None\n\n\nclass ProcessBatchRequest(BaseModel):\n    image_urls: List[str]\n    operations: List[OperationRequest]\n    output_format: Optional[str] = \"original\"\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Image Editor API\", \"version\": \"1.0.0\"}\n\n\n@app.post(\"/api/upload\", response_model=ImageResponse)\nasync def upload_image(file: UploadFile = File(...)):\n    \"\"\"画像ファイルをアップロードする\"\"\"\n    if not file.content_type or not file.content_type.startswith(\"image/\"):\n        raise HTTPException(\n            status_code=400, detail=\"Invalid file type. Please upload an image.\"\n        )\n\n    # ファイル名を生成\n    file_extension = file.filename.split(\".\")[-1] if file.filename else \"jpg\"\n    unique_filename = f\"{uuid.uuid4()}.{file_extension}\"\n    file_path = UPLOAD_DIR / unique_filename\n\n    # ファイルを保存\n    async with aiofiles.open(file_path, \"wb\") as f:\n        content = await file.read()\n        await f.write(content)\n\n    return ImageResponse(url=f\"/uploads/{unique_filename}\", filename=unique_filename)\n\n\n@app.post(\"/api/upload-batch\", response_model=List[ImageResponse])\nasync def upload_batch_images(files: List[UploadFile] = File(...)):\n    \"\"\"複数の画像ファイルを一括アップロードする\"\"\"\n    uploaded_files = []\n\n    for file in files:\n        if not file.content_type or not file.content_type.startswith(\"image/\"):\n            raise HTTPException(\n                status_code=400,\n                detail=f\"Invalid file type: {file.filename}. Please upload images only.\",\n            )\n\n        # ファイル名を生成\n        file_extension = file.filename.split(\".\")[-1] if file.filename else \"jpg\"\n        unique_filename = f\"{uuid.uuid4()}.{file_extension}\"\n        file_path = UPLOAD_DIR / unique_filename\n\n        # ファイルを保存\n        async with aiofiles.open(file_path, \"wb\") as f:\n            content = await file.read()\n            await f.write(content)\n\n        uploaded_files.append(\n            ImageResponse(url=f\"/uploads/{unique_filename}\", filename=unique_filename)\n        )\n\n    return uploaded_files\n\n\n@app.post(\"/api/process-batch\", response_model=List[ImageBatchResponse])\nasync def process_batch_images(request: ProcessBatchRequest):\n    \"\"\"複数の画像を一括処理する\"\"\"\n    results = []\n\n    for image_url in request.image_urls:\n        try:\n            # アップロード画像のパスを取得\n            if image_url.startswith(\"/uploads/\") or \"/uploads/\" in image_url:\n                filename = image_url.split(\"/\")[-1]\n                input_path = UPLOAD_DIR / filename\n            else:\n                results.append(\n                    ImageBatchResponse(\n                        original_url=image_url,\n                        processed_url=\"\",\n                        original_filename=filename,\n                        processed_filename=\"\",\n                        status=\"error\",\n                        error_message=\"Invalid image URL\",\n                    )\n                )\n                continue\n\n            if not input_path.exists():\n                results.append(\n                    ImageBatchResponse(\n                        original_url=image_url,\n                        processed_url=\"\",\n                        original_filename=filename,\n                        processed_filename=\"\",\n                        status=\"error\",\n                        error_message=\"Image not found\",\n                    )\n                )\n                continue\n\n            # 出力ファイル名を生成（元の拡張子を保持または指定された形式に変換）\n            original_extension = filename.split(\".\")[-1].lower()\n\n            if request.output_format == \"original\":\n                output_extension = original_extension\n            elif request.output_format == \"png\":\n                output_extension = \"png\"\n            elif request.output_format == \"jpg\":\n                output_extension = \"jpg\"\n            elif request.output_format == \"webp\":\n                output_extension = \"webp\"\n            else:\n                output_extension = original_extension\n\n            output_filename = f\"processed_{uuid.uuid4()}.{output_extension}\"\n            output_path = PROCESSED_DIR / output_filename\n\n            # 複数の画像処理を順番に実行\n            await process_multiple_operations_async(\n                input_path, output_path, request.operations\n            )","embedding":[-0.041873533,0.020602969,-0.089260474,0.025018301,0.031858172,-0.018569503,-0.052707862,-0.038386457,0.047525432,0.127763629,0.062859342,0.078238152,0.046553168,-0.152256921,0.03457823,0.05835985,0.065826677,-0.054189209,0.037430611,0.05161529,0.007191181,-0.076107271,-0.072230086,-0.019067083,0.088583827,-0.008597581,-0.033015486,-0.104107879,0.044410758,0.079763979,-0.082814746,-0.11036896,-0.059366066,0.027694661,-0.018837376,0.09710259,0.114606515,0.080337375,0.119549863,-0.089891814,-0.126979128,0.081071027,-0.019583104,-0.039569788,0.08832638,-0.021755066,-0.042487226,0.042926513,-0.000949583,-0.031051114,-0.086008899,0.048468743,-0.070661023,0.094881475,0.027833018,0.021795427,0.026860945,0.040159527,0.094151258,0.050844103,-0.072899632,0.01565679,-0.01619808,0.076153941,0.002312648,0.06120814,-0.001064142,0.044569898,0.049839605,0.005978049,-0.036278233,0.012644991,0.049284987,0.012734379,-0.003579978,0.110682547,0.077373557,-0.013696654,-0.036935493,-0.100829341,-0.117882982,0.003628131,0.02651911,-0.059981752,-0.012087028,-0.022332039,0.023712385,-0.026193008,0.056393452,-0.056784499,0.017424993,0.053039614,-0.01657841,-0.128522739,0.020401932,0.043720756,0.010195395,0.002301578,0.019723283,-0.010745291,0.063463971,0.057138823,-0.065109715,0.0213925,0.017641831,-0.058494486,0.052158382,0.03083352,0.097786397,0.024956813,0.158747405,0.032963566,-0.152558744,-0.03718853,0.002516231,0.016253324,-0.000744481,0.020629002,-0.004547455,-0.048021264,-0.019832553,-0.034327026,-0.065346837,0.053035613,-0.170360237,-0.004527106,-0.126484185,0.109892823,0.009018759,0.028450226,0.010314245,0.001455086,0.012136929,0.033147659,0.0043743,0.055087175,0.028544456,0.005947829,0.014631314,-0.053146593,-0.039772954,0.058281027,0.035970017,0.001615224,0.134546027,0.076841831,0.074477114,-0.028241977,0.075024299,-0.08776512,0.015298133,0.090813853,0.029931091,-0.045704108,-0.07716725,0.039498419,0.014040539,-0.098872259,-0.107124411,0.049556006,0.029643077,0.040593755,0.012276348,-0.069261812,0.027664103,-0.015481632,-0.056269117,-0.041567653,-0.025774753,0.052431092,-0.027235312,-0.061316002,-0.036274429,0.072368518,-0.133738741,-0.034529109,0.120790236,0.059899077,-0.040297113,-0.066897169,0.03532882,-0.105208926,0.088462822,0.091491081,0.059510674,0.057563376,-0.050197821,-0.040742774,-0.032139208,0.196045995,0.007590975,0.023479516,-0.040318538,0.03066648,0.038350247,-0.062951639,0.162471697,0.015484817,-0.079619803,-0.009328645,0.175365075,-0.084697776,0.049244493,-0.02044183,0.055156901,0.039407138,0.064057462,-0.080679469,-0.008823592,-0.070443034,0.046480969,-0.018083731,0.093184091,-0.043019861,0.060824268,-0.083041124,0.015736016,-0.00947311,-0.036104374,0.053784266,-0.001262768,-0.001445932,-0.028515227,0.021420531,-0.017857129,0.015680367,-0.013625829,0.015395571,0.019426076,-0.014524687,-0.027543474,-0.058995619,-0.023688549,-0.01674311,-0.024953432,0.05313164,-0.085178256,-0.004395453,-0.02343782,0.007879778,-0.089719832,-0.013291611,-0.01830506,-0.07314942,0.031380564,0.180504143,0.045906279,-0.015826486,0.08576005,-0.070292786,-0.004964555,-0.006680184,0.063265167,-0.007089317,-0.037930213,-0.006966885],"created_at":1754014500850,"nchars":5817},"3":{"title":"main","path":"勉強会資料/source/image-editor/main.md","embeddingModel":"copilot-plus-small","ctime":1754014057662,"mtime":1754014057662,"tags":[],"extension":"md","metadata":{"created":"2025/08/01 11:07:37","modified":"2025/08/01 11:07:37"},"id":"fdf9b5ff709a96f1f4b2f9548042e2e9","content":"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) # 複数の画像処理を順番に実行\n            await process_multiple_operations_async(\n                input_path, output_path, request.operations\n            )\n\n            results.append(\n                ImageBatchResponse(\n                    original_url=image_url,\n                    processed_url=f\"/processed/{output_filename}\",\n                    original_filename=filename,\n                    processed_filename=output_filename,\n                    status=\"success\",\n                    error_message=None,\n                )\n            )\n\n        except Exception as e:\n            results.append(\n                ImageBatchResponse(\n                    original_url=image_url,\n                    processed_url=\"\",\n                    original_filename=filename,\n                    processed_filename=\"\",\n                    status=\"error\",\n                    error_message=str(e),\n                )\n            )\n\n    return results\n\n\nasync def process_multiple_operations_async(\n    input_path: Path, output_path: Path, operations: List[OperationRequest]\n):\n    \"\"\"複数の操作を順番に処理する（PILのみ使用、メモリ内で処理して品質劣化を最小化）\"\"\"\n    if not operations:\n        raise ValueError(\"操作が指定されていません\")\n\n    def process_sync():\n        # PILで画像を読み込み（カラープロファイル保持）\n        with Image.open(str(input_path)) as original_image:\n            # 画像をコピーして処理用にする\n            image = original_image.copy()\n\n            # DPI情報を保持\n            dpi_value = None\n            for operation in operations:\n                if operation.operation == \"dpi\":\n                    dpi_value = int(operation.parameters.get(\"dpi\", 72))\n\n            # 全ての操作を順番に適用\n            for operation in operations:\n                operation_params = operation.parameters.copy()\n                if operation.operation == \"resize\" and operation.enableCrop is not None:\n                    operation_params[\"crop\"] = 1 if operation.enableCrop else 0\n\n                image = apply_pil_operation(image, operation.operation, operation_params)\n\n            # DPI情報がある場合は保存時に適用\n            if dpi_value:\n                # メタデータ保持保存（DPI情報付き）\n                try:\n                    # 元画像からメタデータを取得\n                    exif = original_image.getexif()\n                    icc_profile = original_image.info.get('icc_profile')\n\n                    # 保存形式を決定\n                    output_extension = str(output_path).lower()\n                    if output_extension.endswith('.png'):\n                        save_format = 'PNG'\n                    elif output_extension.endswith(('.jpg', '.jpeg')):\n                        save_format = 'JPEG'\n                    elif output_extension.endswith('.webp'):\n                        save_format = 'WEBP'\n                    else:\n                        save_format = 'JPEG'\n\n                    save_kwargs = {\n                        'format': save_format,\n                        'dpi': (dpi_value, dpi_value),\n                        'optimize': True\n                    }\n\n                    if save_format in ['JPEG', 'WEBP']:\n                        save_kwargs['quality'] = 95\n                    elif save_format == 'PNG':\n                        save_kwargs['compress_level'] = 1\n\n                    # EXIFデータがある場合は保持\n                    if exif and save_format in ['JPEG', 'WEBP']:\n                        save_kwargs['exif'] = exif\n\n                    # ICCプロファイルがある場合は保持\n                    if icc_profile:\n                        save_kwargs['icc_profile'] = icc_profile\n\n                    image.save(str(output_path), **save_kwargs)\n\n                except Exception as e:\n                    print(f\"Warning: Could not save with DPI metadata: {e}\")\n                    preserve_image_metadata_and_save(input_path, output_path, image)\n            else:\n                # 通常の保存（メタデータ保持）\n                preserve_image_metadata_and_save(input_path, output_path, image)\n\n    # CPU集約的な処理を別スレッドで実行\n    loop = asyncio.get_event_loop()\n    await loop.run_in_executor(None, process_sync)\n\n\ndef apply_pil_operation(image: Image.Image, operation: str, parameters: Dict[str, float]) -> Image.Image:\n    \"\"\"PILによる単一の画像処理操作を適用する（メモリ内処理）\"\"\"\n    if operation == \"resize\":\n        width = int(parameters.get(\"width\", 800))\n        height = int(parameters.get(\"height\", 600))\n        crop = int(parameters.get(\"crop\", 0))  # 0=通常リサイズ, 1=トリミング付きリサイズ\n\n        if crop == 1:\n            # トリミング付きリサイズ：アスペクト比を維持してトリミング\n            # ImageOps.fitを使用してスマートトリミング\n            image = ImageOps.fit(image, (width, height), Image.Resampling.LANCZOS)\n        else:\n            # 通常のリサイズ：アスペクト比を無視して指定サイズに変更\n            image = image.resize((width, height), Image.Resampling.LANCZOS)\n\n    elif operation == \"rotate\":\n        angle = parameters.get(\"angle\", 0)\n        # 高品質な回転処理\n        image = image.rotate(angle, resample=Image.Resampling.BICUBIC, expand=True)\n\n    elif operation == \"blur\":\n        sigma = parameters.get(\"sigma\", 1.0)\n        # ガウシアンブラーを適用\n        image = image.filter(ImageFilter.GaussianBlur(radius=sigma))\n\n    elif operation == \"grayscale\":\n        # グレースケール変換（Lモードに変換してからRGBに戻す）\n        grayscale = image.convert('L')\n        image = grayscale.convert('RGB')\n\n    elif operation == \"sepia\":\n        # セピア効果をPILで実装\n        # まずグレースケールに変換\n        grayscale = image.convert('L')\n\n        # セピア色調を作成\n        sepia = Image.new('RGB', image.size)\n        sepia_pixels = []\n\n        for pixel in grayscale.getdata():\n            # セピア色計算\n            r = min(255, int(pixel * 1.0))\n            g = min(255, int(pixel * 0.8))\n            b = min(255, int(pixel * 0.6))\n            sepia_pixels.append((r, g, b))\n\n        sepia.putdata(sepia_pixels)\n        image = sepia\n\n    elif operation == \"overlay\":\n        # 透過黒オーバーレイを適用\n        opacity = parameters.get(\"opacity\", 0.3)  # デフォルト30%\n\n        # アルファ値を計算して黒いオーバーレイを作成\n        alpha = int(opacity * 255)\n        overlay_with_alpha = Image.new('RGBA', image.size, (0, 0, 0, alpha))","embedding":[-0.045060519,0.042588294,-0.045775414,0.029112717,0.033778198,-0.038449261,-0.056288335,-0.02239321,0.028377369,0.101404309,0.120607644,0.031874891,0.052134264,-0.117418915,-0.012977263,0.047683086,0.119206145,-0.060099144,0.005397982,0.043359086,0.028839143,-0.019121461,-0.054932084,-0.006871995,0.032997683,-0.042075858,-0.006916086,-0.111666702,0.086103931,0.04229255,-0.12067499,-0.081012987,-0.075914584,-0.023669766,-0.021398414,0.163821325,0.100014418,0.13512975,0.090663917,-0.083378844,-0.082101561,0.102361247,0.00846252,-0.021510299,0.075483851,-0.07746233,-0.003954631,0.002817306,0.015994236,-0.078107186,-0.019681878,0.035598438,-0.043297492,0.038562749,-0.020260766,0.016542237,0.000313925,0.017685825,0.102663927,0.025475131,-0.052114241,-0.017078407,0.001019011,0.08798857,0.005283927,0.054662477,0.014196054,0.001718714,-0.031366505,-0.010859074,-0.019332727,0.082603842,0.065815292,0.065474063,0.031338982,0.11071264,0.075908825,-0.024595685,0.01883168,-0.087912045,-0.125457466,0.001915409,-0.019760029,-0.015095823,-0.053225555,0.020632003,-0.045350518,-0.081384391,0.062945619,-0.077173904,0.044992127,0.03910435,-0.048703652,-0.0944589,0.050914969,0.025472626,0.053437669,-0.004921754,0.023605952,-0.033105202,0.022682222,0.017903119,-0.037310578,-0.011256212,0.01462569,-0.077065751,0.087204203,-0.016302591,0.108750537,-0.003085619,0.096835181,0.076310165,-0.117573507,-0.002639297,-0.04191203,-0.012416861,0.006620926,-0.008592729,-0.01432925,-0.082096323,-0.020714175,-0.063113473,-0.074194685,0.120746434,-0.179492205,-0.006157458,-0.071584292,0.04036383,0.011510655,0.002216165,-0.034601241,0.008073901,-0.039221127,0.077270485,-0.011903193,0.035597872,-0.000911565,0.015462497,-0.067542717,-0.018505886,-0.044952583,-0.018438924,0.059027448,-0.010833598,0.148986101,0.113078818,0.061721593,-0.041173089,0.091370665,-0.066374339,-0.000748457,0.051864889,0.029177804,0.003708359,-0.110825017,0.06526164,-0.03846585,-0.073043488,-0.071522973,0.031775307,-0.004017241,-0.03306726,0.021418083,-0.046896476,0.031199934,0.032111503,-0.062127575,-0.029811278,0.019531677,0.015512293,-0.098078653,-0.032632127,-0.109483652,0.03207555,-0.125579268,-0.006206313,0.068150863,0.121794097,-0.108247392,-0.037075274,0.028321968,-0.076348715,0.087469757,0.098459274,0.019186808,0.055998463,-0.011038239,-0.042677075,0.010731262,0.195147932,-0.058361091,-0.0022876,-0.001207573,0.056026548,0.007439751,-0.054312803,0.181065127,0.005686565,-0.01348845,0.03205733,0.117900096,-0.066348083,0.058554258,-0.015457738,0.030576088,0.0733224,0.085890204,-0.06362313,-0.006345339,-0.048221849,0.053542744,-0.028560134,0.113956101,-0.010203959,0.028947294,-0.049305443,0.125722557,0.012619725,-0.040455624,0.090852737,-0.017627416,-0.063638434,-0.044678323,0.013052531,0.017271524,0.010573397,-0.026933555,0.03712156,0.020782139,-0.071634017,-0.018629016,-0.038172748,-0.000062592,0.033146791,0.022977537,0.02061227,-0.054407429,-0.057533067,0.006248469,-0.010212258,-0.06672667,-0.066049494,-0.041131031,-0.095054828,0.036374755,0.157253683,0.037410006,-0.038805019,0.063723728,-0.129643038,-0.02197527,-0.034206964,0.052630156,-0.051585063,-0.030449085,0.006852761],"created_at":1754014500853,"nchars":6035},"4":{"title":"main","path":"勉強会資料/source/image-editor/main.md","embeddingModel":"copilot-plus-small","ctime":1754014057662,"mtime":1754014057662,"tags":[],"extension":"md","metadata":{"created":"2025/08/01 11:07:37","modified":"2025/08/01 11:07:37"},"id":"9ca9b5355017a0ddced116c218340237","content":"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) # アルファ値を計算して黒いオーバーレイを作成\n        alpha = int(opacity * 255)\n        overlay_with_alpha = Image.new('RGBA', image.size, (0, 0, 0, alpha))\n\n        # 元画像をRGBAに変換\n        if image.mode != 'RGBA':\n            image_rgba = image.convert('RGBA')\n        else:\n            image_rgba = image\n\n        # 合成\n        image = Image.alpha_composite(image_rgba, overlay_with_alpha)\n\n        # 必要に応じてRGBに戻す\n        if image.mode == 'RGBA':\n            image = image.convert('RGB')\n\n\n\n    elif operation == \"dpi\":\n        # DPI変更（画像自体は変更せず、メタデータのみ変更）\n        # DPI情報は保存時に設定されるため、ここでは何もしない\n        pass\n\n    return image\n\n\ndef preserve_image_metadata_and_save(original_path: Path, output_path: Path, processed_image: Image.Image):\n    \"\"\"元画像のメタデータ（EXIF、カラープロファイル）を保持して保存\"\"\"\n    try:\n        # 元画像を開いてメタデータを取得\n        with Image.open(str(original_path)) as original:\n            # EXIFデータを取得\n            exif = original.getexif()\n\n            # カラープロファイル（ICC Profile）を取得\n            icc_profile = original.info.get('icc_profile')\n\n            # その他のメタデータも取得\n            info = original.info.copy()\n\n            # 保存形式を決定\n            output_extension = str(output_path).lower()\n            if output_extension.endswith('.png'):\n                save_format = 'PNG'\n            elif output_extension.endswith(('.jpg', '.jpeg')):\n                save_format = 'JPEG'\n            elif output_extension.endswith('.webp'):\n                save_format = 'WEBP'\n            else:\n                save_format = 'JPEG'\n\n            # 保存オプション\n            save_kwargs = {\n                'format': save_format,\n                'optimize': True\n            }\n\n            # 品質設定\n            if save_format in ['JPEG', 'WEBP']:\n                save_kwargs['quality'] = 95\n            elif save_format == 'PNG':\n                save_kwargs['compress_level'] = 1\n\n            # EXIFデータがある場合は保持\n            if exif and save_format in ['JPEG', 'WEBP']:\n                save_kwargs['exif'] = exif\n\n            # ICCプロファイルがある場合は保持\n            if icc_profile:\n                save_kwargs['icc_profile'] = icc_profile\n\n            # DPI情報がある場合は保持\n            if 'dpi' in info:\n                save_kwargs['dpi'] = info['dpi']\n\n            # 保存\n            processed_image.save(str(output_path), **save_kwargs)\n            print(f\"Saved with metadata preservation: {output_path}\")\n\n    except Exception as e:\n        print(f\"Warning: Could not preserve metadata: {e}\")\n        # メタデータ保持に失敗した場合は通常の保存を行う\n        if str(output_path).lower().endswith('.png'):\n            processed_image.save(str(output_path), format='PNG', compress_level=1)\n        elif str(output_path).lower().endswith(('.jpg', '.jpeg')):\n            processed_image.save(str(output_path), format='JPEG', quality=95, optimize=True)\n        elif str(output_path).lower().endswith('.webp'):\n            processed_image.save(str(output_path), format='WEBP', quality=95, optimize=True)\n        else:\n            processed_image.save(str(output_path), format='JPEG', quality=95, optimize=True)\n\n\nasync def process_image_async(\n    input_path: Path, output_path: Path, operation: str, parameters: Dict[str, float]\n):\n    \"\"\"画像処理を非同期で実行（PILのみ使用）\"\"\"\n    def process_sync():\n        # PILで画像を読み込み（カラープロファイル保持）\n        with Image.open(str(input_path)) as original_image:\n            # 画像をコピーして処理用にする\n            image = original_image.copy()\n\n            print(f\"Original image mode: {image.mode}\")\n            print(f\"Original image size: {image.size}\")\n\n            # 操作を適用\n            image = apply_pil_operation(image, operation, parameters)\n\n            print(f\"Processed image mode: {image.mode}\")\n            print(f\"Processed image size: {image.size}\")\n\n            # DPI処理の場合は特別な保存処理\n            if operation == \"dpi\":\n                dpi = int(parameters.get(\"dpi\", 72))\n                try:\n                    # 元画像からメタデータを取得\n                    exif = original_image.getexif()\n                    icc_profile = original_image.info.get('icc_profile')\n\n                    # 保存形式を決定\n                    output_extension = str(output_path).lower()\n                    if output_extension.endswith('.png'):\n                        save_format = 'PNG'\n                    elif output_extension.endswith(('.jpg', '.jpeg')):\n                        save_format = 'JPEG'\n                    elif output_extension.endswith('.webp'):\n                        save_format = 'WEBP'\n                    else:\n                        save_format = 'PNG'\n\n                    save_kwargs = {\n                        'format': save_format,\n                        'dpi': (dpi, dpi),\n                        'optimize': True\n                    }\n\n                    if save_format in ['JPEG', 'WEBP']:\n                        save_kwargs['quality'] = 95\n                    elif save_format == 'PNG':\n                        save_kwargs['compress_level'] = 1\n\n                    # EXIFデータがある場合は保持\n                    if exif and save_format in ['JPEG', 'WEBP']:\n                        save_kwargs['exif'] = exif\n\n                    # ICCプロファイルがある場合は保持\n                    if icc_profile:\n                        save_kwargs['icc_profile'] = icc_profile\n\n                    image.save(str(output_path), **save_kwargs)\n                    print(f\"Successfully saved with DPI {dpi}: {output_path}\")\n\n                except Exception as e:\n                    print(f\"Warning: Could not save with DPI metadata: {e}\")\n                    preserve_image_metadata_and_save(input_path, output_path, image)\n            else:\n                # 通常の保存（メタデータ保持）\n                preserve_image_metadata_and_save(input_path, output_path, image)\n\n    # CPU集約的な処理を別スレッドで実行\n    loop = asyncio.get_event_loop()\n    await loop.run_in_executor(None, process_sync)","embedding":[-0.063522279,0.068694957,-0.021580409,0.004836364,0.042344216,-0.037926048,-0.038869374,-0.018525254,0.013455534,0.093833171,0.11080832,0.056915037,0.067620851,-0.133079797,0.005302795,0.052521769,0.1062795,-0.036014333,0.012818446,0.039986931,0.029095916,-0.039476663,-0.081464052,-0.026297223,-0.00094147,-0.037603498,-0.015145947,-0.096531227,0.076240741,0.078031801,-0.154900283,-0.088012725,-0.046390839,-0.056754258,0.010146237,0.137902617,0.108479671,0.127660021,0.051853679,-0.077377394,-0.075453945,0.058841016,0.015797149,-0.025807824,0.062983043,-0.075970873,0.00543345,0.029831653,-0.020373309,-0.110833786,-0.000640068,0.043580543,-0.026161259,0.046267863,-0.020410227,-0.002242637,0.005275923,-0.000366603,0.096188597,0.055006225,-0.036942001,-0.023869799,-0.002007584,0.084155045,-0.022579925,0.045589391,0.002505462,-0.025588164,-0.029645341,-0.020410059,-0.019572403,0.077533603,0.085024469,0.03909114,-0.013486407,0.089519769,0.056745417,-0.020233888,0.019687893,-0.065044127,-0.106120303,0.022047475,-0.054073874,-0.002295274,-0.044959068,0.030876126,-0.013028239,-0.079612099,0.043140355,-0.062571682,0.032154527,0.03256496,-0.077760741,-0.105972677,0.064064384,0.025190527,0.054222107,-0.030402809,0.032879848,-0.041036554,-0.027363095,-0.001108752,-0.040778603,-0.030529357,-0.022275481,-0.074530907,0.103358895,0.002087978,0.111291349,-0.04402997,0.095965222,0.064572208,-0.131070852,-0.019312136,-0.043798283,0.016963173,0.028928883,-0.031454615,-0.003470018,-0.025092993,-0.039162923,-0.060046721,-0.10140761,0.147245646,-0.174579591,-0.01000474,-0.082835734,0.042254228,-0.0129664,0.001469118,-0.021520978,0.001855018,0.002283532,0.073839843,0.009185581,0.028500335,-0.003449034,0.002974262,-0.07177113,-0.030255308,-0.045644656,-0.011346686,0.054956485,0.013359663,0.137369812,0.137675688,0.082320049,-0.078007184,0.096077748,-0.064349808,0.012917484,0.038748197,0.027521657,-0.002860857,-0.123254962,0.046110574,-0.033167321,-0.10079474,-0.0698222,0.038068902,0.036060859,-0.054868504,-0.004703838,-0.032746863,0.037084132,0.035134427,-0.048919432,-0.052448895,0.027940344,0.020793302,-0.091256775,0.005800032,-0.132829159,0.04650481,-0.085570939,-0.03403018,0.084693648,0.107557744,-0.120125458,-0.034517605,0.003721747,-0.053993959,0.091011204,0.077914596,0.01377836,0.03323742,-0.014471174,-0.065997347,0.01972824,0.210827529,-0.006815159,-0.006707938,0.010691485,0.047781892,0.01474654,-0.088919841,0.164871737,0.015934024,0.013228575,0.042307556,0.085168891,-0.092270903,0.069901586,-0.014714935,0.016725086,0.080518059,0.033351135,-0.092204727,-0.055499759,-0.060625095,0.042426065,-0.017418742,0.087163918,-0.014741797,0.003242698,-0.040705599,0.119728073,-0.011128607,-0.06997665,0.076416947,-0.021057991,-0.06545306,-0.020852635,-0.002900491,0.003819673,-0.008563166,-0.021020865,0.019147204,-0.023474908,-0.072319552,-0.002733551,-0.029673383,-0.009157019,0.031464249,0.031908408,0.037971683,-0.053554226,-0.02651659,-0.023054244,0.001158644,-0.041043993,-0.044162862,-0.001914362,-0.13061443,0.025745222,0.168008253,0.011232032,-0.020462211,0.067941688,-0.142630666,0.00217817,-0.024188012,0.034420982,-0.02835598,-0.025683807,-0.019010935],"created_at":1754014500855,"nchars":5890},"5":{"title":"main","path":"勉強会資料/source/image-editor/main.md","embeddingModel":"copilot-plus-small","ctime":1754014057662,"mtime":1754014057662,"tags":[],"extension":"md","metadata":{"created":"2025/08/01 11:07:37","modified":"2025/08/01 11:07:37"},"id":"80f7a1dbcb9542d4724e15cc1ec5e830","content":"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) # CPU集約的な処理を別スレッドで実行\n    loop = asyncio.get_event_loop()\n    await loop.run_in_executor(None, process_sync)\n\n\n@app.get(\"/api/images/{filename}\")\nasync def get_image(filename: str):\n    \"\"\"処理済み画像を取得する\"\"\"\n    file_path = PROCESSED_DIR / filename\n    if not file_path.exists():\n        raise HTTPException(status_code=404, detail=\"Image not found\")\n\n    return FileResponse(path=file_path, media_type=\"image/png\", filename=filename)\n\n\n@app.get(\"/api/uploads/{filename}\")\nasync def get_uploaded_image(filename: str):\n    \"\"\"アップロード済み画像を取得する\"\"\"\n    file_path = UPLOAD_DIR / filename\n    if not file_path.exists():\n        raise HTTPException(status_code=404, detail=\"Image not found\")\n\n    return FileResponse(path=file_path, media_type=\"image/png\", filename=filename)\n\n\n@app.post(\"/api/download-batch\")\nasync def download_batch_images(filenames: List[str]):\n    \"\"\"複数の処理済み画像をZIPファイルでダウンロードする\"\"\"\n    if not filenames:\n        raise HTTPException(status_code=400, detail=\"No files specified\")\n\n    # ZIPファイルをメモリに作成\n    zip_buffer = io.BytesIO()\n\n    with zipfile.ZipFile(zip_buffer, \"w\", zipfile.ZIP_DEFLATED) as zip_file:\n        for filename in filenames:\n            file_path = PROCESSED_DIR / filename\n            if file_path.exists():\n                zip_file.write(file_path, filename)\n\n    zip_buffer.seek(0)\n\n    return StreamingResponse(\n        io.BytesIO(zip_buffer.read()),\n        media_type=\"application/zip\",\n        headers={\"Content-Disposition\": \"attachment; filename=processed_images.zip\"},\n    )\n\n\n@app.delete(\"/api/clear-files\")\nasync def clear_files():\n    \"\"\"アップロードファイルと処理済みファイルをクリアする\"\"\"\n    try:\n        upload_files = list(UPLOAD_DIR.glob(\"*\"))\n        processed_files = list(PROCESSED_DIR.glob(\"*\"))\n\n        # アップロードファイルを削除\n        for file_path in upload_files:\n            if file_path.is_file():\n                file_path.unlink()\n\n        # 処理済みファイルを削除\n        for file_path in processed_files:\n            if file_path.is_file():\n                file_path.unlink()\n\n        return {\n            \"message\": \"Files cleared successfully\",\n            \"deleted_uploads\": len(upload_files),\n            \"deleted_processed\": len(processed_files),\n            \"total_deleted\": len(upload_files) + len(processed_files),\n        }\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to clear files: {str(e)}\")\n\n\n@app.delete(\"/api/clear-old-files\")\nasync def clear_old_files(hours: int = 24):\n    \"\"\"指定時間以上古いファイルを削除する\"\"\"\n    try:\n        import time\n\n        current_time = time.time()\n        cutoff_time = current_time - (hours * 3600)  # 指定時間前\n\n        upload_files = list(UPLOAD_DIR.glob(\"*\"))\n        processed_files = list(PROCESSED_DIR.glob(\"*\"))\n\n        deleted_uploads = 0\n        deleted_processed = 0\n\n        # 古いアップロードファイルを削除\n        for file_path in upload_files:\n            if file_path.is_file() and file_path.stat().st_mtime < cutoff_time:\n                file_path.unlink()\n                deleted_uploads += 1\n\n        # 古い処理済みファイルを削除\n        for file_path in processed_files:\n            if file_path.is_file() and file_path.stat().st_mtime < cutoff_time:\n                file_path.unlink()\n                deleted_processed += 1\n\n        return {\n            \"message\": f\"Old files (older than {hours} hours) cleared successfully\",\n            \"deleted_uploads\": deleted_uploads,\n            \"deleted_processed\": deleted_processed,\n            \"total_deleted\": deleted_uploads + deleted_processed,\n        }\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to clear old files: {str(e)}\"\n        )\n\n\n@app.get(\"/api/storage-info\")\nasync def get_storage_info():\n    \"\"\"ストレージ使用量情報を取得する\"\"\"\n    try:\n        import os\n\n        def get_directory_size(path):\n            total_size = 0\n            file_count = 0\n            if path.exists():\n                for file_path in path.glob(\"*\"):\n                    if file_path.is_file():\n                        total_size += file_path.stat().st_size\n                        file_count += 1\n            return total_size, file_count\n\n        upload_size, upload_count = get_directory_size(UPLOAD_DIR)\n        processed_size, processed_count = get_directory_size(PROCESSED_DIR)\n\n        def format_size(size_bytes):\n            if size_bytes == 0:\n                return \"0 B\"\n            size_names = [\"B\", \"KB\", \"MB\", \"GB\"]\n            i = 0\n            while size_bytes >= 1024 and i < len(size_names) - 1:\n                size_bytes /= 1024\n                i += 1\n            return f\"{size_bytes:.1f} {size_names[i]}\"\n\n        return {\n            \"uploads\": {\n                \"size\": upload_size,\n                \"size_formatted\": format_size(upload_size),\n                \"file_count\": upload_count,\n            },\n            \"processed\": {\n                \"size\": processed_size,\n                \"size_formatted\": format_size(processed_size),\n                \"file_count\": processed_count,\n            },\n            \"total\": {\n                \"size\": upload_size + processed_size,\n                \"size_formatted\": format_size(upload_size + processed_size),\n                \"file_count\": upload_count + processed_count,\n            },\n        }\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to get storage info: {str(e)}\"\n        )\n\n\n@app.get(\"/health\")\nasync def health_check():\n    \"\"\"ヘルスチェック\"\"\"\n    from datetime import datetime\n\n    return {\n        \"status\": \"healthy\",\n        \"timestamp\": datetime.now().isoformat(),\n        \"version\": \"1.0.0\",\n        \"api_name\": \"Image Editor API\",\n    }\n\n\n# SVG処理用のクラス\nclass SVGGenerateRequest(BaseModel):\n    prefecture: str\n    color: str = \"#ff6277\"\n\n\nclass SVGResponse(BaseModel):\n    svg_content: str\n    filename: str","embedding":[-0.010765958,0.026315177,-0.027664078,0.025909793,0.003352843,-0.08809673,-0.024647318,-0.026999457,0.056881674,0.115548939,0.08957383,0.08765135,0.069581583,-0.18002376,0.009046079,0.043642707,0.016462572,-0.022010142,0.008492669,0.026441727,0.021021444,-0.107704364,-0.087053128,-0.066845022,0.067271657,-0.030260853,-0.041452549,-0.109687433,-0.020710805,0.055586107,-0.121060252,-0.109508388,-0.051593151,-0.046127573,0.002951043,0.12182042,0.128512323,0.060969643,0.070929162,-0.121726513,-0.086810492,0.039931815,0.010721075,0.002470718,0.049122434,-0.020245682,-0.058264941,-0.03498856,-0.041795574,-0.069161311,-0.06649252,0.009573836,-0.028714422,0.079997391,-0.058461528,0.079242274,-0.012121417,0.037877768,0.075927265,0.052092034,-0.02158783,0.011405752,-0.046417821,0.070962951,-0.019251861,0.040404417,-0.018520739,0.018107168,0.037307646,-0.024447523,-0.051538803,-0.047983576,0.042485069,0.010767273,0.008888538,0.072561845,0.03822891,0.005037484,-0.00909345,-0.093812995,-0.089288488,0.027215691,0.008832632,-0.043685637,-0.05644764,-0.073418878,0.070372604,-0.016669754,0.063357316,-0.081188008,0.01344147,0.039867386,-0.013388203,-0.116899431,0.000908481,0.023646893,0.052055448,-0.037993222,0.06646017,-0.028948892,0.041597966,0.086147614,-0.123285376,0.015947791,-0.004767018,-0.084279165,0.074054167,0.018995754,0.116832122,0.02730694,0.13168782,0.060688291,-0.118732907,-0.062507756,0.007911648,0.042955134,0.04674381,-0.002452172,0.009328447,-0.033344343,-0.047823217,0.036335196,-0.070654839,0.11012084,-0.137052342,-0.007971647,-0.058758926,0.056430742,0.059843317,0.005379347,0.010979866,-0.030404188,0.016323132,0.078218684,-0.012408741,0.045133151,0.078580797,0.000408169,0.046751898,-0.086246118,0.016766589,0.069527522,0.039895836,0.009768145,0.114602335,0.057296772,0.070134267,-0.010829204,0.067730889,-0.037780978,-0.029744806,0.006519038,-0.004176709,-0.04080797,-0.097631015,0.000736191,-0.022925531,-0.108738758,-0.059708014,0.050232098,-0.001298683,0.024694873,0.018741647,-0.086215556,0.015759492,0.002817166,-0.055122375,-0.046036817,0.001861543,0.020903639,-0.051385339,-0.068537295,-0.074933194,0.034763638,-0.096431963,-0.05317894,0.141197041,0.087729052,-0.043492652,-0.014385079,0.01198336,-0.063615009,0.105453782,0.165998459,0.058956321,0.032849681,-0.093970008,-0.065471657,-0.051613223,0.219110116,0.011816799,0.010364871,-0.053186409,0.025895899,0.039016373,-0.067049071,0.129030764,-0.006971783,-0.086523756,-0.000759175,0.106194034,-0.099947371,0.048212782,0.022223648,0.063769005,0.03698479,0.080223024,-0.044853356,0.010396576,-0.05412202,0.049648866,0.001485192,0.117420264,-0.033342738,0.021701839,-0.09929011,0.018437002,-0.03317555,-0.036974195,0.087004967,-0.012574553,-0.081987336,-0.029757168,0.042974375,-0.049897622,-0.029656589,0.00521543,-0.018474631,0.006605635,-0.035086397,0.012494835,-0.057537459,-0.000203819,0.033134483,-0.030734409,0.020025657,-0.021901144,-0.025691917,-0.071721822,0.067876346,-0.073137544,0.029037064,-0.035772379,-0.090012088,0.001106723,0.176731482,0.055533409,-0.012846513,0.106246926,-0.056365266,0.024209473,-0.000397136,0.037789807,-0.035831094,-0.035633758,0.023493445],"created_at":1754014500857,"nchars":5930},"6":{"title":"main","path":"勉強会資料/source/image-editor/main.md","embeddingModel":"copilot-plus-small","ctime":1754014057662,"mtime":1754014057662,"tags":[],"extension":"md","metadata":{"created":"2025/08/01 11:07:37","modified":"2025/08/01 11:07:37"},"id":"e23a8f2b97eb4b4ce2c21dbf16b77f2c","content":"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) # SVG処理用のクラス\nclass SVGGenerateRequest(BaseModel):\n    prefecture: str\n    color: str = \"#ff6277\"\n\n\nclass SVGResponse(BaseModel):\n    svg_content: str\n    filename: str\n\n\n# 都道府県リスト（SVGのid属性と対応）\nPREFECTURES = [\n    \"北海道\",\n    \"青森\",\n    \"岩手\",\n    \"宮城\",\n    \"秋田\",\n    \"山形\",\n    \"福島\",\n    \"茨城\",\n    \"栃木\",\n    \"群馬\",\n    \"埼玉\",\n    \"千葉\",\n    \"東京\",\n    \"神奈川\",\n    \"新潟\",\n    \"富山\",\n    \"石川\",\n    \"福井\",\n    \"山梨\",\n    \"長野\",\n    \"岐阜\",\n    \"静岡\",\n    \"愛知\",\n    \"三重\",\n    \"滋賀\",\n    \"京都\",\n    \"大阪\",\n    \"兵庫\",\n    \"奈良\",\n    \"和歌山\",\n    \"鳥取\",\n    \"島根\",\n    \"岡山\",\n    \"広島\",\n    \"山口\",\n    \"徳島\",\n    \"香川\",\n    \"愛媛\",\n    \"高知\",\n    \"福岡\",\n    \"佐賀\",\n    \"長崎\",\n    \"熊本\",\n    \"大分\",\n    \"宮崎\",\n    \"鹿児島\",\n    \"沖縄\",\n]\n\n\n@app.get(\"/api/prefectures\")\nasync def get_prefectures():\n    \"\"\"都道府県リストを取得する\"\"\"\n    return {\"prefectures\": PREFECTURES}\n\n\n@app.post(\"/api/generate-svg\", response_model=SVGResponse)\nasync def generate_svg(request: SVGGenerateRequest):\n    \"\"\"選択された都道府県をハイライトしたSVGを生成する\"\"\"\n    try:\n        svg_path = Path(\"assets/map.svg\")\n\n        if not svg_path.exists():\n            raise HTTPException(status_code=404, detail=\"SVG template not found\")\n\n        # SVGファイルを読み込み\n        with open(svg_path, \"r\", encoding=\"utf-8\") as f:\n            svg_content = f.read()\n\n        # まず、すべての都道府県の色を白色にリセット\n        for prefecture in PREFECTURES:\n            # 特別処理：SVG内のid属性と都道府県名のマッピング\n            if prefecture == \"徳島\":\n                reset_ids = [\"徳島\"]\n            elif prefecture == \"香川\":\n                reset_ids = [\"徳島-2\"]\n            else:\n                reset_ids = [prefecture]\n\n            for prefecture_id in reset_ids:\n                # 既存の色を白色にリセット\n                pattern1 = f'id=\"{prefecture_id}\"([^>]*?)fill=[\"\\'](#[^\"\\']*)[\"\\']'\n                if re.search(pattern1, svg_content):\n                    replacement1 = f'id=\"{prefecture_id}\"\\\\1fill=\"#fff\"'\n                    svg_content = re.sub(pattern1, replacement1, svg_content)\n\n        # 選択された都道府県の色を変更\n        if request.prefecture in PREFECTURES:\n            # 特別処理：SVG内のid属性と都道府県名のマッピング\n            if request.prefecture == \"徳島\":\n                prefecture_ids = [\"徳島\"]\n            elif request.prefecture == \"香川\":\n                # SVGファイル内では香川県がid=\"徳島-2\"で表現されている\n                prefecture_ids = [\"徳島-2\"]\n            else:\n                prefecture_ids = [request.prefecture]\n\n            for prefecture_id in prefecture_ids:\n                # より堅牢なSVG色変更処理\n                # ケース1: 既存のfill属性がある場合（fill=\"#色\" または fill='#色'）\n                pattern1 = f'id=\"{prefecture_id}\"([^>]*?)fill=[\"\\'](#[^\"\\']*)[\"\\']'\n                if re.search(pattern1, svg_content):\n                    replacement1 = f'id=\"{prefecture_id}\"\\\\1fill=\"{request.color}\"'\n                    svg_content = re.sub(pattern1, replacement1, svg_content)\n                    print(\n                        f\"Pattern 1 matched for {prefecture_id}: Updated existing fill attribute\"\n                    )\n                    continue\n\n                # ケース2: style属性内にfillがある場合\n                pattern2 = (\n                    f'id=\"{prefecture_id}\"([^>]*?)style=\"([^\"]*?)fill:[^;\"]*([^\"]*)\"'\n                )\n                if re.search(pattern2, svg_content):\n                    replacement2 = (\n                        f'id=\"{prefecture_id}\"\\\\1style=\"\\\\2fill:{request.color}\\\\3\"'\n                    )\n                    svg_content = re.sub(pattern2, replacement2, svg_content)\n                    print(\n                        f\"Pattern 2 matched for {prefecture_id}: Updated fill in style attribute\"\n                    )\n                    continue\n\n                # ケース3: fill属性がない場合は追加\n                pattern3 = f'id=\"{prefecture_id}\"([^>]*?)(?=[ >])'\n                if re.search(pattern3, svg_content):\n                    replacement3 = f'id=\"{prefecture_id}\"\\\\1 fill=\"{request.color}\"'\n                    svg_content = re.sub(pattern3, replacement3, svg_content)\n                    print(\n                        f\"Pattern 3 matched for {prefecture_id}: Added new fill attribute\"\n                    )\n                else:\n                    print(f\"Warning: No pattern matched for {prefecture_id}\")\n\n        # ファイル名を生成\n        filename = f\"japan_map_{request.prefecture}_{uuid.uuid4().hex[:8]}.svg\"\n        output_path = PROCESSED_DIR / filename\n\n        # SVGファイルを保存\n        with open(output_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(svg_content)\n\n        print(f\"SVG generated successfully: {filename}\")\n        return SVGResponse(svg_content=svg_content, filename=filename)\n\n    except Exception as e:\n        print(f\"SVG generation error: {str(e)}\")\n        raise HTTPException(status_code=500, detail=f\"SVG generation failed: {str(e)}\")\n\n\n@app.get(\"/api/svg/{filename}\")\nasync def get_svg(filename: str):\n    \"\"\"生成されたSVGファイルを取得する\"\"\"\n    file_path = PROCESSED_DIR / filename\n    if not file_path.exists():\n        raise HTTPException(status_code=404, detail=\"SVG file not found\")\n\n    return FileResponse(path=file_path, media_type=\"image/svg+xml\", filename=filename)\n\n\nclass FileInfo(BaseModel):\n    filename: str\n    size: int\n    size_formatted: str\n    created_at: str\n    file_type: str\n\n\nclass FileListResponse(BaseModel):\n    uploads: List[FileInfo]\n    processed: List[FileInfo]\n    total_count: int\n\n\n@app.get(\"/api/files/list\", response_model=FileListResponse)\nasync def get_file_list():\n    \"\"\"ファイル一覧を取得する\"\"\"\n    try:\n        import os\n        from datetime import datetime\n\n        def format_size(size_bytes):\n            if size_bytes == 0:\n                return \"0 B\"\n            size_names = [\"B\", \"KB\", \"MB\", \"GB\"]\n            i = 0\n            while size_bytes >= 1024 and i < len(size_names) - 1:\n                size_bytes /= 1024\n                i += 1\n            return f\"{size_bytes:.1f} {size_names[i]}\"","embedding":[0.019075371,0.048011992,-0.045238152,0.009219807,0.08120504,-0.045694284,0.023884876,-0.010889282,0.048582077,0.09553346,0.096339643,0.134295255,0.020462256,-0.17262876,0.035611149,0.001404214,0.011660679,-0.002429858,-0.008620455,0.022183923,0.033860326,-0.117011733,-0.05811023,-0.037163243,0.019182956,-0.025380574,-0.024375735,-0.041063666,-0.013599885,0.094568394,-0.142038286,-0.141271725,-0.053780697,-0.049713269,0.013610804,0.081807517,0.124031134,0.064295188,0.072573632,-0.055835374,-0.109804302,0.07103534,0.026681863,0.060688715,0.027410118,-0.056578569,-0.007084769,0.042781238,-0.019400883,-0.070349589,-0.00959389,0.010332081,-0.003587693,0.068466462,0.017056718,0.05795379,-0.018487617,0.044714302,0.064422272,0.067405395,-0.065012038,-0.007403587,0.000371487,0.136234239,-0.03618747,0.04071581,-0.075613283,0.042457651,0.048505213,-0.047346499,-0.07102491,0.030081252,0.055179607,0.007525091,0.017931975,0.102229558,0.095791496,-0.017066836,-0.057120942,-0.087016292,-0.117612831,0.027093155,-0.027744556,-0.064487748,-0.028366409,-0.02850912,0.093560278,-0.022314129,0.054691333,-0.030038834,-0.003331841,0.021402013,-0.008866296,-0.141278476,-0.023389934,0.025940556,0.007678604,-0.019724777,-0.019437853,-0.015527735,0.054591145,0.020451911,-0.087959237,0.042896856,-0.007205393,-0.06515532,0.042438749,0.067369729,0.11915645,0.017598113,0.098808855,0.012445916,-0.114470214,-0.062457219,-0.04452337,0.044002399,0.033972602,-0.003859591,-0.071218356,0.000623059,-0.029319363,0.017617578,-0.080047749,0.070109174,-0.136191383,-0.023159128,-0.083615065,0.081548005,0.009263844,0.110964671,-0.042531878,-0.013367902,0.044831369,0.0611175,-0.003248452,0.036057003,0.069948703,-0.050703101,0.061023422,-0.02723592,-0.029950036,0.060035154,0.117227495,0.034740895,0.177078262,0.096452728,0.074675195,0.001118079,0.059372682,-0.053149551,-0.050492711,-0.035244692,0.03061034,-0.037836403,-0.066223487,-0.011725394,0.053230982,-0.109406345,-0.004572153,0.064428188,0.059781894,0.007018623,0.005882442,-0.054473519,-0.015954673,-0.028320068,0.018337734,-0.067362048,0.005699689,0.018944966,-0.008803406,-0.035481006,-0.071643323,0.085290059,-0.084329337,-0.054445948,0.147501469,0.052058339,-0.091114983,-0.018382721,-0.009158738,-0.09117458,0.111156657,0.132759154,-0.003420831,-0.014109666,-0.064154439,-0.030194772,-0.001134863,0.192803144,0.076944076,0.021728067,0.014437148,0.017637212,-0.00017962,-0.015476872,0.153849483,0.046044447,-0.110634357,-0.036650036,0.133652568,-0.097622171,0.03951415,-0.024988547,0.039669942,0.038004007,0.054425847,-0.056660712,-0.041283991,-0.018240616,-0.020007018,-0.016397638,0.103307247,-0.01258825,-0.008131189,-0.092386045,0.072463602,0.024697628,-0.058730114,0.08036045,0.001124961,-0.015510349,-0.088282347,-0.007641078,-0.090285666,-0.019010851,0.035323575,-0.00057038,0.026139967,-0.026253464,0.001295207,-0.054536402,-0.034052104,-0.007145267,-0.008604033,0.018425362,-0.067093372,0.020986117,-0.040697519,-0.025060082,0.027651791,0.001040388,-0.026793769,-0.09474586,-0.037118472,0.152703062,0.051665574,-0.039616257,0.079595223,-0.068923615,0.037826307,-0.044187896,-0.01318594,0.004921282,-0.023313969,0.013428723],"created_at":1754014500860,"nchars":5917},"7":{"title":"main","path":"勉強会資料/source/image-editor/main.md","embeddingModel":"copilot-plus-small","ctime":1754014057662,"mtime":1754014057662,"tags":[],"extension":"md","metadata":{"created":"2025/08/01 11:07:37","modified":"2025/08/01 11:07:37"},"id":"e68c06e6749a791ef6819b56d7359187","content":"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) def get_file_info(file_path, file_type):\n            stat = file_path.stat()\n            return FileInfo(\n                filename=file_path.name,\n                size=stat.st_size,\n                size_formatted=format_size(stat.st_size),\n                created_at=datetime.fromtimestamp(stat.st_mtime).strftime(\n                    \"%Y-%m-%d %H:%M:%S\"\n                ),\n                file_type=file_type,\n            )\n\n        uploads = []\n        processed = []\n\n        # アップロード済みファイルを取得\n        for file_path in UPLOAD_DIR.glob(\"*\"):\n            if file_path.is_file():\n                uploads.append(get_file_info(file_path, \"upload\"))\n\n        # 処理済みファイルを取得\n        for file_path in PROCESSED_DIR.glob(\"*\"):\n            if file_path.is_file():\n                processed.append(get_file_info(file_path, \"processed\"))\n\n        # 作成日時順でソート（新しいものから）\n        uploads.sort(key=lambda x: x.created_at, reverse=True)\n        processed.sort(key=lambda x: x.created_at, reverse=True)\n\n        return FileListResponse(\n            uploads=uploads,\n            processed=processed,\n            total_count=len(uploads) + len(processed),\n        )\n\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to get file list: {str(e)}\"\n        )\n\n\n@app.delete(\"/api/files/{filename}\")\nasync def delete_file(filename: str):\n    \"\"\"個別ファイルを削除する\"\"\"\n    try:\n        upload_path = UPLOAD_DIR / filename\n        processed_path = PROCESSED_DIR / filename\n\n        deleted = False\n        file_type = None\n\n        if upload_path.exists():\n            upload_path.unlink()\n            deleted = True\n            file_type = \"upload\"\n        elif processed_path.exists():\n            processed_path.unlink()\n            deleted = True\n            file_type = \"processed\"\n\n        if not deleted:\n            raise HTTPException(status_code=404, detail=\"File not found\")\n\n        return {\n            \"message\": \"File deleted successfully\",\n            \"filename\": filename,\n            \"file_type\": file_type,\n        }\n\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to delete file: {str(e)}\")\n\n\n# 文字・画像置換用のリクエストモデル\nclass TextReplaceRequest(BaseModel):\n    text_replacements: Dict[str, str]\n    image_replacements: Dict[str, str]  # image_id -> uploaded_image_url\n    config: Optional[Dict] = None\n\n\n@app.post(\"/api/replace-text-images\")\nasync def replace_text_images(request: TextReplaceRequest):\n    \"\"\"テンプレート画像の文字と画像を置換する - 新しいテンプレートベースアプローチ\"\"\"\n    try:\n        # 置換用画像を読み込み\n        image_replacements = {}\n        for image_id, image_url in request.image_replacements.items():\n            image_filename = image_url.split(\"/\")[-1]\n            image_path = UPLOAD_DIR / image_filename\n\n            if image_path.exists():\n                with Image.open(image_path) as replacement_image:\n                    image_replacements[image_id] = replacement_image.copy()\n\n        # 新しいテンプレートベース合成処理\n        replacer = TextImageReplacer()\n        result_image = replacer.create_composite_image(\n            request.text_replacements,\n            image_replacements\n        )\n\n        # 結果を保存（JPG形式）\n        output_filename = f\"text_replaced_{uuid.uuid4().hex[:8]}.jpg\"\n        output_path = PROCESSED_DIR / output_filename\n        replacer.save_as_jpg(result_image, str(output_path))\n\n        return {\n            \"message\": \"Text and images replaced successfully using template-based approach\",\n            \"processed_url\": f\"/processed/{output_filename}\",\n            \"filename\": output_filename\n        }\n\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Text replacement failed: {str(e)}\")\n\n\n@app.post(\"/api/create-tourism-layout\")\nasync def create_tourism_layout(\n    title: str,\n    locations: List[str],\n    image_urls: List[str]\n):\n    \"\"\"観光パンフレット風のレイアウトを作成する\"\"\"\n    try:\n        # アップロードされた画像を読み込み\n        images = []\n        for image_url in image_urls:\n            image_filename = image_url.split(\"/\")[-1]\n            image_path = UPLOAD_DIR / image_filename\n\n            if image_path.exists():\n                with Image.open(image_path) as img:\n                    images.append(img.copy())\n\n        if not images:\n            raise HTTPException(status_code=400, detail=\"No valid images found\")\n\n        # パンフレットレイアウトを作成\n        replacer = TextImageReplacer()\n        layout_image = replacer.create_tourism_layout(title, locations, images)\n\n        # 結果を保存（JPG形式）\n        output_filename = f\"tourism_layout_{uuid.uuid4().hex[:8]}.jpg\"\n        output_path = PROCESSED_DIR / output_filename\n        replacer.save_as_jpg(layout_image, str(output_path))\n\n        return {\n            \"message\": \"Tourism layout created successfully\",\n            \"processed_url\": f\"/processed/{output_filename}\",\n            \"filename\": output_filename\n        }\n\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Layout creation failed: {str(e)}\")\n\n\n@app.get(\"/api/template-config\")\nasync def get_template_config():\n    \"\"\"テンプレート設定を取得する\"\"\"\n    return create_template_config()\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000, reload=True)\n\n```","embedding":[-0.011618695,0.023944095,-0.049693253,-0.006282816,0.043524697,-0.067595124,-0.030613326,-0.025416838,0.052454341,0.120711945,0.06652236,0.05848584,-0.01706038,-0.136924535,0.042849254,0.039347574,0.005160071,-0.046070617,-0.033280026,0.012643736,0.034074605,-0.048297867,-0.102800176,-0.034917366,0.020806599,0.020057857,-0.087633841,-0.095563047,0.021594513,0.052161831,-0.095365927,-0.096649505,-0.068443686,-0.015988043,-0.007055482,0.068729892,0.093267791,0.057593524,0.105186947,-0.138490736,-0.075924613,0.087280788,-0.001334006,0.004282587,0.047784802,-0.03472897,-0.052627556,-0.00762875,-0.010965968,-0.084878452,-0.107507758,0.044096824,-0.04507317,0.089670576,-0.019284973,0.011895578,0.003163963,0.0503674,0.063840225,0.023764795,-0.040985163,0.008803713,-0.021520387,0.083774976,-0.036595091,0.049844228,-0.023837967,0.01857703,0.047239255,-0.024219196,-0.046924606,-0.061183836,0.017694181,-0.036160216,0.003757266,0.053897802,0.058937967,-0.011937328,-0.029227724,-0.082695566,-0.069059767,0.008848336,0.001067354,-0.050824419,-0.020576863,-0.043897111,0.062808208,-0.014236527,0.0542676,-0.040966578,0.017308969,0.04942552,-0.033674024,-0.068478845,-0.009963499,0.077256665,0.005855081,-0.027136851,0.004168426,-0.047389895,0.050700787,0.110496804,-0.085979059,0.017647982,-0.009479883,-0.053456698,0.064939253,0.030975282,0.086712025,0.051101226,0.099579982,0.089866914,-0.177148581,-0.083847225,-0.026969478,0.015874749,0.056313492,-0.004887534,0.012571714,-0.010175709,-0.048102558,0.022085192,-0.036964428,0.069652565,-0.221121788,0.012122329,-0.076798476,0.079407215,0.053395145,0.047929838,0.004890115,-0.052089583,0.037394464,0.09751647,0.044557694,0.041829385,0.012556422,0.014210416,0.033685066,-0.073401026,-0.023604104,0.08366444,0.043787736,-0.001468111,0.142454803,0.060032226,0.111348212,-0.000965191,0.080994099,-0.025223987,-0.058682054,0.014704776,0.05420265,-0.038097095,-0.084610641,0.036635574,-0.022955423,-0.092946872,-0.063147381,0.087630183,0.030050887,-0.019130841,-0.014788952,-0.058024205,0.012064057,-0.011153654,-0.012036624,-0.080493145,-0.053150307,0.011665569,-0.019160112,-0.067352168,-0.02489002,0.132314876,-0.10173247,-0.082807384,0.133933842,0.086232476,-0.029126341,-0.049362104,0.043557078,-0.054327063,0.116368182,0.16461271,0.05061876,0.049332794,-0.050130893,-0.016963754,-0.009796088,0.230567619,0.037003718,0.023977023,-0.059325203,0.02764778,0.011291517,-0.027002204,0.132372558,0.004933506,-0.08370842,-0.040180687,0.153590322,-0.11826393,0.059725277,0.001584791,0.073468871,0.015002073,0.059303865,-0.05645442,0.010024313,-0.028498678,0.068188816,0.005077218,0.085456669,-0.005642926,0.078952037,-0.071300425,0.081051886,-0.010388696,-0.061724078,0.021867303,-0.004622147,-0.037711166,-0.057405069,-0.011672101,-0.043801617,-0.00196874,0.049233731,-0.032682545,-0.001305516,-0.079708099,-0.030541319,-0.072408997,0.018919209,0.036719125,-0.024743155,0.056384496,-0.078438982,0.011535762,-0.079954505,0.03859533,-0.025598651,-0.004212062,-0.007749912,-0.088224292,-0.005558701,0.137788102,0.076949112,-0.02535456,0.109450974,-0.003059525,0.035727028,-0.00776319,0.039816424,-0.000828755,-0.046177648,0.02760707],"created_at":1754014500863,"nchars":5349},"8":{"title":"PythonのPillowで画像処理をサクッと作った話","path":"勉強会資料/PythonのPillowで画像処理をサクッと作った話.md","embeddingModel":"copilot-plus-small","ctime":1754014057625,"mtime":1754014057625,"tags":[],"extension":"md","metadata":{"created":"2025/08/01 11:07:37","modified":"2025/08/01 11:07:37"},"id":"1e58243d8b3345b7f61176cbddfbc364","content":"\n\nNOTE TITLE: [[PythonのPillowで画像処理をサクッと作った話]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\nPythonで画像処理を行うための強力なライブラリ、Pillow（PILの後継）を紹介します。\n\n*   **主な機能:**\n    *   画像のアップロード\n    *   画像加工（リサイズ、回転、ぼかし、グレースケール、セピア、オーバーレイなど）\n    *   加工済み画像のダウンロード\n\n\n![[画面録画 2025-08-01 031105.mp4]]\n### ライブラリ選定のポイント\n\n#### OpenCV：高機能だが色の扱いに注意\n\n*   **特徴:**\n    *   画像処理、画像解析、機械学習など、多岐にわたる機能を提供\n    *   リアルタイム処理に強く、組み込みシステムやロボティクス分野で広く利用\n*   **注意点:**\n    *   **色の変化:**\n        *   画像処理の過程で、明度や彩度が変化しやすい\n        *   原因：\n            1.  デフォルトの色空間がBGRであること（一般的なRGBと異なる）\n            2.  データ型の範囲を超えた演算による色のクリップ\n            3.  コーデックによる色の劣化\n    *   **対策:**\n        *   `cv2.cvtColor()`で色空間を変換\n        *   データ型を適切に管理\n        *   可逆圧縮形式（PNGなど）を使用\n*   **→ 対策が必要で、手間がかかる場合がある**\n\n#### Pillow（PIL）：シンプルで扱いやすい\n\n*   **特徴:**\n    *   画像処理に特化しており、シンプルで直感的なAPIを提供\n    *   様々な画像形式をサポートし、基本的な画像編集、加工、変換が容易\n*   **メリット:**\n    *   **色の変化が少ない:**\n        *   デフォルトの色空間がRGBであるため、OpenCVのような色空間変換の手間が少ない\n        *   色の管理が比較的容易で、意図しない色の変化が起こりにくい\n    *   **扱いやすさ:**\n        *   APIが直感的で、初心者でも扱いやすい\n        *   Webアプリケーションとの連携が容易\n*   **→ 色の管理が容易で、Web用途にも適している**\n\n### OpenCVで起こったまさかの挙動\n\n**印刷・出版関係**で作られた画像だと色が変化する\n\nICCプロファイル =「この画像の色はこう表示してね」という設定ファイル\nその中でもJapan Color（日本の印刷業界標準）で設定されてると\nOpenCVではプロファイルの情報をうまく拾えていないのか、以下のようになる。\n\n| before                                          | after                                                   |\n| ----------------------------------------------- | ------------------------------------------------------- |\n| ![[IMG_20250607_192630989_NV_with_profile.jpg]] | ![[processed_a370d39c-dc67-474c-b6b7-d183b6d23194.png]] |\n\nしかし、画像（写真）によっては影響がほぼない\n\n| before                          | after                                                   |\n| ------------------------------- | ------------------------------------------------------- |\n| ![[transcend_with_profile.jpg]] | ![[processed_587f4226-142a-430a-8dfc-9936203af133.png]] |\n\n実写の場合、色の量が多くグラデーションが微調整の幅が多くその分情報量多く繊細。\nアニメ・イラスト画の場合は原色が多く高彩度でグラデーションが少ないので、ICCプロファイルのありなしの変化がさほど多くない模様...\n\nしかしPillowでは起きなかった。（なんで？）\n\n### Pillowライブラリの基本\n\n*   **Pillowとは:**\n    *   Python Imaging Library (PIL) の後継として開発された、画像処理ライブラリ。\n    *   様々な画像形式をサポートし、画像編集、加工、変換など、豊富な機能を提供。\n*   **主な機能:**\n    *   画像の読み込みと保存\n    *   画像のリサイズ、回転、切り抜き\n    *   色調補正、フィルタ処理\n    *   図形描画、テキスト描画\n    *   画像形式の変換\n\n### コード解説：画像処理APIの主要部分\n\n1.  **画像の読み込み:**\n\n    ```python\n    # 画像ファイルを読み込む\n    image = Image.open(\"image.jpg\")\n    ```\n2.  **画像のリサイズ:**\n\n    ```python\n    # 画像サイズを変更する\n    resized_image = image.resize((800, 600))  # 幅800px、高さ600pxにリサイズ\n    ```\n3.  **画像の回転:**\n\n    ```python\n    # 画像を回転する\n    rotated_image = image.rotate(45)  # 45度回転\n    ```\n4.  **フィルタ処理:**\n\n    ```python\n    # 画像にぼかしフィルタを適用する\n    blurred_image = image.filter(ImageFilter.GaussianBlur(radius=5))\n    ```\n5.  **画像の色調変換:**\n\n    ```python\n    # グレースケールに変換\n    grayscale_image = image.convert('L')\n    ```\n6.  **画像の保存:**\n\n    ```python\n    # 処理後の画像を保存する\n    resized_image.save(\"resized_image.jpg\")\n    ```\n\n### まとめ\n\nPyhonでの画像処理というか、画像って奥深い。","embedding":[0.001426532,0.124401651,-0.100212656,0.01404817,0.026353916,-0.024016598,-0.002062394,-0.027058296,0.079950221,0.122709654,0.128351375,0.043437447,-0.009573594,-0.121077023,0.003112746,0.082852669,0.090233855,-0.058489565,0.011722448,0.058096562,0.019054143,-0.007011984,-0.0586612,-0.010695554,0.0048609,-0.068706244,-0.003944006,-0.081975862,0.048009094,0.042852975,-0.13503392,-0.108359702,-0.053804684,-0.014962602,-0.011276834,0.135405824,0.157640889,0.109679088,0.129353508,-0.108883142,-0.045832068,0.131478593,0.05098559,-0.050156519,0.073992811,-0.094247803,-0.038352396,0.028143877,-0.035843737,-0.101123728,-0.047064811,0.014749349,-0.048246086,0.039631683,-0.02534678,0.04832866,0.027207302,0.003574187,0.097784303,0.052563272,-0.053518012,-0.032437872,-0.029101219,0.087643079,-0.009689448,0.067961171,0.006144968,-0.019539604,-0.008413006,-0.043081176,-0.020585297,0.086755328,0.052379459,0.030429671,0.043910041,0.117605984,0.091157652,0.038296122,-0.008676036,-0.019150158,-0.093265839,0.025482407,-0.048907738,-0.028521394,-0.017691631,0.004899142,-0.063125595,-0.074456774,0.057939079,-0.017173721,0.035099424,0.017947668,-0.043240979,-0.057733756,0.06686791,0.067640901,0.033300862,-0.024452928,0.027362892,-0.035992526,-0.022897251,0.00047403,-0.022662262,-0.04369862,0.00996301,-0.081251867,0.045544416,-0.007345832,0.109522082,-0.005206285,0.118579887,0.04390749,-0.109740011,-0.00091807,-0.041949704,-0.02706236,-0.000047068,0.012102557,-0.05303961,-0.043767165,0.002823189,-0.075687133,-0.086799391,0.052714586,-0.188889205,-0.005312336,-0.096994072,0.046781268,0.00667898,0.026782146,-0.075539552,0.02192542,-0.08493875,0.094920769,-0.035403799,0.055482917,0.011730601,0.025707759,-0.045135956,-0.026865015,-0.021687726,-0.033758607,0.039380163,-0.035569206,0.094727427,0.110645093,0.113832481,-0.033270057,0.083851807,-0.047571156,-0.057726432,0.06014559,0.085352816,-0.037993133,-0.115748256,0.030156896,-0.011791585,-0.079984166,-0.057128035,0.041013084,0.015918672,-0.061055385,0.034852069,0.015224474,0.018460043,0.037624884,-0.043750361,-0.064315908,-0.021196393,0.013232247,-0.104210995,-0.014082102,-0.009003337,0.039538879,-0.104972921,-0.007843186,0.036864106,0.140091136,-0.140378207,-0.024702528,0.022261325,-0.016963733,0.085992843,0.084627755,0.087819673,0.057446741,0.034928594,-0.009191031,0.006612496,0.173500806,0.015773606,0.028839959,-0.003225975,0.017906349,0.045199808,-0.014787061,0.143216819,0.024080573,-0.026598429,0.021371795,0.071952648,-0.063690811,0.067959011,-0.003076004,0.048659723,0.07212013,0.070788115,-0.077692196,0.014257526,-0.033723794,0.048253167,-0.069848642,0.078895502,-0.054729454,0.056982994,-0.048930183,0.111218356,-0.035901532,-0.074461408,0.099702097,-0.066805281,-0.095739737,-0.030167487,0.024464266,-0.020405861,0.010783117,0.029291801,0.045029871,-0.016342213,-0.080770619,-0.010066411,-0.019349953,0.002007038,0.023316836,0.0517575,0.020638591,-0.083597347,0.001626109,-0.013473966,-0.019440711,-0.036691602,-0.070496947,-0.026282867,-0.075752005,0.029484103,0.078903303,0.050158337,0.007515866,0.038447667,-0.148098722,-0.027888641,-0.038835317,0.006938846,-0.056281,-0.008859786,0.034408472],"created_at":1754014500865,"nchars":3056},"9":{"title":"README","path":"README.md","embeddingModel":"copilot-plus-small","ctime":1754014057597,"mtime":1754014057597,"tags":[],"extension":"md","metadata":{"created":"2025/08/01 11:07:37","modified":"2025/08/01 11:07:37"},"id":"2222116f6465647400989b362ca33dce","content":"\n\nNOTE TITLE: [[README]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\n# study-documents","embedding":[0.078305386,0.087752499,-0.014230446,0.018758545,0.052774269,-0.049631309,-0.021277629,-0.061629854,0.046163756,0.007550099,0.041544609,0.002294352,0.108341701,-0.09619841,0.013282118,-0.075958066,0.031719562,-0.020513659,0.011276482,0.010997106,-0.001586994,-0.066023283,-0.032111801,-0.023290856,0.004683871,-0.062310673,0.022476839,-0.049501095,0.044327844,0.039158367,-0.128817365,-0.043889191,-0.011110272,-0.012094588,0.030588863,0.067516118,0.04352222,0.019522028,0.111051582,-0.095447794,0.032530673,-0.030541642,-0.04095329,0.037156399,0.109637432,-0.138217598,0.002746347,0.006826513,-0.074493535,-0.029618362,-0.009171435,0.086006694,-0.04023229,0.10400109,-0.087013699,0.032550208,0.051771633,0.002637101,0.064366974,0.105319202,-0.088923045,-0.067001358,0.035562005,0.037776142,0.02384869,-0.009164395,-0.012468786,0.022475148,0.094684884,0.028703334,-0.051375289,0.062320873,-0.016472336,-0.027583979,-0.026263259,0.093101479,-0.010891286,0.042140644,-0.048476983,-0.068339244,-0.119280741,0.090532087,-0.041467708,-0.077326611,-0.015732862,0.008940805,0.048842274,-0.131364688,0.049332377,-0.015754925,0.032737669,0.017226819,-0.133115664,-0.184614837,-0.002887803,0.059923474,0.029936435,-0.048059329,-0.039209768,-0.13986142,0.027452927,0.048342831,-0.010017357,0.041926038,-0.035787418,-0.068843104,0.004590873,0.027291287,0.051720336,0.095460482,0.085120559,-0.044901833,-0.191579625,0.004300657,-0.072317868,0.101361543,0.114900567,-0.036338862,0.048485961,0.013500019,0.016258789,0.017113883,-0.047033455,0.009690333,-0.139162496,-0.060304597,-0.152433634,0.03905604,0.03549625,0.073748037,-0.01585765,-0.011760647,0.072451241,0.080254532,0.005111922,-0.001497706,0.015151568,0.007043615,0.008343472,-0.028497346,-0.063092858,0.070018381,0.045302425,-0.026361896,0.122879192,0.080089539,0.154510945,0.009009221,0.109785527,-0.009318333,-0.039148204,0.041142479,0.02275509,-0.014299366,-0.04780484,0.025452483,-0.023692375,-0.114552014,0.073500857,0.032322451,0.084748723,-0.076258577,-0.064511575,-0.018327231,0.061894391,-0.041445676,-0.046328899,-0.110675626,-0.02479526,0.065595582,0.02600758,-0.070639908,-0.104912959,0.067773037,-0.023317616,-0.070561454,0.098618485,0.114229947,0.018679472,-0.027332073,-0.06218069,0.017964866,0.154629052,0.155679882,0.111457363,0.064535618,-0.010526677,0.030208614,-0.011553287,0.119271994,0.06245314,-0.006215558,0.020295395,-0.079372346,-0.016557911,-0.040377796,0.103331991,0.000897435,-0.019192064,-0.020774493,0.088530697,-0.076163083,0.040594153,0.027575472,-0.011079716,-0.042020708,0.12516959,-0.044881877,0.022729712,-0.030384718,-0.008207553,-0.031323142,0.021054141,-0.007166693,0.03876967,-0.051232513,0.095800243,-0.008482332,-0.004614922,0.058604002,0.026397606,-0.067220837,-0.105068363,0.003492517,0.030080762,0.029522471,-0.010105712,-0.015393613,-0.08286456,-0.00595441,0.058375843,-0.060714338,-0.02202945,-0.018232701,-0.009299858,0.012104442,-0.053493686,-0.038304906,-0.071058251,0.001959804,-0.047399741,-0.019453287,-0.043935157,-0.018664405,0.022397446,0.081530929,0.065503955,-0.059928652,0.054968558,-0.065595277,-0.032115605,0.0121377,0.011536716,0.011617498,-0.019817745,-0.081763811],"created_at":1754014500865,"nchars":141}},"count":9},"sorting":{"language":"english","sortableProperties":["id","title","path","content","embeddingModel","created_at","ctime","mtime","extension"],"sortablePropertiesWithTypes":{"id":"string","title":"string","path":"string","content":"string","embeddingModel":"string","created_at":"number","ctime":"number","mtime":"number","extension":"string"},"sorts":{"id":{"docs":{"1":3,"2":1,"3":8,"4":5,"5":4,"6":6,"7":7,"8":0,"9":2},"orderedDocs":[[8,"1e58243d8b3345b7f61176cbddfbc364"],[2,"1f18119a228357d4a4d1ad176766099e"],[9,"2222116f6465647400989b362ca33dce"],[1,"7b4c3a5f2351e68d3fab702932a69aab"],[5,"80f7a1dbcb9542d4724e15cc1ec5e830"],[4,"9ca9b5355017a0ddced116c218340237"],[6,"e23a8f2b97eb4b4ce2c21dbf16b77f2c"],[7,"e68c06e6749a791ef6819b56d7359187"],[3,"fdf9b5ff709a96f1f4b2f9548042e2e9"]],"type":"string"},"title":{"docs":{"1":8,"2":0,"3":1,"4":2,"5":3,"6":4,"7":5,"8":6,"9":7},"orderedDocs":[[2,"main"],[3,"main"],[4,"main"],[5,"main"],[6,"main"],[7,"main"],[8,"PythonのPillowで画像処理をサクッと作った話"],[9,"README"],[1,"requirements"]],"type":"string"},"path":{"docs":{"1":8,"2":2,"3":3,"4":4,"5":5,"6":6,"7":7,"8":1,"9":0},"orderedDocs":[[9,"README.md"],[8,"勉強会資料/PythonのPillowで画像処理をサクッと作った話.md"],[2,"勉強会資料/source/image-editor/main.md"],[3,"勉強会資料/source/image-editor/main.md"],[4,"勉強会資料/source/image-editor/main.md"],[5,"勉強会資料/source/image-editor/main.md"],[6,"勉強会資料/source/image-editor/main.md"],[7,"勉強会資料/source/image-editor/main.md"],[1,"勉強会資料/source/image-editor/requirements.md"]],"type":"string"},"content":{"docs":{"1":8,"2":5,"3":3,"4":2,"5":0,"6":1,"7":4,"8":6,"9":7},"orderedDocs":[[5,"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) # CPU集約的な処理を別スレッドで実行\n    loop = asyncio.get_event_loop()\n    await loop.run_in_executor(None, process_sync)\n\n\n@app.get(\"/api/images/{filename}\")\nasync def get_image(filename: str):\n    \"\"\"処理済み画像を取得する\"\"\"\n    file_path = PROCESSED_DIR / filename\n    if not file_path.exists():\n        raise HTTPException(status_code=404, detail=\"Image not found\")\n\n    return FileResponse(path=file_path, media_type=\"image/png\", filename=filename)\n\n\n@app.get(\"/api/uploads/{filename}\")\nasync def get_uploaded_image(filename: str):\n    \"\"\"アップロード済み画像を取得する\"\"\"\n    file_path = UPLOAD_DIR / filename\n    if not file_path.exists():\n        raise HTTPException(status_code=404, detail=\"Image not found\")\n\n    return FileResponse(path=file_path, media_type=\"image/png\", filename=filename)\n\n\n@app.post(\"/api/download-batch\")\nasync def download_batch_images(filenames: List[str]):\n    \"\"\"複数の処理済み画像をZIPファイルでダウンロードする\"\"\"\n    if not filenames:\n        raise HTTPException(status_code=400, detail=\"No files specified\")\n\n    # ZIPファイルをメモリに作成\n    zip_buffer = io.BytesIO()\n\n    with zipfile.ZipFile(zip_buffer, \"w\", zipfile.ZIP_DEFLATED) as zip_file:\n        for filename in filenames:\n            file_path = PROCESSED_DIR / filename\n            if file_path.exists():\n                zip_file.write(file_path, filename)\n\n    zip_buffer.seek(0)\n\n    return StreamingResponse(\n        io.BytesIO(zip_buffer.read()),\n        media_type=\"application/zip\",\n        headers={\"Content-Disposition\": \"attachment; filename=processed_images.zip\"},\n    )\n\n\n@app.delete(\"/api/clear-files\")\nasync def clear_files():\n    \"\"\"アップロードファイルと処理済みファイルをクリアする\"\"\"\n    try:\n        upload_files = list(UPLOAD_DIR.glob(\"*\"))\n        processed_files = list(PROCESSED_DIR.glob(\"*\"))\n\n        # アップロードファイルを削除\n        for file_path in upload_files:\n            if file_path.is_file():\n                file_path.unlink()\n\n        # 処理済みファイルを削除\n        for file_path in processed_files:\n            if file_path.is_file():\n                file_path.unlink()\n\n        return {\n            \"message\": \"Files cleared successfully\",\n            \"deleted_uploads\": len(upload_files),\n            \"deleted_processed\": len(processed_files),\n            \"total_deleted\": len(upload_files) + len(processed_files),\n        }\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to clear files: {str(e)}\")\n\n\n@app.delete(\"/api/clear-old-files\")\nasync def clear_old_files(hours: int = 24):\n    \"\"\"指定時間以上古いファイルを削除する\"\"\"\n    try:\n        import time\n\n        current_time = time.time()\n        cutoff_time = current_time - (hours * 3600)  # 指定時間前\n\n        upload_files = list(UPLOAD_DIR.glob(\"*\"))\n        processed_files = list(PROCESSED_DIR.glob(\"*\"))\n\n        deleted_uploads = 0\n        deleted_processed = 0\n\n        # 古いアップロードファイルを削除\n        for file_path in upload_files:\n            if file_path.is_file() and file_path.stat().st_mtime < cutoff_time:\n                file_path.unlink()\n                deleted_uploads += 1\n\n        # 古い処理済みファイルを削除\n        for file_path in processed_files:\n            if file_path.is_file() and file_path.stat().st_mtime < cutoff_time:\n                file_path.unlink()\n                deleted_processed += 1\n\n        return {\n            \"message\": f\"Old files (older than {hours} hours) cleared successfully\",\n            \"deleted_uploads\": deleted_uploads,\n            \"deleted_processed\": deleted_processed,\n            \"total_deleted\": deleted_uploads + deleted_processed,\n        }\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to clear old files: {str(e)}\"\n        )\n\n\n@app.get(\"/api/storage-info\")\nasync def get_storage_info():\n    \"\"\"ストレージ使用量情報を取得する\"\"\"\n    try:\n        import os\n\n        def get_directory_size(path):\n            total_size = 0\n            file_count = 0\n            if path.exists():\n                for file_path in path.glob(\"*\"):\n                    if file_path.is_file():\n                        total_size += file_path.stat().st_size\n                        file_count += 1\n            return total_size, file_count\n\n        upload_size, upload_count = get_directory_size(UPLOAD_DIR)\n        processed_size, processed_count = get_directory_size(PROCESSED_DIR)\n\n        def format_size(size_bytes):\n            if size_bytes == 0:\n                return \"0 B\"\n            size_names = [\"B\", \"KB\", \"MB\", \"GB\"]\n            i = 0\n            while size_bytes >= 1024 and i < len(size_names) - 1:\n                size_bytes /= 1024\n                i += 1\n            return f\"{size_bytes:.1f} {size_names[i]}\"\n\n        return {\n            \"uploads\": {\n                \"size\": upload_size,\n                \"size_formatted\": format_size(upload_size),\n                \"file_count\": upload_count,\n            },\n            \"processed\": {\n                \"size\": processed_size,\n                \"size_formatted\": format_size(processed_size),\n                \"file_count\": processed_count,\n            },\n            \"total\": {\n                \"size\": upload_size + processed_size,\n                \"size_formatted\": format_size(upload_size + processed_size),\n                \"file_count\": upload_count + processed_count,\n            },\n        }\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to get storage info: {str(e)}\"\n        )\n\n\n@app.get(\"/health\")\nasync def health_check():\n    \"\"\"ヘルスチェック\"\"\"\n    from datetime import datetime\n\n    return {\n        \"status\": \"healthy\",\n        \"timestamp\": datetime.now().isoformat(),\n        \"version\": \"1.0.0\",\n        \"api_name\": \"Image Editor API\",\n    }\n\n\n# SVG処理用のクラス\nclass SVGGenerateRequest(BaseModel):\n    prefecture: str\n    color: str = \"#ff6277\"\n\n\nclass SVGResponse(BaseModel):\n    svg_content: str\n    filename: str"],[6,"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) # SVG処理用のクラス\nclass SVGGenerateRequest(BaseModel):\n    prefecture: str\n    color: str = \"#ff6277\"\n\n\nclass SVGResponse(BaseModel):\n    svg_content: str\n    filename: str\n\n\n# 都道府県リスト（SVGのid属性と対応）\nPREFECTURES = [\n    \"北海道\",\n    \"青森\",\n    \"岩手\",\n    \"宮城\",\n    \"秋田\",\n    \"山形\",\n    \"福島\",\n    \"茨城\",\n    \"栃木\",\n    \"群馬\",\n    \"埼玉\",\n    \"千葉\",\n    \"東京\",\n    \"神奈川\",\n    \"新潟\",\n    \"富山\",\n    \"石川\",\n    \"福井\",\n    \"山梨\",\n    \"長野\",\n    \"岐阜\",\n    \"静岡\",\n    \"愛知\",\n    \"三重\",\n    \"滋賀\",\n    \"京都\",\n    \"大阪\",\n    \"兵庫\",\n    \"奈良\",\n    \"和歌山\",\n    \"鳥取\",\n    \"島根\",\n    \"岡山\",\n    \"広島\",\n    \"山口\",\n    \"徳島\",\n    \"香川\",\n    \"愛媛\",\n    \"高知\",\n    \"福岡\",\n    \"佐賀\",\n    \"長崎\",\n    \"熊本\",\n    \"大分\",\n    \"宮崎\",\n    \"鹿児島\",\n    \"沖縄\",\n]\n\n\n@app.get(\"/api/prefectures\")\nasync def get_prefectures():\n    \"\"\"都道府県リストを取得する\"\"\"\n    return {\"prefectures\": PREFECTURES}\n\n\n@app.post(\"/api/generate-svg\", response_model=SVGResponse)\nasync def generate_svg(request: SVGGenerateRequest):\n    \"\"\"選択された都道府県をハイライトしたSVGを生成する\"\"\"\n    try:\n        svg_path = Path(\"assets/map.svg\")\n\n        if not svg_path.exists():\n            raise HTTPException(status_code=404, detail=\"SVG template not found\")\n\n        # SVGファイルを読み込み\n        with open(svg_path, \"r\", encoding=\"utf-8\") as f:\n            svg_content = f.read()\n\n        # まず、すべての都道府県の色を白色にリセット\n        for prefecture in PREFECTURES:\n            # 特別処理：SVG内のid属性と都道府県名のマッピング\n            if prefecture == \"徳島\":\n                reset_ids = [\"徳島\"]\n            elif prefecture == \"香川\":\n                reset_ids = [\"徳島-2\"]\n            else:\n                reset_ids = [prefecture]\n\n            for prefecture_id in reset_ids:\n                # 既存の色を白色にリセット\n                pattern1 = f'id=\"{prefecture_id}\"([^>]*?)fill=[\"\\'](#[^\"\\']*)[\"\\']'\n                if re.search(pattern1, svg_content):\n                    replacement1 = f'id=\"{prefecture_id}\"\\\\1fill=\"#fff\"'\n                    svg_content = re.sub(pattern1, replacement1, svg_content)\n\n        # 選択された都道府県の色を変更\n        if request.prefecture in PREFECTURES:\n            # 特別処理：SVG内のid属性と都道府県名のマッピング\n            if request.prefecture == \"徳島\":\n                prefecture_ids = [\"徳島\"]\n            elif request.prefecture == \"香川\":\n                # SVGファイル内では香川県がid=\"徳島-2\"で表現されている\n                prefecture_ids = [\"徳島-2\"]\n            else:\n                prefecture_ids = [request.prefecture]\n\n            for prefecture_id in prefecture_ids:\n                # より堅牢なSVG色変更処理\n                # ケース1: 既存のfill属性がある場合（fill=\"#色\" または fill='#色'）\n                pattern1 = f'id=\"{prefecture_id}\"([^>]*?)fill=[\"\\'](#[^\"\\']*)[\"\\']'\n                if re.search(pattern1, svg_content):\n                    replacement1 = f'id=\"{prefecture_id}\"\\\\1fill=\"{request.color}\"'\n                    svg_content = re.sub(pattern1, replacement1, svg_content)\n                    print(\n                        f\"Pattern 1 matched for {prefecture_id}: Updated existing fill attribute\"\n                    )\n                    continue\n\n                # ケース2: style属性内にfillがある場合\n                pattern2 = (\n                    f'id=\"{prefecture_id}\"([^>]*?)style=\"([^\"]*?)fill:[^;\"]*([^\"]*)\"'\n                )\n                if re.search(pattern2, svg_content):\n                    replacement2 = (\n                        f'id=\"{prefecture_id}\"\\\\1style=\"\\\\2fill:{request.color}\\\\3\"'\n                    )\n                    svg_content = re.sub(pattern2, replacement2, svg_content)\n                    print(\n                        f\"Pattern 2 matched for {prefecture_id}: Updated fill in style attribute\"\n                    )\n                    continue\n\n                # ケース3: fill属性がない場合は追加\n                pattern3 = f'id=\"{prefecture_id}\"([^>]*?)(?=[ >])'\n                if re.search(pattern3, svg_content):\n                    replacement3 = f'id=\"{prefecture_id}\"\\\\1 fill=\"{request.color}\"'\n                    svg_content = re.sub(pattern3, replacement3, svg_content)\n                    print(\n                        f\"Pattern 3 matched for {prefecture_id}: Added new fill attribute\"\n                    )\n                else:\n                    print(f\"Warning: No pattern matched for {prefecture_id}\")\n\n        # ファイル名を生成\n        filename = f\"japan_map_{request.prefecture}_{uuid.uuid4().hex[:8]}.svg\"\n        output_path = PROCESSED_DIR / filename\n\n        # SVGファイルを保存\n        with open(output_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(svg_content)\n\n        print(f\"SVG generated successfully: {filename}\")\n        return SVGResponse(svg_content=svg_content, filename=filename)\n\n    except Exception as e:\n        print(f\"SVG generation error: {str(e)}\")\n        raise HTTPException(status_code=500, detail=f\"SVG generation failed: {str(e)}\")\n\n\n@app.get(\"/api/svg/{filename}\")\nasync def get_svg(filename: str):\n    \"\"\"生成されたSVGファイルを取得する\"\"\"\n    file_path = PROCESSED_DIR / filename\n    if not file_path.exists():\n        raise HTTPException(status_code=404, detail=\"SVG file not found\")\n\n    return FileResponse(path=file_path, media_type=\"image/svg+xml\", filename=filename)\n\n\nclass FileInfo(BaseModel):\n    filename: str\n    size: int\n    size_formatted: str\n    created_at: str\n    file_type: str\n\n\nclass FileListResponse(BaseModel):\n    uploads: List[FileInfo]\n    processed: List[FileInfo]\n    total_count: int\n\n\n@app.get(\"/api/files/list\", response_model=FileListResponse)\nasync def get_file_list():\n    \"\"\"ファイル一覧を取得する\"\"\"\n    try:\n        import os\n        from datetime import datetime\n\n        def format_size(size_bytes):\n            if size_bytes == 0:\n                return \"0 B\"\n            size_names = [\"B\", \"KB\", \"MB\", \"GB\"]\n            i = 0\n            while size_bytes >= 1024 and i < len(size_names) - 1:\n                size_bytes /= 1024\n                i += 1\n            return f\"{size_bytes:.1f} {size_names[i]}\""],[4,"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) # アルファ値を計算して黒いオーバーレイを作成\n        alpha = int(opacity * 255)\n        overlay_with_alpha = Image.new('RGBA', image.size, (0, 0, 0, alpha))\n\n        # 元画像をRGBAに変換\n        if image.mode != 'RGBA':\n            image_rgba = image.convert('RGBA')\n        else:\n            image_rgba = image\n\n        # 合成\n        image = Image.alpha_composite(image_rgba, overlay_with_alpha)\n\n        # 必要に応じてRGBに戻す\n        if image.mode == 'RGBA':\n            image = image.convert('RGB')\n\n\n\n    elif operation == \"dpi\":\n        # DPI変更（画像自体は変更せず、メタデータのみ変更）\n        # DPI情報は保存時に設定されるため、ここでは何もしない\n        pass\n\n    return image\n\n\ndef preserve_image_metadata_and_save(original_path: Path, output_path: Path, processed_image: Image.Image):\n    \"\"\"元画像のメタデータ（EXIF、カラープロファイル）を保持して保存\"\"\"\n    try:\n        # 元画像を開いてメタデータを取得\n        with Image.open(str(original_path)) as original:\n            # EXIFデータを取得\n            exif = original.getexif()\n\n            # カラープロファイル（ICC Profile）を取得\n            icc_profile = original.info.get('icc_profile')\n\n            # その他のメタデータも取得\n            info = original.info.copy()\n\n            # 保存形式を決定\n            output_extension = str(output_path).lower()\n            if output_extension.endswith('.png'):\n                save_format = 'PNG'\n            elif output_extension.endswith(('.jpg', '.jpeg')):\n                save_format = 'JPEG'\n            elif output_extension.endswith('.webp'):\n                save_format = 'WEBP'\n            else:\n                save_format = 'JPEG'\n\n            # 保存オプション\n            save_kwargs = {\n                'format': save_format,\n                'optimize': True\n            }\n\n            # 品質設定\n            if save_format in ['JPEG', 'WEBP']:\n                save_kwargs['quality'] = 95\n            elif save_format == 'PNG':\n                save_kwargs['compress_level'] = 1\n\n            # EXIFデータがある場合は保持\n            if exif and save_format in ['JPEG', 'WEBP']:\n                save_kwargs['exif'] = exif\n\n            # ICCプロファイルがある場合は保持\n            if icc_profile:\n                save_kwargs['icc_profile'] = icc_profile\n\n            # DPI情報がある場合は保持\n            if 'dpi' in info:\n                save_kwargs['dpi'] = info['dpi']\n\n            # 保存\n            processed_image.save(str(output_path), **save_kwargs)\n            print(f\"Saved with metadata preservation: {output_path}\")\n\n    except Exception as e:\n        print(f\"Warning: Could not preserve metadata: {e}\")\n        # メタデータ保持に失敗した場合は通常の保存を行う\n        if str(output_path).lower().endswith('.png'):\n            processed_image.save(str(output_path), format='PNG', compress_level=1)\n        elif str(output_path).lower().endswith(('.jpg', '.jpeg')):\n            processed_image.save(str(output_path), format='JPEG', quality=95, optimize=True)\n        elif str(output_path).lower().endswith('.webp'):\n            processed_image.save(str(output_path), format='WEBP', quality=95, optimize=True)\n        else:\n            processed_image.save(str(output_path), format='JPEG', quality=95, optimize=True)\n\n\nasync def process_image_async(\n    input_path: Path, output_path: Path, operation: str, parameters: Dict[str, float]\n):\n    \"\"\"画像処理を非同期で実行（PILのみ使用）\"\"\"\n    def process_sync():\n        # PILで画像を読み込み（カラープロファイル保持）\n        with Image.open(str(input_path)) as original_image:\n            # 画像をコピーして処理用にする\n            image = original_image.copy()\n\n            print(f\"Original image mode: {image.mode}\")\n            print(f\"Original image size: {image.size}\")\n\n            # 操作を適用\n            image = apply_pil_operation(image, operation, parameters)\n\n            print(f\"Processed image mode: {image.mode}\")\n            print(f\"Processed image size: {image.size}\")\n\n            # DPI処理の場合は特別な保存処理\n            if operation == \"dpi\":\n                dpi = int(parameters.get(\"dpi\", 72))\n                try:\n                    # 元画像からメタデータを取得\n                    exif = original_image.getexif()\n                    icc_profile = original_image.info.get('icc_profile')\n\n                    # 保存形式を決定\n                    output_extension = str(output_path).lower()\n                    if output_extension.endswith('.png'):\n                        save_format = 'PNG'\n                    elif output_extension.endswith(('.jpg', '.jpeg')):\n                        save_format = 'JPEG'\n                    elif output_extension.endswith('.webp'):\n                        save_format = 'WEBP'\n                    else:\n                        save_format = 'PNG'\n\n                    save_kwargs = {\n                        'format': save_format,\n                        'dpi': (dpi, dpi),\n                        'optimize': True\n                    }\n\n                    if save_format in ['JPEG', 'WEBP']:\n                        save_kwargs['quality'] = 95\n                    elif save_format == 'PNG':\n                        save_kwargs['compress_level'] = 1\n\n                    # EXIFデータがある場合は保持\n                    if exif and save_format in ['JPEG', 'WEBP']:\n                        save_kwargs['exif'] = exif\n\n                    # ICCプロファイルがある場合は保持\n                    if icc_profile:\n                        save_kwargs['icc_profile'] = icc_profile\n\n                    image.save(str(output_path), **save_kwargs)\n                    print(f\"Successfully saved with DPI {dpi}: {output_path}\")\n\n                except Exception as e:\n                    print(f\"Warning: Could not save with DPI metadata: {e}\")\n                    preserve_image_metadata_and_save(input_path, output_path, image)\n            else:\n                # 通常の保存（メタデータ保持）\n                preserve_image_metadata_and_save(input_path, output_path, image)\n\n    # CPU集約的な処理を別スレッドで実行\n    loop = asyncio.get_event_loop()\n    await loop.run_in_executor(None, process_sync)"],[3,"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) # 複数の画像処理を順番に実行\n            await process_multiple_operations_async(\n                input_path, output_path, request.operations\n            )\n\n            results.append(\n                ImageBatchResponse(\n                    original_url=image_url,\n                    processed_url=f\"/processed/{output_filename}\",\n                    original_filename=filename,\n                    processed_filename=output_filename,\n                    status=\"success\",\n                    error_message=None,\n                )\n            )\n\n        except Exception as e:\n            results.append(\n                ImageBatchResponse(\n                    original_url=image_url,\n                    processed_url=\"\",\n                    original_filename=filename,\n                    processed_filename=\"\",\n                    status=\"error\",\n                    error_message=str(e),\n                )\n            )\n\n    return results\n\n\nasync def process_multiple_operations_async(\n    input_path: Path, output_path: Path, operations: List[OperationRequest]\n):\n    \"\"\"複数の操作を順番に処理する（PILのみ使用、メモリ内で処理して品質劣化を最小化）\"\"\"\n    if not operations:\n        raise ValueError(\"操作が指定されていません\")\n\n    def process_sync():\n        # PILで画像を読み込み（カラープロファイル保持）\n        with Image.open(str(input_path)) as original_image:\n            # 画像をコピーして処理用にする\n            image = original_image.copy()\n\n            # DPI情報を保持\n            dpi_value = None\n            for operation in operations:\n                if operation.operation == \"dpi\":\n                    dpi_value = int(operation.parameters.get(\"dpi\", 72))\n\n            # 全ての操作を順番に適用\n            for operation in operations:\n                operation_params = operation.parameters.copy()\n                if operation.operation == \"resize\" and operation.enableCrop is not None:\n                    operation_params[\"crop\"] = 1 if operation.enableCrop else 0\n\n                image = apply_pil_operation(image, operation.operation, operation_params)\n\n            # DPI情報がある場合は保存時に適用\n            if dpi_value:\n                # メタデータ保持保存（DPI情報付き）\n                try:\n                    # 元画像からメタデータを取得\n                    exif = original_image.getexif()\n                    icc_profile = original_image.info.get('icc_profile')\n\n                    # 保存形式を決定\n                    output_extension = str(output_path).lower()\n                    if output_extension.endswith('.png'):\n                        save_format = 'PNG'\n                    elif output_extension.endswith(('.jpg', '.jpeg')):\n                        save_format = 'JPEG'\n                    elif output_extension.endswith('.webp'):\n                        save_format = 'WEBP'\n                    else:\n                        save_format = 'JPEG'\n\n                    save_kwargs = {\n                        'format': save_format,\n                        'dpi': (dpi_value, dpi_value),\n                        'optimize': True\n                    }\n\n                    if save_format in ['JPEG', 'WEBP']:\n                        save_kwargs['quality'] = 95\n                    elif save_format == 'PNG':\n                        save_kwargs['compress_level'] = 1\n\n                    # EXIFデータがある場合は保持\n                    if exif and save_format in ['JPEG', 'WEBP']:\n                        save_kwargs['exif'] = exif\n\n                    # ICCプロファイルがある場合は保持\n                    if icc_profile:\n                        save_kwargs['icc_profile'] = icc_profile\n\n                    image.save(str(output_path), **save_kwargs)\n\n                except Exception as e:\n                    print(f\"Warning: Could not save with DPI metadata: {e}\")\n                    preserve_image_metadata_and_save(input_path, output_path, image)\n            else:\n                # 通常の保存（メタデータ保持）\n                preserve_image_metadata_and_save(input_path, output_path, image)\n\n    # CPU集約的な処理を別スレッドで実行\n    loop = asyncio.get_event_loop()\n    await loop.run_in_executor(None, process_sync)\n\n\ndef apply_pil_operation(image: Image.Image, operation: str, parameters: Dict[str, float]) -> Image.Image:\n    \"\"\"PILによる単一の画像処理操作を適用する（メモリ内処理）\"\"\"\n    if operation == \"resize\":\n        width = int(parameters.get(\"width\", 800))\n        height = int(parameters.get(\"height\", 600))\n        crop = int(parameters.get(\"crop\", 0))  # 0=通常リサイズ, 1=トリミング付きリサイズ\n\n        if crop == 1:\n            # トリミング付きリサイズ：アスペクト比を維持してトリミング\n            # ImageOps.fitを使用してスマートトリミング\n            image = ImageOps.fit(image, (width, height), Image.Resampling.LANCZOS)\n        else:\n            # 通常のリサイズ：アスペクト比を無視して指定サイズに変更\n            image = image.resize((width, height), Image.Resampling.LANCZOS)\n\n    elif operation == \"rotate\":\n        angle = parameters.get(\"angle\", 0)\n        # 高品質な回転処理\n        image = image.rotate(angle, resample=Image.Resampling.BICUBIC, expand=True)\n\n    elif operation == \"blur\":\n        sigma = parameters.get(\"sigma\", 1.0)\n        # ガウシアンブラーを適用\n        image = image.filter(ImageFilter.GaussianBlur(radius=sigma))\n\n    elif operation == \"grayscale\":\n        # グレースケール変換（Lモードに変換してからRGBに戻す）\n        grayscale = image.convert('L')\n        image = grayscale.convert('RGB')\n\n    elif operation == \"sepia\":\n        # セピア効果をPILで実装\n        # まずグレースケールに変換\n        grayscale = image.convert('L')\n\n        # セピア色調を作成\n        sepia = Image.new('RGB', image.size)\n        sepia_pixels = []\n\n        for pixel in grayscale.getdata():\n            # セピア色計算\n            r = min(255, int(pixel * 1.0))\n            g = min(255, int(pixel * 0.8))\n            b = min(255, int(pixel * 0.6))\n            sepia_pixels.append((r, g, b))\n\n        sepia.putdata(sepia_pixels)\n        image = sepia\n\n    elif operation == \"overlay\":\n        # 透過黒オーバーレイを適用\n        opacity = parameters.get(\"opacity\", 0.3)  # デフォルト30%\n\n        # アルファ値を計算して黒いオーバーレイを作成\n        alpha = int(opacity * 255)\n        overlay_with_alpha = Image.new('RGBA', image.size, (0, 0, 0, alpha))"],[7,"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) def get_file_info(file_path, file_type):\n            stat = file_path.stat()\n            return FileInfo(\n                filename=file_path.name,\n                size=stat.st_size,\n                size_formatted=format_size(stat.st_size),\n                created_at=datetime.fromtimestamp(stat.st_mtime).strftime(\n                    \"%Y-%m-%d %H:%M:%S\"\n                ),\n                file_type=file_type,\n            )\n\n        uploads = []\n        processed = []\n\n        # アップロード済みファイルを取得\n        for file_path in UPLOAD_DIR.glob(\"*\"):\n            if file_path.is_file():\n                uploads.append(get_file_info(file_path, \"upload\"))\n\n        # 処理済みファイルを取得\n        for file_path in PROCESSED_DIR.glob(\"*\"):\n            if file_path.is_file():\n                processed.append(get_file_info(file_path, \"processed\"))\n\n        # 作成日時順でソート（新しいものから）\n        uploads.sort(key=lambda x: x.created_at, reverse=True)\n        processed.sort(key=lambda x: x.created_at, reverse=True)\n\n        return FileListResponse(\n            uploads=uploads,\n            processed=processed,\n            total_count=len(uploads) + len(processed),\n        )\n\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to get file list: {str(e)}\"\n        )\n\n\n@app.delete(\"/api/files/{filename}\")\nasync def delete_file(filename: str):\n    \"\"\"個別ファイルを削除する\"\"\"\n    try:\n        upload_path = UPLOAD_DIR / filename\n        processed_path = PROCESSED_DIR / filename\n\n        deleted = False\n        file_type = None\n\n        if upload_path.exists():\n            upload_path.unlink()\n            deleted = True\n            file_type = \"upload\"\n        elif processed_path.exists():\n            processed_path.unlink()\n            deleted = True\n            file_type = \"processed\"\n\n        if not deleted:\n            raise HTTPException(status_code=404, detail=\"File not found\")\n\n        return {\n            \"message\": \"File deleted successfully\",\n            \"filename\": filename,\n            \"file_type\": file_type,\n        }\n\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to delete file: {str(e)}\")\n\n\n# 文字・画像置換用のリクエストモデル\nclass TextReplaceRequest(BaseModel):\n    text_replacements: Dict[str, str]\n    image_replacements: Dict[str, str]  # image_id -> uploaded_image_url\n    config: Optional[Dict] = None\n\n\n@app.post(\"/api/replace-text-images\")\nasync def replace_text_images(request: TextReplaceRequest):\n    \"\"\"テンプレート画像の文字と画像を置換する - 新しいテンプレートベースアプローチ\"\"\"\n    try:\n        # 置換用画像を読み込み\n        image_replacements = {}\n        for image_id, image_url in request.image_replacements.items():\n            image_filename = image_url.split(\"/\")[-1]\n            image_path = UPLOAD_DIR / image_filename\n\n            if image_path.exists():\n                with Image.open(image_path) as replacement_image:\n                    image_replacements[image_id] = replacement_image.copy()\n\n        # 新しいテンプレートベース合成処理\n        replacer = TextImageReplacer()\n        result_image = replacer.create_composite_image(\n            request.text_replacements,\n            image_replacements\n        )\n\n        # 結果を保存（JPG形式）\n        output_filename = f\"text_replaced_{uuid.uuid4().hex[:8]}.jpg\"\n        output_path = PROCESSED_DIR / output_filename\n        replacer.save_as_jpg(result_image, str(output_path))\n\n        return {\n            \"message\": \"Text and images replaced successfully using template-based approach\",\n            \"processed_url\": f\"/processed/{output_filename}\",\n            \"filename\": output_filename\n        }\n\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Text replacement failed: {str(e)}\")\n\n\n@app.post(\"/api/create-tourism-layout\")\nasync def create_tourism_layout(\n    title: str,\n    locations: List[str],\n    image_urls: List[str]\n):\n    \"\"\"観光パンフレット風のレイアウトを作成する\"\"\"\n    try:\n        # アップロードされた画像を読み込み\n        images = []\n        for image_url in image_urls:\n            image_filename = image_url.split(\"/\")[-1]\n            image_path = UPLOAD_DIR / image_filename\n\n            if image_path.exists():\n                with Image.open(image_path) as img:\n                    images.append(img.copy())\n\n        if not images:\n            raise HTTPException(status_code=400, detail=\"No valid images found\")\n\n        # パンフレットレイアウトを作成\n        replacer = TextImageReplacer()\n        layout_image = replacer.create_tourism_layout(title, locations, images)\n\n        # 結果を保存（JPG形式）\n        output_filename = f\"tourism_layout_{uuid.uuid4().hex[:8]}.jpg\"\n        output_path = PROCESSED_DIR / output_filename\n        replacer.save_as_jpg(layout_image, str(output_path))\n\n        return {\n            \"message\": \"Tourism layout created successfully\",\n            \"processed_url\": f\"/processed/{output_filename}\",\n            \"filename\": output_filename\n        }\n\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Layout creation failed: {str(e)}\")\n\n\n@app.get(\"/api/template-config\")\nasync def get_template_config():\n    \"\"\"テンプレート設定を取得する\"\"\"\n    return create_template_config()\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000, reload=True)\n\n```"],[2,"\n\nNOTE TITLE: [[main]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\n```\nfrom fastapi import FastAPI, File, UploadFile, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.responses import FileResponse, StreamingResponse\nfrom fastapi.staticfiles import StaticFiles\nfrom pydantic import BaseModel\nfrom typing import Dict, Any, Optional, List\nimport os\nimport uuid\nfrom PIL import Image, ImageFilter, ImageEnhance, ImageOps\nimport asyncio\nfrom pathlib import Path\nimport aiofiles\nimport zipfile\nimport io\nimport xml.etree.ElementTree as ET\nimport re\nfrom text_image_replacer import TextImageReplacer, create_template_config\n\napp = FastAPI(title=\"Image Editor API\", version=\"1.0.0\")\n\n# CORS設定\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# アップロードディレクトリの設定\nUPLOAD_DIR = Path(\"uploads\")\nPROCESSED_DIR = Path(\"processed\")\nUPLOAD_DIR.mkdir(exist_ok=True)\nPROCESSED_DIR.mkdir(exist_ok=True)\n\n# 静的ファイル配信の設定\napp.mount(\"/uploads\", StaticFiles(directory=UPLOAD_DIR), name=\"uploads\")\napp.mount(\"/processed\", StaticFiles(directory=PROCESSED_DIR), name=\"processed\")\n\n\nclass ImageResponse(BaseModel):\n    url: str\n    filename: str\n\n\nclass ImageBatchResponse(BaseModel):\n    original_url: str\n    processed_url: str\n    original_filename: str\n    processed_filename: str\n    status: str\n    error_message: Optional[str] = None\n\n\nclass OperationRequest(BaseModel):\n    id: str\n    operation: str\n    parameters: Dict[str, float]\n    enableCrop: Optional[bool] = None\n\n\nclass ProcessBatchRequest(BaseModel):\n    image_urls: List[str]\n    operations: List[OperationRequest]\n    output_format: Optional[str] = \"original\"\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Image Editor API\", \"version\": \"1.0.0\"}\n\n\n@app.post(\"/api/upload\", response_model=ImageResponse)\nasync def upload_image(file: UploadFile = File(...)):\n    \"\"\"画像ファイルをアップロードする\"\"\"\n    if not file.content_type or not file.content_type.startswith(\"image/\"):\n        raise HTTPException(\n            status_code=400, detail=\"Invalid file type. Please upload an image.\"\n        )\n\n    # ファイル名を生成\n    file_extension = file.filename.split(\".\")[-1] if file.filename else \"jpg\"\n    unique_filename = f\"{uuid.uuid4()}.{file_extension}\"\n    file_path = UPLOAD_DIR / unique_filename\n\n    # ファイルを保存\n    async with aiofiles.open(file_path, \"wb\") as f:\n        content = await file.read()\n        await f.write(content)\n\n    return ImageResponse(url=f\"/uploads/{unique_filename}\", filename=unique_filename)\n\n\n@app.post(\"/api/upload-batch\", response_model=List[ImageResponse])\nasync def upload_batch_images(files: List[UploadFile] = File(...)):\n    \"\"\"複数の画像ファイルを一括アップロードする\"\"\"\n    uploaded_files = []\n\n    for file in files:\n        if not file.content_type or not file.content_type.startswith(\"image/\"):\n            raise HTTPException(\n                status_code=400,\n                detail=f\"Invalid file type: {file.filename}. Please upload images only.\",\n            )\n\n        # ファイル名を生成\n        file_extension = file.filename.split(\".\")[-1] if file.filename else \"jpg\"\n        unique_filename = f\"{uuid.uuid4()}.{file_extension}\"\n        file_path = UPLOAD_DIR / unique_filename\n\n        # ファイルを保存\n        async with aiofiles.open(file_path, \"wb\") as f:\n            content = await file.read()\n            await f.write(content)\n\n        uploaded_files.append(\n            ImageResponse(url=f\"/uploads/{unique_filename}\", filename=unique_filename)\n        )\n\n    return uploaded_files\n\n\n@app.post(\"/api/process-batch\", response_model=List[ImageBatchResponse])\nasync def process_batch_images(request: ProcessBatchRequest):\n    \"\"\"複数の画像を一括処理する\"\"\"\n    results = []\n\n    for image_url in request.image_urls:\n        try:\n            # アップロード画像のパスを取得\n            if image_url.startswith(\"/uploads/\") or \"/uploads/\" in image_url:\n                filename = image_url.split(\"/\")[-1]\n                input_path = UPLOAD_DIR / filename\n            else:\n                results.append(\n                    ImageBatchResponse(\n                        original_url=image_url,\n                        processed_url=\"\",\n                        original_filename=filename,\n                        processed_filename=\"\",\n                        status=\"error\",\n                        error_message=\"Invalid image URL\",\n                    )\n                )\n                continue\n\n            if not input_path.exists():\n                results.append(\n                    ImageBatchResponse(\n                        original_url=image_url,\n                        processed_url=\"\",\n                        original_filename=filename,\n                        processed_filename=\"\",\n                        status=\"error\",\n                        error_message=\"Image not found\",\n                    )\n                )\n                continue\n\n            # 出力ファイル名を生成（元の拡張子を保持または指定された形式に変換）\n            original_extension = filename.split(\".\")[-1].lower()\n\n            if request.output_format == \"original\":\n                output_extension = original_extension\n            elif request.output_format == \"png\":\n                output_extension = \"png\"\n            elif request.output_format == \"jpg\":\n                output_extension = \"jpg\"\n            elif request.output_format == \"webp\":\n                output_extension = \"webp\"\n            else:\n                output_extension = original_extension\n\n            output_filename = f\"processed_{uuid.uuid4()}.{output_extension}\"\n            output_path = PROCESSED_DIR / output_filename\n\n            # 複数の画像処理を順番に実行\n            await process_multiple_operations_async(\n                input_path, output_path, request.operations\n            )"],[8,"\n\nNOTE TITLE: [[PythonのPillowで画像処理をサクッと作った話]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\nPythonで画像処理を行うための強力なライブラリ、Pillow（PILの後継）を紹介します。\n\n*   **主な機能:**\n    *   画像のアップロード\n    *   画像加工（リサイズ、回転、ぼかし、グレースケール、セピア、オーバーレイなど）\n    *   加工済み画像のダウンロード\n\n\n![[画面録画 2025-08-01 031105.mp4]]\n### ライブラリ選定のポイント\n\n#### OpenCV：高機能だが色の扱いに注意\n\n*   **特徴:**\n    *   画像処理、画像解析、機械学習など、多岐にわたる機能を提供\n    *   リアルタイム処理に強く、組み込みシステムやロボティクス分野で広く利用\n*   **注意点:**\n    *   **色の変化:**\n        *   画像処理の過程で、明度や彩度が変化しやすい\n        *   原因：\n            1.  デフォルトの色空間がBGRであること（一般的なRGBと異なる）\n            2.  データ型の範囲を超えた演算による色のクリップ\n            3.  コーデックによる色の劣化\n    *   **対策:**\n        *   `cv2.cvtColor()`で色空間を変換\n        *   データ型を適切に管理\n        *   可逆圧縮形式（PNGなど）を使用\n*   **→ 対策が必要で、手間がかかる場合がある**\n\n#### Pillow（PIL）：シンプルで扱いやすい\n\n*   **特徴:**\n    *   画像処理に特化しており、シンプルで直感的なAPIを提供\n    *   様々な画像形式をサポートし、基本的な画像編集、加工、変換が容易\n*   **メリット:**\n    *   **色の変化が少ない:**\n        *   デフォルトの色空間がRGBであるため、OpenCVのような色空間変換の手間が少ない\n        *   色の管理が比較的容易で、意図しない色の変化が起こりにくい\n    *   **扱いやすさ:**\n        *   APIが直感的で、初心者でも扱いやすい\n        *   Webアプリケーションとの連携が容易\n*   **→ 色の管理が容易で、Web用途にも適している**\n\n### OpenCVで起こったまさかの挙動\n\n**印刷・出版関係**で作られた画像だと色が変化する\n\nICCプロファイル =「この画像の色はこう表示してね」という設定ファイル\nその中でもJapan Color（日本の印刷業界標準）で設定されてると\nOpenCVではプロファイルの情報をうまく拾えていないのか、以下のようになる。\n\n| before                                          | after                                                   |\n| ----------------------------------------------- | ------------------------------------------------------- |\n| ![[IMG_20250607_192630989_NV_with_profile.jpg]] | ![[processed_a370d39c-dc67-474c-b6b7-d183b6d23194.png]] |\n\nしかし、画像（写真）によっては影響がほぼない\n\n| before                          | after                                                   |\n| ------------------------------- | ------------------------------------------------------- |\n| ![[transcend_with_profile.jpg]] | ![[processed_587f4226-142a-430a-8dfc-9936203af133.png]] |\n\n実写の場合、色の量が多くグラデーションが微調整の幅が多くその分情報量多く繊細。\nアニメ・イラスト画の場合は原色が多く高彩度でグラデーションが少ないので、ICCプロファイルのありなしの変化がさほど多くない模様...\n\nしかしPillowでは起きなかった。（なんで？）\n\n### Pillowライブラリの基本\n\n*   **Pillowとは:**\n    *   Python Imaging Library (PIL) の後継として開発された、画像処理ライブラリ。\n    *   様々な画像形式をサポートし、画像編集、加工、変換など、豊富な機能を提供。\n*   **主な機能:**\n    *   画像の読み込みと保存\n    *   画像のリサイズ、回転、切り抜き\n    *   色調補正、フィルタ処理\n    *   図形描画、テキスト描画\n    *   画像形式の変換\n\n### コード解説：画像処理APIの主要部分\n\n1.  **画像の読み込み:**\n\n    ```python\n    # 画像ファイルを読み込む\n    image = Image.open(\"image.jpg\")\n    ```\n2.  **画像のリサイズ:**\n\n    ```python\n    # 画像サイズを変更する\n    resized_image = image.resize((800, 600))  # 幅800px、高さ600pxにリサイズ\n    ```\n3.  **画像の回転:**\n\n    ```python\n    # 画像を回転する\n    rotated_image = image.rotate(45)  # 45度回転\n    ```\n4.  **フィルタ処理:**\n\n    ```python\n    # 画像にぼかしフィルタを適用する\n    blurred_image = image.filter(ImageFilter.GaussianBlur(radius=5))\n    ```\n5.  **画像の色調変換:**\n\n    ```python\n    # グレースケールに変換\n    grayscale_image = image.convert('L')\n    ```\n6.  **画像の保存:**\n\n    ```python\n    # 処理後の画像を保存する\n    resized_image.save(\"resized_image.jpg\")\n    ```\n\n### まとめ\n\nPyhonでの画像処理というか、画像って奥深い。"],[9,"\n\nNOTE TITLE: [[README]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\n# study-documents"],[1,"\n\nNOTE TITLE: [[requirements]]\n\nMETADATA:{\"created\":\"2025/08/01 11:07:37\",\"modified\":\"2025/08/01 11:07:37\"}\n\nNOTE BLOCK CONTENT:\n\n```\nfastapi==0.104.1\nuvicorn[standard]==0.24.0\npython-multipart==0.0.6\nPillow==10.1.0\npydantic==2.5.0\npython-jose[cryptography]==3.3.0\npasslib[bcrypt]==1.7.4\naiofiles==23.2.1\nnumpy==1.26.4\nscikit-image==0.24.0\nscipy==1.13.0\nrequests==2.31.0\n```"]],"type":"string"},"embeddingModel":{"docs":{"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":6,"8":7,"9":8},"orderedDocs":[[1,"copilot-plus-small"],[2,"copilot-plus-small"],[3,"copilot-plus-small"],[4,"copilot-plus-small"],[5,"copilot-plus-small"],[6,"copilot-plus-small"],[7,"copilot-plus-small"],[8,"copilot-plus-small"],[9,"copilot-plus-small"]],"type":"string"},"created_at":{"docs":{"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":6,"8":7,"9":8},"orderedDocs":[[1,1754014500848],[2,1754014500850],[3,1754014500853],[4,1754014500855],[5,1754014500857],[6,1754014500860],[7,1754014500863],[8,1754014500865],[9,1754014500865]],"type":"number"},"ctime":{"docs":{"1":2,"2":3,"3":4,"4":5,"5":6,"6":7,"7":8,"8":1,"9":0},"orderedDocs":[[9,1754014057597],[8,1754014057625],[1,1754014057662],[2,1754014057662],[3,1754014057662],[4,1754014057662],[5,1754014057662],[6,1754014057662],[7,1754014057662]],"type":"number"},"mtime":{"docs":{"1":2,"2":3,"3":4,"4":5,"5":6,"6":7,"7":8,"8":1,"9":0},"orderedDocs":[[9,1754014057597],[8,1754014057625],[1,1754014057662],[2,1754014057662],[3,1754014057662],[4,1754014057662],[5,1754014057662],[6,1754014057662],[7,1754014057662]],"type":"number"},"extension":{"docs":{"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":6,"8":7,"9":8},"orderedDocs":[[1,"md"],[2,"md"],[3,"md"],[4,"md"],[5,"md"],[6,"md"],[7,"md"],[8,"md"],[9,"md"]],"type":"string"}},"enabled":true,"isSorted":true},"language":"english","schema":{"id":"string","title":"string","path":"string","content":"string","embedding":"vector[256]","embeddingModel":"string","created_at":"number","ctime":"number","mtime":"number","tags":"string[]","extension":"string"}}